var novaConstructors = {
	newObject: function() {},
	newAnimal: function() {},
	newArrayDemo: function() {},
	newPerson: function() {},
	newBodyBuilder: function() {},
	newClosureDemo: function() {},
	newDog: function() {},
	newExceptionHandlingDemo: function() {},
	newFileTest: function() {},
	newGenericDemo: function() {},
	newHashMapDemo: function() {},
	newHashSetDemo: function() {},
	newIntegerTest: function() {},
	newLab: function() {},
	newMathDemo: function() {},
	newNestTest: function() {},
	newException: function() {},
	newNonWholeDivisionException: function() {},
	newPolymorphismDemo: function() {},
	newQueueDemo: function() {},
	newSpider: function() {},
	newSquare: function() {},
	newSvgChart: function() {},
	newSvgFractal: function() {},
	newT1: function() {},
	newT2: function() {},
	newTest: function() {},
	newThreadDemo: function() {},
	newThread: function() {},
	newThread0: function() {},
	newThreadDemoImplementation: function() {},
	newAckermann: function() {},
	newDog: function() {},
	newDatabaseDemo: function() {},
	newClientDemo: function() {},
	newConnectionThread: function() {},
	newOutputThread: function() {},
	newServerDemo: function() {},
	newAssignmentStability: function() {},
	newBoundedIntervalStability: function() {},
	newBoundlessIntervalStability: function() {},
	newCastStability: function() {},
	newClassWithProperties: function() {},
	newClientThread: function() {},
	newClosureStability: function() {},
	newExceptionStability: function() {},
	newExternalInnerClassStability: function() {},
	newFancyOutputStreamTests: function() {},
	newFileStability: function() {},
	newFirstClassFunctionStability: function() {},
	newInnerClassStability: function() {},
	newMyOuter: function() {},
	newMyInner: function() {},
	newIntervalStability: function() {},
	newLambdaStability: function() {},
	newLibraryLoadingStability: function() {},
	newNetworkStability: function() {},
	newNode: function() {},
	newPolymorphicSuperClass: function() {},
	newPolymorphicSubClass: function() {},
	newPolymorphismStability: function() {},
	newPrimitiveOverloadStability: function() {},
	newRegexStability: function() {},
	newUncaughtExceptionHandler: function() {},
	newStabilityExceptionHandler: function() {},
	newStabilityTest: function() {},
	newStabilityTestCase: function() {},
	newStabilityTestException: function() {},
	newStaticImportStability: function() {},
	newSyntaxStability: function() {},
	newThreadImplementation: function() {},
	newThreadStability: function() {},
	newTimeStability: function() {},
	newToStringStability: function() {},
	newUnstableException: function() {},
	newNestException: function() {},
	newInvalidAssertionException: function() {},
	newNest: function() {},
	newNest1Bool: function() {},
	newNest1Int: function() {},
	newNest1Long: function() {},
	newNest1Char: function() {},
	newNest1Byte: function() {},
	newNest1Float: function() {},
	newTestCase: function() {},
	newTestResult: function() {},
	newTestRunnerModel: function() {},
	newTestSuite: function() {},
	newTestSuiteRunnerModel: function() {},
	newUIComponent: function() {},
	newPanel: function() {},
	newResultBar: function() {},
	newWindow: function() {},
	newResultWindow: function() {},
	newEmbeddedNestTest: function() {},
	newTypeNestTest: function() {},
	newString0: function() {},
	newString1: function() {},
	newString2: function() {},
	newString3: function() {},
	newString4: function() {},
	newSubstring: function() {},
	newSystem: function() {},
	newImageTracker: function() {},
	newTrackPoint: function() {},
	newDBConnector: function() {},
	newResultSet: function() {},
	newNode: function() {},
	newBinaryNode0: function() {},
	newBinaryNode1: function() {},
	newTree: function() {},
	newBinaryTree: function() {},
	newBounds: function() {},
	newHashMap0: function() {},
	newHashMap1: function() {},
	newHashMapIterator: function() {},
	newHashMap1Long0: function() {},
	newHashMap1Long1: function() {},
	newHashMapIterator1Long: function() {},
	newHashMap1Int0: function() {},
	newHashMap1Int1: function() {},
	newHashMapIterator1Int: function() {},
	newHashMap1Int2Int0: function() {},
	newHashMap1Int2Int1: function() {},
	newHashMapIterator1Int2Int: function() {},
	newHashMap1Long2Int0: function() {},
	newHashMap1Long2Int1: function() {},
	newHashMapIterator1Long2Int: function() {},
	newHashSet: function() {},
	newImmutableHashMap0: function() {},
	newImmutableHashMap1: function() {},
	newImmutableHashMap1Long0: function() {},
	newImmutableHashMap1Long1: function() {},
	newImmutableHashMap1Int0: function() {},
	newImmutableHashMap1Int1: function() {},
	newImmutableHashMap1Int2Int0: function() {},
	newImmutableHashMap1Int2Int1: function() {},
	newImmutableHashMap1Long2Int0: function() {},
	newImmutableHashMap1Long2Int1: function() {},
	newPair: function() {},
	newPair1Int2Int: function() {},
	newPair1Long: function() {},
	newPair1Int: function() {},
	newPair1Long2Int: function() {},
	newReversibleHashMap: function() {},
	newTuple: function() {},
	newTuple2: function() {},
	newTuple22Int: function() {},
	newArray: function() {},
	newArray0: function() {},
	newArray1: function() {},
	newArray1Double: function() {},
	newArray1Double0: function() {},
	newArray1Double1: function() {},
	newArray1Char: function() {},
	newArray1Char0: function() {},
	newArray1Char1: function() {},
	newArray1Int: function() {},
	newArray1Int0: function() {},
	newArray1Int1: function() {},
	newArray1Byte: function() {},
	newArray1Byte0: function() {},
	newArray1Byte1: function() {},
	newArray1Long: function() {},
	newArray1Long0: function() {},
	newArray1Long1: function() {},
	newArrayIterator: function() {},
	newArrayIterator1Double: function() {},
	newArrayIterator1Char: function() {},
	newArrayIterator1Int: function() {},
	newArrayIterator1Byte: function() {},
	newArrayIterator1Long: function() {},
	newCharArray: function() {},
	newCharArrayIterator: function() {},
	newCompiledList: function() {},
	newDoubleArray: function() {},
	newDoubleArrayIterator: function() {},
	newNoSuchElementException: function() {},
	newEmptyStackException: function() {},
	newImmutableArray: function() {},
	newImmutableArray0: function() {},
	newImmutableArray1: function() {},
	newImmutableArray2: function() {},
	newImmutableArray1Double: function() {},
	newImmutableArray1Double0: function() {},
	newImmutableArray1Double1: function() {},
	newImmutableArray1Double2: function() {},
	newImmutableArray1Char: function() {},
	newImmutableArray1Char0: function() {},
	newImmutableArray1Char1: function() {},
	newImmutableArray1Char2: function() {},
	newImmutableArray1Int: function() {},
	newImmutableArray1Int0: function() {},
	newImmutableArray1Int1: function() {},
	newImmutableArray1Int2: function() {},
	newImmutableArray1Byte: function() {},
	newImmutableArray1Byte0: function() {},
	newImmutableArray1Byte1: function() {},
	newImmutableArray1Byte2: function() {},
	newImmutableArray1Long: function() {},
	newImmutableArray1Long0: function() {},
	newImmutableArray1Long1: function() {},
	newImmutableArray1Long2: function() {},
	newImmutableArrayIterator: function() {},
	newImmutableArrayIterator1Double: function() {},
	newImmutableArrayIterator1Char: function() {},
	newImmutableArrayIterator1Int: function() {},
	newImmutableArrayIterator1Byte: function() {},
	newImmutableArrayIterator1Long: function() {},
	newImmutableCharArray: function() {},
	newImmutableCharArrayIterator: function() {},
	newIntArray: function() {},
	newIntArrayIterator: function() {},
	newIntRange: function() {},
	newIntRange0: function() {},
	newIntRangeIterator: function() {},
	newLinkedList: function() {},
	newLinkedListIterator: function() {},
	newListNode: function() {},
	newQueue: function() {},
	newQueue0: function() {},
	newStack: function() {},
	newStack0: function() {},
	newStringCharArray0: function() {},
	newStringCharArray1: function() {},
	newStringCharArray2: function() {},
	newSubstringCharArray: function() {},
	newBacktraces: function() {},
	newCaughtException: function() {},
	newDivideByZeroException: function() {},
	newExceptionData: function() {},
	newInvalidArgumentException: function() {},
	newInvalidOperationException: function() {},
	newNullAccessException: function() {},
	newStackTrace: function() {},
	newUnimplementedOperationException: function() {},
	newUnimplementedForTargetException: function() {},
	newGC: function() {},
	newClosedStreamException: function() {},
	newConsole: function() {},
	newCurl: function() {},
	newEmptyOutputStream: function() {},
	newFancyOutputStream: function() {},
	newFile0: function() {},
	newFile1: function() {},
	newFileNotFoundException: function() {},
	newFileReader: function() {},
	newFileWriter0: function() {},
	newFileWriter1: function() {},
	newFileWriter2: function() {},
	newStreamReader: function() {},
	newStringBuilder: function() {},
	newSequence: function() {},
	newArithmeticSequence: function() {},
	newDiekstra: function() {},
	newGeometricSequence: function() {},
	newGraph: function() {},
	newInvalidNumericStatementException: function() {},
	newMath: function() {},
	newMatrix0: function() {},
	newMatrix1: function() {},
	newMatrix2: function() {},
	newNumericOperand: function() {},
	newNumericOperation0: function() {},
	newNumericOperation1: function() {},
	newNumericOperation2: function() {},
	newStatement: function() {},
	newNumericStatement: function() {},
	newNumericTree: function() {},
	newPolynomial: function() {},
	newStatementComponent: function() {},
	newVariableOperand: function() {},
	newVector0: function() {},
	newVector1: function() {},
	newVector2D0: function() {},
	newVector2D1: function() {},
	newVector3D0: function() {},
	newVector3D1: function() {},
	newVector4D0: function() {},
	newVector4D1: function() {},
	newCalculus: function() {},
	newHuffmanTree: function() {},
	newLogicalStatement: function() {},
	newConclusion: function() {},
	newHypothesis: function() {},
	newInvalidFormulaException: function() {},
	newStatementComponent: function() {},
	newLogicalConnective: function() {},
	newStatementGroup: function() {},
	newStatementLetter: function() {},
	newWFF: function() {},
	newClass: function() {},
	newField: function() {},
	newFunctionMap: function() {},
	newGenericArgument: function() {},
	newGenericParameter: function() {},
	newInvalidLibraryException: function() {},
	newLibrary: function() {},
	newPropertyMap: function() {},
	newType: function() {},
	newSocket: function() {},
	newClientSocket: function() {},
	newConnectionSocket: function() {},
	newNetworkInputStream: function() {},
	newNetworkOutputStream: function() {},
	newServerSocket: function() {},
	newPackage: function() {},
	newPrimitive: function() {},
	newBool: function() {},
	newNull: function() {},
	newNumber: function() {},
	newByte: function() {},
	newChar: function() {},
	newDouble: function() {},
	newFloat: function() {},
	newInt: function() {},
	newLong: function() {},
	newShort: function() {},
	newProcess: function() {},
	newMatch: function() {},
	newPattern: function() {},
	newRegex: function() {},
	newMD5: function() {},
	newSha256: function() {},
	newJsonSerializer: function() {},
	newInvalidParseException: function() {},
	newMissingMatchingTokenException: function() {},
	newButton: function() {},
	newColor: function() {},
	newColor0: function() {},
	newColor1: function() {},
	newFrame: function() {},
	newImmutableColor0: function() {},
	newImmutableColor1: function() {},
	newImmutableColor2: function() {},
	newImmutableColor3: function() {},
	newLabel: function() {},
	newScreen: function() {},
	newScrollBar: function() {},
	newWindowThread: function() {},
	newThreadLocal: function() {},
	newThreadLocal1Int: function() {},
	newAsync: function() {},
	newTask: function() {},
	newInterval: function() {},
	newBoundedInterval: function() {},
	newBoundlessInterval: function() {},
	newIntervalException: function() {},
	newInfiniteIntervalException: function() {},
	newTimer: function() {},
	newCumulativeTimer: function() {},
	newDate: function() {},
	newDateTime0: function() {},
	newDateTime1: function() {},
	newDateTime2: function() {},
	newDateTime3: function() {},
	newInvalidDateException: function() {},
	newInvalidDateFormatException: function() {},
	newCalculator: function() {},
	newInvalidIntervalException: function() {},
	newNoGapException: function() {},
	newTime: function() {},
	newJson: function() {},
	newSvg: function() {},
	newSvgComponent: function() {},
	newSvgCircle: function() {},
	newSvgComponentList: function() {},
	newSvgComponentNode: function() {},
	newSvgMainComponent: function() {},
	newNo3: function() {},
	newNo3Node: function() {},
	newNo3Select: function() {},
	newNo3SelectAll: function() {},
};

var nova_null = undefined;

var NovaObject = function () {
	this.hashCodeLong = 0;
	
	
};

NovaObject.prototype.constructor = NovaObject;


NovaObject.prototype.destroy = function () {
	
};

NovaObject._js_default = function () {
	return null;
	
};

NovaObject.prototype.equals = function (another) {
	return this === another;
	
};

NovaObject.prototype.toString = function () {
	return novaConstructors.newString2("{").plus0(((this.accessor__js_class().accessor_name()) || nova_null).plus0(novaConstructors.newString2(" @").plus0(((this.accessor_hashCode()) || nova_null).plus0(novaConstructors.newString2("}")))));
	
};

NovaObject.init = function () {
	return this;
	
};

NovaObject.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/Object"), false);
	
};

NovaObject.prototype.mutator__js_class = function () {
	
};

NovaObject.prototype.accessor_hashCode = function () {
	return novaConstructors.newString2("No hashcode available");
	
};

NovaObject.prototype.mutator_hashCode = function () {
	
};

NovaObject.prototype.accessor_hashCodeLong = function () {
	return strtol(hashCode(this), NULL, 16);
	
};

NovaObject.prototype.mutator_hashCodeLong = function () {
	
};

NovaObject.prototype.super = function () {
	
};

novaConstructors.newObject = function () {
	var __value = new NovaObject()
	NovaObject.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaObject.init.call(__value);
	
};

var Animal = function () {
	
	
};

Animal.prototype = Object.create(NovaObject.prototype);
Animal.prototype.constructor = Animal;


Animal.prototype.destroy = function () {
	
};

Animal.prototype.getNumLegs = function () {
	return 0;
	
};

Animal.prototype.getNumEyes = function () {
	return 0;
	
};

Animal.prototype.getDescription = function () {
	return novaConstructors.newString2("Its just a stupid animal...");
	
};

Animal.prototype.toString = function () {
	return this.getDescription();
	
};

Animal.init = function () {
	return this;
	
};

Animal.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/Animal"), false);
	
};

Animal.prototype.mutator__js_class = function () {
	
};

Animal.prototype.super = function () {
	
};

novaConstructors.newAnimal = function () {
	var __value = new Animal()
	NovaObject.call(__value);
	Animal.prototype.super.apply(__value, [].slice.call(arguments));
	return Animal.init.call(__value);
	
};

var ArrayDemo = function () {
	
	
};

ArrayDemo.prototype = Object.create(NovaObject.prototype);
ArrayDemo.prototype.constructor = ArrayDemo;


ArrayDemo.prototype.destroy = function () {
	
};

ArrayDemo.main = function (args) {
	var c;
	c = 'y';
	while (c === 'y' || c === 'Y') {
		var list;
		var animal;
		list = novaConstructors.newArray();
		(list || nova_null).add0(novaConstructors.newDog());
		(list || nova_null).add0(novaConstructors.newDog());
		(list || nova_null).add0(novaConstructors.newSpider());
		(list || nova_null).add0(novaConstructors.newDog());
		(list || nova_null).add0(novaConstructors.newAnimal());
		(list || nova_null).add0(novaConstructors.newSpider());
		var i;
		i = 0;
		for (; i < (list || nova_null).accessor_count(); i++) {
			NovaConsole.writeLine1(novaConstructors.newString2("Contains: ").plus0(((list || nova_null).get(i) || nova_null).toString()));
		}
		animal = (list || nova_null).get(2);
		(list || nova_null).remove0(2);
		NovaConsole.writeLine1(novaConstructors.newString2("--------- Removed: ").plus0(((animal || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" ----------"))));
		var i2;
		i2 = 0;
		for (; i2 < (list || nova_null).accessor_count(); i2++) {
			NovaConsole.writeLine1(novaConstructors.newString2("Contains: ").plus0(((list || nova_null).get(i2) || nova_null).toString()));
		}
		(list || nova_null).add1(1, novaConstructors.newSpider());
		NovaConsole.writeLine1(novaConstructors.newString2("--------- Added a new spider at index 1 ----------"));
		var i3;
		i3 = 0;
		for (; i3 < (list || nova_null).accessor_count(); i3++) {
			NovaConsole.writeLine1(novaConstructors.newString2("Contains: ").plus0(((list || nova_null).get(i3) || nova_null).toString()));
		}
		NovaConsole.write0(novaConstructors.newString2("Run again? (Y/N)"));
		c = NovaConsole.readChar();
	}
	NovaConsole.writeLine1(novaConstructors.newString2("\nFinished"));
	NovaConsole.waitForEnter();
	
};

ArrayDemo.init = function () {
	return this;
	
};

ArrayDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/ArrayDemo"), false);
	
};

ArrayDemo.prototype.mutator__js_class = function () {
	
};

ArrayDemo.prototype.super = function () {
	
};

novaConstructors.newArrayDemo = function () {
	var __value = new ArrayDemo()
	NovaObject.call(__value);
	ArrayDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return ArrayDemo.init.call(__value);
	
};

var Person = function () {
	this.age = 0;
	this.name = null;
	
	
};

Person.prototype = Object.create(NovaObject.prototype);
Person.prototype.constructor = Person;


Person.prototype.destroy = function () {
	
};

Person.init = function (name, age) {
	this.name = name;
	this.age = age;
	return this;
	
};

Person.prototype.sayHello = function () {
	NovaConsole.writeLine1(novaConstructors.newString2("Hello from ").plus0((this.name || nova_null).plus0(novaConstructors.newString2(" the Person"))));
	
};

Person.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/Person"), false);
	
};

Person.prototype.mutator__js_class = function () {
	
};

Person.prototype.super = function () {
	
};

novaConstructors.newPerson = function (name, age) {
	var __value = new Person()
	NovaObject.call(__value);
	Person.prototype.super.apply(__value, [].slice.call(arguments));
	return Person.init.call(__value, name, age);
	
};

var BodyBuilder = function () {
	this.weightClass = 0;
	
	
};

BodyBuilder.prototype = Object.create(Person.prototype);
BodyBuilder.prototype.constructor = BodyBuilder;


BodyBuilder.prototype.destroy = function () {
	
};

BodyBuilder.init = function (weightClass, name) {
	this.age = 5;
	this.weightClass = weightClass;
	this.name = name;
	return this;
	
};

BodyBuilder.prototype.sayHello = function () {
	NovaConsole.writeLine1(novaConstructors.newString2("Hello from ").plus0((this.name || nova_null).plus0(novaConstructors.newString2(" the BodyBuilder"))));
	
};

BodyBuilder.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/BodyBuilder"), false);
	
};

BodyBuilder.prototype.mutator__js_class = function () {
	
};

BodyBuilder.prototype.super = function () {
	
};

novaConstructors.newBodyBuilder = function (weightClass, name) {
	var __value = new BodyBuilder()
	Person.call(__value);
	BodyBuilder.prototype.super.apply(__value, [].slice.call(arguments));
	return BodyBuilder.init.call(__value, weightClass, name);
	
};

var ClosureDemo = function () {
	
	
};

ClosureDemo.prototype = Object.create(NovaObject.prototype);
ClosureDemo.prototype.constructor = ClosureDemo;


ClosureDemo.prototype.destroy = function () {
	
};

ClosureDemo.main = function (args) {
	var demo;
	demo = novaConstructors.newClosureDemo();
	(demo || nova_null).callClosure(ClosureDemo.multiply);
	(demo || nova_null).callClosure(ClosureDemo.pow);
	NovaConsole.waitForEnter();
	
};

ClosureDemo.prototype.callClosure = function (closure) {
	var value;
	value = closure(5, 3);
	NovaConsole.writeLine1(novaConstructors.newString2("Closure returned ").plus0(NovaInt.toString(value)));
	
};

ClosureDemo.multiply = function (value1, value2) {
	NovaConsole.writeLine1(novaConstructors.newString2("multiply was called with ").plus0(NovaInt.toString(value1).plus0(novaConstructors.newString2(" and ").plus0(NovaInt.toString(value2)))));
	return value1 * value2;
	
};

ClosureDemo.pow = function (base, pow) {
	var value;
	NovaConsole.writeLine1(novaConstructors.newString2("pow was called with ").plus0(NovaInt.toString(base).plus0(novaConstructors.newString2(" and ").plus0(NovaInt.toString(pow)))));
	value = base;
	var i;
	i = 0;
	for (; i < (pow - 1); i++) {
		value = value * base;
	}
	return value;
	
};

ClosureDemo.init = function () {
	return this;
	
};

ClosureDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/ClosureDemo"), false);
	
};

ClosureDemo.prototype.mutator__js_class = function () {
	
};

ClosureDemo.prototype.super = function () {
	
};

novaConstructors.newClosureDemo = function () {
	var __value = new ClosureDemo()
	NovaObject.call(__value);
	ClosureDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return ClosureDemo.init.call(__value);
	
};

var Dog = function () {
	
	
};

Dog.prototype = Object.create(Animal.prototype);
Dog.prototype.constructor = Dog;


Dog.prototype.destroy = function () {
	
};

Dog.init = function () {
	return this;
	
};

Dog.prototype.getNumLegs = function () {
	return 4;
	
};

Dog.prototype.getNumEyes = function () {
	return 2;
	
};

Dog.prototype.getDescription = function () {
	return novaConstructors.newString2("A fuzzy dog");
	
};

Dog.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/Dog"), false);
	
};

Dog.prototype.mutator__js_class = function () {
	
};

Dog.prototype.super = function () {
	
};

novaConstructors.newDog = function () {
	var __value = new Dog()
	Animal.call(__value);
	Dog.prototype.super.apply(__value, [].slice.call(arguments));
	return Dog.init.call(__value);
	
};

var ExceptionHandlingDemo = function () {
	
	
};

ExceptionHandlingDemo.prototype = Object.create(NovaObject.prototype);
ExceptionHandlingDemo.prototype.constructor = ExceptionHandlingDemo;


ExceptionHandlingDemo.prototype.destroy = function () {
	
};

ExceptionHandlingDemo.main = function (args) {
	try {
		var result;
		result = ExceptionHandlingDemo.divide(100, 5);
		NovaConsole.writeLine1(novaConstructors.newString2("After working example: ").plus0(NovaInt.toString(result)));
		result = ExceptionHandlingDemo.divide(100, 3);
		NovaConsole.writeLine1(novaConstructors.newString2("this output will not show."));
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.5118936890007906);
			console.error(e);
			process.exit(1);
		} else {
			NovaConsole.writeLine1(novaConstructors.newString2("You used the divide() method incorrectly."));
		}
	 }
	finally {
		NovaConsole.writeLine1(novaConstructors.newString2("Exiting the try block."));
	}
	NovaConsole.writeLine1(novaConstructors.newString2("After the try block."));
	NovaConsole.waitForEnter();
	
};

ExceptionHandlingDemo.divide = function (num, den) {
	if (/*Int*//*Bool*/num % den != 0) {
		throw novaConstructors.newNonWholeDivisionException();
	}
	return ~~(num / den);
	
};

ExceptionHandlingDemo.init = function () {
	return this;
	
};

ExceptionHandlingDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/ExceptionHandlingDemo"), false);
	
};

ExceptionHandlingDemo.prototype.mutator__js_class = function () {
	
};

ExceptionHandlingDemo.prototype.super = function () {
	
};

novaConstructors.newExceptionHandlingDemo = function () {
	var __value = new ExceptionHandlingDemo()
	NovaObject.call(__value);
	ExceptionHandlingDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return ExceptionHandlingDemo.init.call(__value);
	
};

var FileTest = function () {
	
	
};

FileTest.prototype = Object.create(NovaObject.prototype);
FileTest.prototype.constructor = FileTest;


FileTest.prototype.destroy = function () {
	
};

FileTest.main = function (args) {
	var f;
	f = novaConstructors.newFile1(novaConstructors.newString2("C:/Users/Braden Steffaniak/test3.txt"));
	if ((f || nova_null).accessor_exists()) {
		var writer;
		var reader;
		var data;
		NovaConsole.writeLine1(novaConstructors.newString2("Your file exists!"));
		writer = novaConstructors.newFileWriter0(f);
		(writer || nova_null).writeLine(novaConstructors.newString2("Entering data.."));
		(writer || nova_null).writeLine(novaConstructors.newString2("asdfasdf thing."));
		(writer || nova_null).close();
		reader = novaConstructors.newFileReader(f);
		data = (reader || nova_null).readAllContents();
		(reader || nova_null).close();
		NovaConsole.writeLine1(data);
	} else {
		NovaConsole.writeLine1(novaConstructors.newString2("Your file does not exist.."));
	}
	NovaConsole.writeLine1(novaConstructors.newString2("Press enter to exit..."));
	NovaConsole.waitForEnter();
	
};

FileTest.init = function () {
	return this;
	
};

FileTest.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/FileTest"), false);
	
};

FileTest.prototype.mutator__js_class = function () {
	
};

FileTest.prototype.super = function () {
	
};

novaConstructors.newFileTest = function () {
	var __value = new FileTest()
	NovaObject.call(__value);
	FileTest.prototype.super.apply(__value, [].slice.call(arguments));
	return FileTest.init.call(__value);
	
};

var GenericDemo = function () {
	
	
};

GenericDemo.prototype = Object.create(NovaObject.prototype);
GenericDemo.prototype.constructor = GenericDemo;


GenericDemo.prototype.destroy = function () {
	
};

GenericDemo.main = function (args) {
	var strs;
	strs = novaConstructors.newStack();
	NovaConsole.writeLine1(novaConstructors.newString2("Pushing \"test\""));
	(strs || nova_null).push(novaConstructors.newString2("test"));
	NovaConsole.writeLine1(novaConstructors.newString2("Pushing \"ASDFASDF\""));
	(strs || nova_null).push(novaConstructors.newString2("ASDFASDF"));
	NovaConsole.writeLine1(novaConstructors.newString2("Pushing \"3!\""));
	(strs || nova_null).push(novaConstructors.newString2("3!"));
	NovaConsole.writeLine1(novaConstructors.newString2("Pushing \"34!!4334\""));
	(strs || nova_null).push(novaConstructors.newString2("34!!4334"));
	NovaConsole.writeLine1(novaConstructors.newString2("Pushing null"));
	(strs || nova_null).push(null);
	while (!(strs || nova_null).accessor_isEmpty()) {
		var popped;
		popped = (strs || nova_null).pop();
		if ((popped) != null) {
			popped = novaConstructors.newString2("\"").plus0((popped || nova_null).plus0(novaConstructors.newString2("\"")));
		}
		NovaConsole.writeLine1(novaConstructors.newString2("Popping: ").plus0(popped));
	}
	NovaConsole.waitForEnter();
	
};

GenericDemo.init = function () {
	return this;
	
};

GenericDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/GenericDemo"), false);
	
};

GenericDemo.prototype.mutator__js_class = function () {
	
};

GenericDemo.prototype.super = function () {
	
};

novaConstructors.newGenericDemo = function () {
	var __value = new GenericDemo()
	NovaObject.call(__value);
	GenericDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return GenericDemo.init.call(__value);
	
};

var HashMapDemo = function () {
	
	
};

HashMapDemo.prototype = Object.create(NovaObject.prototype);
HashMapDemo.prototype.constructor = HashMapDemo;


HashMapDemo.prototype.destroy = function () {
	
};

HashMapDemo.main = function (args) {
	var self = this;
	
	var words;
	words = novaConstructors.newHashMap0();
	(words || nova_null).set(novaConstructors.newString2("test"), novaConstructors.newString2("is test"));
	(words || nova_null).set(novaConstructors.newString2("test2"), novaConstructors.newString2("is test2"));
	(words || nova_null).set(novaConstructors.newString2("test3hey"), novaConstructors.newString2("is test3hey"));
	(words || nova_null).set(novaConstructors.newString2("test4hey"), novaConstructors.newString2("is test4hey"));
	(words || nova_null).set(novaConstructors.newString2("test5"), novaConstructors.newString2("is test5"));
	(words || nova_null).set(novaConstructors.newString2("Whoah"), novaConstructors.newString2("it works"));
	(words || nova_null).forEach0((_1, _2, _3) => {
			NovaConsole.writeLine1(novaConstructors.newString2("Contains: ").plus0((((_1) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
			
	});
	NovaConsole.writeLine1(novaConstructors.newString2("\nRemoving test2: ").plus0((((words.remove(novaConstructors.newString2("test2"))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2("\n"))));
	(words || nova_null).forEach0((_1, _2, _3) => {
			NovaConsole.writeLine1(novaConstructors.newString2("Contains: ").plus0((((_1) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
			
	});
	NovaConsole.writeLine1(novaConstructors.newString2("\n").plus0(((((words || nova_null).filter0((_1, _2, _3) => {
								return ((_1 || nova_null).key || nova_null).contains1(novaConstructors.newString2("hey"));
								
					}) || nova_null).map0((_1, _2, _3) => {
							return (_1 || nova_null).value;
							
				}) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("\n"))));
	(words || nova_null).forEach0((_1, _2, _3) => {
			NovaConsole.writeLine1(novaConstructors.newString2("Contains: ").plus0((((_1) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
			
	});
	NovaConsole.waitForEnter();
	
};

HashMapDemo.init = function () {
	return this;
	
};

HashMapDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/HashMapDemo"), false);
	
};

HashMapDemo.prototype.mutator__js_class = function () {
	
};

HashMapDemo.prototype.super = function () {
	
};

novaConstructors.newHashMapDemo = function () {
	var __value = new HashMapDemo()
	NovaObject.call(__value);
	HashMapDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMapDemo.init.call(__value);
	
};

var HashSetDemo = function () {
	
	
};

HashSetDemo.prototype = Object.create(NovaObject.prototype);
HashSetDemo.prototype.constructor = HashSetDemo;


HashSetDemo.prototype.destroy = function () {
	
};

HashSetDemo.main = function (args) {
	var set;
	var count;
	var timer;
	var stringTime;
	var addTime;
	var getTime;
	var newStringTime;
	set = novaConstructors.newHashSet();
	(set || nova_null).add(novaConstructors.newString2("TEseting"));
	NovaConsole.writeLine2(set);
	NovaConsole.writeLine1(novaConstructors.newString2("Contains TEset? ").plus0(Bool.toString((set.contains0(novaConstructors.newString2("TEset")))).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Contains TEseting? ").plus0(Bool.toString((set.contains0(novaConstructors.newString2("TEseting")))).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine2(set);
	NovaConsole.writeLine1(novaConstructors.newString2("Benchmarking"));
	count = 50000;
	timer = novaConstructors.newTimer().start();
	var i;
	i = 0;
	for (; i < count; i++) {
		novaConstructors.newString2("my string").plus0(NovaInt.toString((i)).plus0(novaConstructors.newString2("")));
	}
	stringTime = ((timer || nova_null).stop() || nova_null).accessor_duration();
	NovaConsole.writeLine1(novaConstructors.newString2("Took ").plus0(NovaLong.toString((stringTime)).plus0(novaConstructors.newString2("ms to create ").plus0(NovaInt.toString((count)).plus0(novaConstructors.newString2(" strings"))))));
	var i;
	i = 0;
	for (; i < 50000; i++) {
		(set || nova_null).add(novaConstructors.newString2("my string").plus0(NovaInt.toString((i)).plus0(novaConstructors.newString2(""))));
	}
	addTime = ((timer || nova_null).stop() || nova_null).accessor_duration();
	NovaConsole.writeLine1(novaConstructors.newString2("Took ").plus0(NovaLong.toString((addTime)).plus0(novaConstructors.newString2("ms to call add ").plus0(NovaInt.toString((count)).plus0(novaConstructors.newString2(" times ").plus0(NovaLong.toString(((addTime - stringTime) * ~~(100 / stringTime))).plus0(novaConstructors.newString2("% overhead"))))))));
	(timer || nova_null).start();
	var i;
	i = 0;
	for (; i < count; i++) {
		(set || nova_null).get(novaConstructors.newString2("my string").plus0(NovaInt.toString((i)).plus0(novaConstructors.newString2(""))));
	}
	getTime = ((timer || nova_null).stop() || nova_null).accessor_duration();
	NovaConsole.writeLine1(novaConstructors.newString2("Took ").plus0(NovaLong.toString((getTime)).plus0(novaConstructors.newString2("ms to call get ").plus0(NovaInt.toString((count)).plus0(novaConstructors.newString2(" times ").plus0(NovaLong.toString(((getTime - stringTime) * ~~(100 / stringTime))).plus0(novaConstructors.newString2("% overhead"))))))));
	(timer || nova_null).start();
	var i;
	i = 0;
	for (; i < count; i++) {
		novaConstructors.newString2("my string").plus0(NovaInt.toString((i)).plus0(novaConstructors.newString2("")));
	}
	newStringTime = ((timer || nova_null).stop() || nova_null).accessor_duration();
	NovaConsole.writeLine1(novaConstructors.newString2("Took ").plus0(NovaLong.toString((newStringTime)).plus0(novaConstructors.newString2("ms to create ").plus0(NovaInt.toString((count)).plus0(novaConstructors.newString2(" strings ").plus0(NovaLong.toString(((newStringTime - stringTime) * ~~(100 / stringTime))).plus0(novaConstructors.newString2("% overhead"))))))));
	NovaConsole.waitForEnter();
	
};

HashSetDemo.init = function () {
	return this;
	
};

HashSetDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/HashSetDemo"), false);
	
};

HashSetDemo.prototype.mutator__js_class = function () {
	
};

HashSetDemo.prototype.super = function () {
	
};

novaConstructors.newHashSetDemo = function () {
	var __value = new HashSetDemo()
	NovaObject.call(__value);
	HashSetDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return HashSetDemo.init.call(__value);
	
};

var IntegerTest = function () {
	
	
};

IntegerTest.prototype = Object.create(NovaObject.prototype);
IntegerTest.prototype.constructor = IntegerTest;


IntegerTest.prototype.destroy = function () {
	
};

IntegerTest.main = function (args) {
	var c;
	c = 'y';
	while (c === 'y' || c === 'Y') {
		var timer;
		timer = novaConstructors.newTimer().start();
		var i;
		i = 0;
		for (; i < 999999; i++) {
			NovaLong.toString(i);
		}
		(timer || nova_null).stop();
		NovaConsole.writeLine1(novaConstructors.newString2("Time taken: ").plus0(NovaLong.toString((timer.accessor_duration())).plus0(novaConstructors.newString2("ms"))));
		NovaConsole.write0(novaConstructors.newString2("Run again? (Y/N) "));
		c = NovaConsole.readChar();
	}
	NovaConsole.writeLine1(novaConstructors.newString2("\nFinished"));
	NovaConsole.waitForEnter();
	
};

IntegerTest.init = function () {
	return this;
	
};

IntegerTest.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/IntegerTest"), false);
	
};

IntegerTest.prototype.mutator__js_class = function () {
	
};

IntegerTest.prototype.super = function () {
	
};

novaConstructors.newIntegerTest = function () {
	var __value = new IntegerTest()
	NovaObject.call(__value);
	IntegerTest.prototype.super.apply(__value, [].slice.call(arguments));
	return IntegerTest.init.call(__value);
	
};

var Lab = function () {
	
	
};

Lab.prototype = Object.create(NovaObject.prototype);
Lab.prototype.constructor = Lab;


Lab.prototype.destroy = function () {
	
};

Lab.main = function (args) {
	var self = this;
	
	var strData;
	var otherStrData;
	var tree;
	var num1;
	var num2;
	var str;
	var str2;
	var nova_local_0;
	var nova_local_1;
	var list;
	var list2;
	var sss;
	var multi;
	var linked;
	var x;
	var aaa;
	var bbb;
	var sq;
	var v1;
	var v2;
	var matrix1;
	var matrix2;
	var matrix3;
	var l;
	var myImmutableArray;
	var outputArray;
	strData = Lab.generated33();
	otherStrData = Lab.generated34();
	tree = novaConstructors.newBinaryTree(strData);
	NovaConsole.writeLine1(novaConstructors.newString2("Preorder: ").plus0(((tree.preorder().join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Inorder: ").plus0(((tree.inorder().join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Postorder: ").plus0(((tree.postorder().join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Levelorder: ").plus0(((tree.levelorder().join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2(""))));
	num1 = 4;
	num2 = num1 = 7;
	NovaConsole.writeLine1(novaConstructors.newString2("My nums: ").plus0(NovaInt.toString((num1)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((num2)).plus0(novaConstructors.newString2(" hey: ").plus0((((tree.inorder()) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2("!"))))))));
	NovaConsole.log(novaConstructors.newString2("MergeSorted array: ").plus0((((strData.mergeSort1()) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.log(novaConstructors.newString2("QuickSorted array: ").plus0((((strData.quickSort1()) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.log(novaConstructors.newString2("Concatted arrays: ").plus0((((strData.plus0(otherStrData)) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.log(novaConstructors.newString2("Concatted sorted array: ").plus0(((((strData.plus0(otherStrData)).sort0()) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.log(novaConstructors.newString2("Multiplied string: ").plus0(((novaConstructors.newString2("hey").multiply0(novaConstructors.newInt(4))) || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Result from ternary: ").plus0(NovaInt.toString((num1)).plus0(novaConstructors.newString2(" ").plus0(((num1 < 3 ? novaConstructors.newString2("<") : novaConstructors.newString2(">=")) || nova_null).plus0(novaConstructors.newString2(" 3"))))));
	str = novaConstructors.newString2("this isnt null");
	str2 = null;
	NovaConsole.writeLine1(novaConstructors.newString2("Normal: ").plus0(((novaConstructors.newString2("hello").surroundWith(novaConstructors.newString2("hey "))) || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Symmetrical: ").plus0(((novaConstructors.newString2("hello").surroundWith(novaConstructors.newString2("hey "), true)) || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Elvis not null: ").plus0((((nova_local_0 = str) != null ? nova_local_0 : novaConstructors.newString2("wtf")) || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Elvis null: ").plus0(((((nova_local_1 = str2) != null ? nova_local_1 : novaConstructors.newString2("this is null")) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	novaConstructors.newString2("test").substring(0);
	NovaConsole.writeLine1((((novaConstructors.newIntRange0(2, 8)) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(": ").plus0((((novaConstructors.newIntRange0(2, 8)).join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("")))));
	list = Lab.generated35();
	list2 = Lab.generated36();
	NovaConsole.log(novaConstructors.newString2("List2 ").plus0((((list2) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	((list2 || nova_null).add0(9) || nova_null).add0(2);
	NovaConsole.log(((list || nova_null).map0((_1, _2, _3) => {
					return novaConstructors.newString2("'").plus0(((_1) || nova_null).plus0(novaConstructors.newString2("'")));
					
		}) || nova_null).toEnglish(novaConstructors.newString2("and")));
	NovaConsole.log(((list || nova_null).map0((_1, _2, _3) => {
					return novaConstructors.newString2("'").plus0(((_1) || nova_null).plus0(novaConstructors.newString2("'")));
					
		}) || nova_null).toEnglish(novaConstructors.newString2("and"), false));
	NovaConsole.log(novaConstructors.newString2("Main local unset: ").plus0(NovaInt.toString((Lab.local.get())).plus0(novaConstructors.newString2(""))));
	(Lab.local || nova_null).set(10);
	NovaConsole.log(novaConstructors.newString2("Main local set: ").plus0(NovaInt.toString((Lab.local.get())).plus0(novaConstructors.newString2(""))));
	Async.execute(() => {
			NovaConsole.log(novaConstructors.newString2("Async local unset: ").plus0(NovaInt.toString((self.local.get())).plus0(novaConstructors.newString2(""))));
			(self.local || nova_null).set(5);
			NovaConsole.log(novaConstructors.newString2("Async local set: ").plus0(NovaInt.toString((self.local.get())).plus0(novaConstructors.newString2(""))));
			NovaConsole.writeLine1(novaConstructors.newString2("Wait a second!"));
			Thread.sleep(1000);
			NovaConsole.writeLine1(novaConstructors.newString2("ok, now what"));
			NovaConsole.log(novaConstructors.newString2("Async local at end: ").plus0(NovaInt.toString((self.local.get())).plus0(novaConstructors.newString2(""))));
			
	});
	sss = novaConstructors.newArray0(4).map0((_1, _2, _3) => {
			return novaConstructors.newArray0(2).map0((_1, _2, _3) => {
					return novaConstructors.newArray0(1);
					
			});
			
	});
	NovaConsole.writeLine2(sss);
	NovaConsole.writeLine1(novaConstructors.newString2("Started async execution"));
	multi = novaConstructors.newArray();
	(multi || nova_null).add0(Lab.generated37());
	(multi || nova_null).add0(Lab.generated38());
	NovaConsole.writeLine1(novaConstructors.newString2("Multi dimensional array: ").plus0((((multi) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(Bool.toString((((((multi || nova_null).get(0) || nova_null).get(0) || nova_null).chars || nova_null).toCharArray() || nova_null).contains('z')).capitalize());
	NovaConsole.writeLine1(((list || nova_null).map0((x, _2, _3) => {
					var something;
					something = 5 * (x || nova_null).count;
					return NovaInt.toString((something)).plus0(novaConstructors.newString2(" ").plus0(((x) || nova_null).plus0(novaConstructors.newString2(""))));
					
		}) || nova_null).join(novaConstructors.newString2(", ")));
	NovaConsole.writeLine1(novaConstructors.newString2("Mapped: ").plus0((((list || nova_null).filter0((_1, _2, _3) => {
							return (_1 || nova_null).count >= 4;
							
				}) || nova_null).map0((_1, _2, _3) => {
						return NovaInt.toString((_2)).plus0(novaConstructors.newString2(": ").plus0(((_1) || nova_null).plus0(novaConstructors.newString2("?"))));
						
			}) || nova_null).join(novaConstructors.newString2(", "))));
	NovaConsole.writeLine1(novaConstructors.newString2("Mapped backwards: ").plus0(((((list || nova_null).filter0((_1, _2, _3) => {
								return (_1 || nova_null).count >= 4;
								
					}) || nova_null).map0((_1, _2, _3) => {
							return ((_1) || nova_null).plus0(novaConstructors.newString2("?"));
							
				}) || nova_null).reverse() || nova_null).join(novaConstructors.newString2(", "))));
	NovaConsole.writeLine1(novaConstructors.newString2("Mapped2: ").plus0(((list2 || nova_null).map1((_1, _2, _3) => {
						return NovaByte.toString((_1)).plus0(novaConstructors.newString2("!"));
						
			}) || nova_null).join(novaConstructors.newString2(", "))));
	linked = novaConstructors.newLinkedList();
	(linked || nova_null).addAll(Lab.generated39());
	NovaConsole.writeLine1(novaConstructors.newString2("Linked list backwards: ").plus0(((linked || nova_null).reverse() || nova_null).join(novaConstructors.newString2(", "))));
	NovaConsole.writeLine1(novaConstructors.newString2("Linked list forwards: ").plus0((linked || nova_null).join(novaConstructors.newString2(", "))));
	x = novaConstructors.newString2("Hey its a string");
	NovaConsole.writeLine1(x);
	Lab.takesString(x);
	if (true) {
		x = novaConstructors.newArray();
		(x || nova_null).add0(novaConstructors.newString2("hey"));
		(x || nova_null).add0(novaConstructors.newString2("its now an array"));
	}
	aaa = Lab.generated40();
	bbb = Lab.generated41();
	((aaa || nova_null).zip1(bbb, (_1, _2) => {
				return (_1 || nova_null).count * _2;
				
	}) || nova_null).forEach1((_1, _2, _3) => {
			NovaConsole.log(novaConstructors.newString2("Got ").plus0(NovaInt.toString((_1)).plus0(novaConstructors.newString2(""))));
			
	});
	NovaConsole.writeLine2(x);
	sq = novaConstructors.newSquare(4);
	NovaConsole.writeLine3(Lab.getArea(sq));
	v1 = novaConstructors.newVector3D1(2, 1, 8);
	v2 = novaConstructors.newVector3D1(5, 3, 2);
	NovaConsole.writeLine1((((v1) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" X ").plus0((((v2) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" = ").plus0((((v1.crossProduct(v2)) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2("")))))));
	matrix1 = novaConstructors.newMatrix1(2, 3);
	((matrix1 || nova_null).get(0) || nova_null).set(0, 1);
	((matrix1 || nova_null).get(0) || nova_null).set(1, 2);
	((matrix1 || nova_null).get(0) || nova_null).set(2, 3);
	((matrix1 || nova_null).get(1) || nova_null).set(0, 4);
	((matrix1 || nova_null).get(1) || nova_null).set(1, 5);
	((matrix1 || nova_null).get(1) || nova_null).set(2, 6);
	matrix2 = novaConstructors.newMatrix1(3, 2);
	((matrix2 || nova_null).get(0) || nova_null).set(0, 7);
	((matrix2 || nova_null).get(0) || nova_null).set(1, 8);
	((matrix2 || nova_null).get(1) || nova_null).set(0, 9);
	((matrix2 || nova_null).get(1) || nova_null).set(1, 10);
	((matrix2 || nova_null).get(2) || nova_null).set(0, 11);
	((matrix2 || nova_null).get(2) || nova_null).set(1, 12);
	NovaConsole.writeLine1(novaConstructors.newString2("Matrix:\n").plus0((((matrix1) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Matrix:\n").plus0((((matrix1.transpose()) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Matrix:\n").plus0((((matrix2) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Matrix:\n").plus0((((matrix1.multiply0(matrix2)) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Matrix:\n").plus0((((matrix1.transpose().plus0(matrix2)) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	matrix3 = novaConstructors.newMatrix1(3, 3);
	((matrix3 || nova_null).get(0) || nova_null).set(0, 6);
	((matrix3 || nova_null).get(0) || nova_null).set(1, 1);
	((matrix3 || nova_null).get(0) || nova_null).set(2, 1);
	((matrix3 || nova_null).get(1) || nova_null).set(0, 4);
	((matrix3 || nova_null).get(1) || nova_null).set(1, -2);
	((matrix3 || nova_null).get(1) || nova_null).set(2, 5);
	((matrix3 || nova_null).get(2) || nova_null).set(0, 2);
	((matrix3 || nova_null).get(2) || nova_null).set(1, 8);
	((matrix3 || nova_null).get(2) || nova_null).set(2, 7);
	NovaConsole.writeLine1(novaConstructors.newString2("Determinant of\n").plus0((((matrix3) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2("\nis ").plus0(NovaDouble.toString((matrix3.determinant())).plus0(novaConstructors.newString2(""))))));
	((Matrix.identity(4) || nova_null).get(0) || nova_null).set(0, 5);
	NovaConsole.writeLine1(novaConstructors.newString2("4x4 Identity:\n").plus0((((Matrix.identity(4)) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("12x12 Identity:\n").plus0((((Matrix.identity(12)) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("8x8 Identity:\n").plus0((((Matrix.identity(8)) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.writeLine1(novaConstructors.newString2("Inverse of 3x3 matrix:\n").plus0((((matrix3.inverse()) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	l = novaConstructors.newLab();
	((l || nova_null).chainable() || nova_null).chainable();
	myImmutableArray = (Lab.generated42() || nova_null).toImmutable();
	NovaConsole.log(novaConstructors.newString2("Immutable: ").plus0((((myImmutableArray) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	outputArray = (myImmutableArray || nova_null).add0(novaConstructors.newString2("four"));
	NovaConsole.log(novaConstructors.newString2("Modified(").plus0(NovaInt.toString((myImmutableArray.accessor_count())).plus0(novaConstructors.newString2("): ").plus0((((myImmutableArray) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))));
	NovaConsole.log(novaConstructors.newString2("Output(").plus0(NovaInt.toString((outputArray.accessor_count())).plus0(novaConstructors.newString2("): ").plus0((((outputArray) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))));
	Lab.loadLibrary();
	NovaConsole.log(novaConstructors.newString2("Main local at end: ").plus0(NovaInt.toString((Lab.local.get())).plus0(novaConstructors.newString2(""))));
	Lab.benchmarkThreadLocals();
	Lab.benchmarkThreadLocals();
	NovaConsole.waitForEnter();
	
};

Lab.loadLibrary = function () {
	
};

Lab.benchmarkThreadLocals = function () {
	var timer;
	timer = novaConstructors.newTimer();
	NovaConsole.write0(novaConstructors.newString2("Running local mutate... "));
	(timer || nova_null).start();
	Lab.setThreadLocalMutate();
	(timer || nova_null).stop();
	NovaConsole.log(novaConstructors.newString2("Took ").plus0(NovaLong.toString((timer.accessor_duration())).plus0(novaConstructors.newString2(""))));
	NovaConsole.write0(novaConstructors.newString2("Running static mutate... "));
	(timer || nova_null).start();
	Lab.setStatic();
	(timer || nova_null).stop();
	NovaConsole.log(novaConstructors.newString2("Took ").plus0(NovaLong.toString((timer.accessor_duration())).plus0(novaConstructors.newString2(""))));
	NovaConsole.write0(novaConstructors.newString2("Running local access... "));
	(timer || nova_null).start();
	Lab.setThreadLocalAccess();
	(timer || nova_null).stop();
	NovaConsole.log(novaConstructors.newString2("Took ").plus0(NovaLong.toString((timer.accessor_duration())).plus0(novaConstructors.newString2(""))));
	
};

Lab.setThreadLocalMutate = function () {
	var i;
	i = 0;
	for (; i < 1000000; i++) {
		(Lab.bench1 || nova_null).set(10);
	}
	
};

Lab.setThreadLocalAccess = function () {
	var i;
	i = 0;
	for (; i < 1000000; i++) {
		var x;
		x = (Lab.bench1 || nova_null).get();
	}
	
};

Lab.setStatic = function () {
	var i;
	i = 0;
	for (; i < 1000000; i++) {
		Lab.bench2 = 10;
	}
	
};

Lab.prototype.chainable = function () {
	NovaConsole.writeLine1(novaConstructors.newString2("in chainable"));
	return this;
	
};

Lab.takesString = function (s) {
	NovaConsole.writeLine1(novaConstructors.newString2("Received ").plus0(((s) || nova_null).plus0(novaConstructors.newString2(""))));
	
};

Lab.doSomething = function (list) {
	var self = this;
	
	((list || nova_null).map0((_1, _2, _3) => {
				return (((_1) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2("!!!"));
				
	}) || nova_null).forEach0(NovaConsole.writeLine);
	
};

Lab.getArea = function (p) {
	return (p || nova_null).calculateArea();
	
};

Lab.init = function () {
	return this;
	
};

Lab.generated33 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("F");
	temp[1] = novaConstructors.newString2("B");
	temp[2] = novaConstructors.newString2("A");
	temp[3] = novaConstructors.newString2("D");
	temp[4] = novaConstructors.newString2("C");
	temp[5] = novaConstructors.newString2("E");
	temp[6] = novaConstructors.newString2("G");
	temp[7] = novaConstructors.newString2("I");
	temp[8] = novaConstructors.newString2("H");
	return novaConstructors.newArray1(temp, 9);
	
};

Lab.generated34 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("F");
	temp[1] = novaConstructors.newString2("B");
	temp[2] = novaConstructors.newString2("A");
	temp[3] = novaConstructors.newString2("D");
	return novaConstructors.newArray1(temp, 4);
	
};

Lab.generated35 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("this");
	temp[1] = novaConstructors.newString2("is");
	temp[2] = novaConstructors.newString2("a");
	temp[3] = novaConstructors.newString2("test");
	temp[4] = novaConstructors.newString2("to");
	temp[5] = novaConstructors.newString2("see");
	temp[6] = novaConstructors.newString2("what shows up");
	return novaConstructors.newArray1(temp, 7);
	
};

Lab.generated36 = function () {
	var temp;
	temp = [];
	temp[0] = 1;
	temp[1] = 2;
	temp[2] = 3;
	temp[3] = 4;
	temp[4] = 5;
	temp[5] = 6;
	temp[6] = 7;
	return novaConstructors.newArray1Byte1(temp, 7);
	
};

Lab.generated37 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("This is a test");
	temp[1] = novaConstructors.newString2("index 2");
	return novaConstructors.newArray1(temp, 2);
	
};

Lab.generated38 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("Second dimension yo");
	temp[1] = novaConstructors.newString2("waddup");
	return novaConstructors.newArray1(temp, 2);
	
};

Lab.generated39 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("test");
	temp[1] = novaConstructors.newString2("test2");
	temp[2] = novaConstructors.newString2("test3");
	return novaConstructors.newArray1(temp, 3);
	
};

Lab.generated40 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("one");
	temp[1] = novaConstructors.newString2("two");
	temp[2] = novaConstructors.newString2("three");
	return novaConstructors.newArray1(temp, 3);
	
};

Lab.generated41 = function () {
	var temp;
	temp = [];
	temp[0] = 1;
	temp[1] = 2;
	temp[2] = 3;
	temp[3] = 4;
	temp[4] = 5;
	return novaConstructors.newArray1Byte1(temp, 5);
	
};

Lab.generated42 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("one");
	temp[1] = novaConstructors.newString2("two");
	temp[2] = novaConstructors.newString2("three");
	return novaConstructors.newArray1(temp, 3);
	
};

Lab.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/Lab"), false);
	
};

Lab.prototype.mutator__js_class = function () {
	
};

Lab.prototype.super = function () {
	
};

novaConstructors.newLab = function () {
	var __value = new Lab()
	NovaObject.call(__value);
	Lab.prototype.super.apply(__value, [].slice.call(arguments));
	return Lab.init.call(__value);
	
};

var MathDemo = function () {
	
	
};

MathDemo.prototype = Object.create(NovaObject.prototype);
MathDemo.prototype.constructor = MathDemo;


MathDemo.prototype.destroy = function () {
	
};

MathDemo.main = function (args) {
	var iterations;
	var timer;
	NovaConsole.writeLine1(novaConstructors.newString2("Beginning benchmark..."));
	iterations = 999999;
	timer = novaConstructors.newTimer().start();
	var i;
	i = 0;
	for (; i < iterations; i++) {
		try {
			NovaMath.sin(i);
		} catch (e)  {
			if (!(e instanceof Exception)) {
				console.log(0.32970374472225394);
				console.error(e);
				process.exit(1);
			} else {
			}
		 }
		finally {
		}
	}
	Timer.stop();
	NovaConsole.writeLine1(NovaInt.toString(iterations).plus0(novaConstructors.newString2(" iterations of Math.sin() in ").plus0(NovaLong.toString((timer || nova_null).accessor_duration()).plus0(novaConstructors.newString2("ms")))));
	NovaConsole.waitForEnter();
	
};

MathDemo.init = function () {
	return this;
	
};

MathDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/MathDemo"), false);
	
};

MathDemo.prototype.mutator__js_class = function () {
	
};

MathDemo.prototype.super = function () {
	
};

novaConstructors.newMathDemo = function () {
	var __value = new MathDemo()
	NovaObject.call(__value);
	MathDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return MathDemo.init.call(__value);
	
};

var TestRunner = function () {
	this.testCases = null;
	this._js_class = null;
	
	
};

TestRunner.prototype.constructor = TestRunner;


TestRunner.prototype.runTests = function (onResult, out) {
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	
};

TestRunner.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/TestRunner"), false);
	
};

TestRunner.prototype.mutator__js_class = function () {
	
};

TestRunner.prototype.accessor_model = function () {
	return null;
	
};

TestRunner.prototype.mutator_model = function () {
	
};

TestRunner.prototype.accessor_testCases = function () {
	return (this.accessor_model() || nova_null).accessor_testCases();
	
};

TestRunner.prototype.mutator_testCases = function () {
	
};

TestRunner.prototype.accessor_description = function () {
	return (this.accessor_model() || nova_null).description;
	
};

TestRunner.prototype.mutator_description = function () {
	
};

var NestTest = function () {
	
	
};

NestTest.prototype = Object.create(NovaObject.prototype);
NestTest.prototype.constructor = NestTest;


NestTest.prototype.destroy = function () {
	
};

NestTest.main = function (args) {
	var test;
	test = novaConstructors.newNestTest();
	(test || nova_null).runTests();
	NovaConsole.waitForEnter();
	
};

NestTest.prototype.testPrimitiveComparison = function (out) {
	var x;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing primitive comparison "));
	x = 5;
	(Nest.expect4(x) || nova_null).toBe(5);
	
};

NestTest.prototype.testPrimitiveNotComparison = function (out) {
	var x;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing primitive not comparison "));
	x = 5;
	(Nest.expect5(x) || nova_null).toNotBe(6);
	
};

NestTest.prototype.testNoMessageGiven = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing testNoMessageGiven "));
	
};

NestTest.prototype.beforeTest = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	NovaConsole.log(novaConstructors.newString2("-- Before test --"));
	
};

NestTest.prototype.afterTest = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	NovaConsole.log(novaConstructors.newString2("-- After test --"));
	
};

NestTest.prototype.beforeClass = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	NovaConsole.log(novaConstructors.newString2("-- Before test class --"));
	
};

NestTest.prototype.afterClass = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	NovaConsole.log(novaConstructors.newString2("-- After test class --"));
	
};

NestTest.prototype.runTests = function (onResult, out) {
	var testPrimitiveComparisonTimer;
	var testPrimitiveNotComparisonTimer;
	var testNoMessageGivenTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing NestTest"));
	this.beforeClass(out);
	this.beforeTest(out);
	testPrimitiveComparisonTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testPrimitiveComparison(out);
		(testPrimitiveComparisonTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testPrimitiveComparisonTimer, NestTest._testPrimitiveComparisonTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.23731466490051234);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testPrimitiveComparisonTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testPrimitiveComparisonTimer, NestTest._testPrimitiveComparisonTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	this.afterTest(out);
	this.beforeTest(out);
	testPrimitiveNotComparisonTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testPrimitiveNotComparison(out);
		(testPrimitiveNotComparisonTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testPrimitiveNotComparisonTimer, NestTest._testPrimitiveNotComparisonTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.38989277115783616);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testPrimitiveNotComparisonTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testPrimitiveNotComparisonTimer, NestTest._testPrimitiveNotComparisonTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	this.afterTest(out);
	this.beforeTest(out);
	testNoMessageGivenTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testNoMessageGiven(out);
		(testNoMessageGivenTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testNoMessageGivenTimer, NestTest._testNoMessageGivenTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.5711335983342292);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testNoMessageGivenTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testNoMessageGivenTimer, NestTest._testNoMessageGivenTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	this.afterTest(out);
	this.afterClass(out);
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

NestTest.init = function () {
	return this;
	
};

NestTest.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/NestTest"), false);
	
};

NestTest.prototype.mutator__js_class = function () {
	
};

NestTest.prototype.super = function () {
	
};

novaConstructors.newNestTest = function () {
	var __value = new NestTest()
	NovaObject.call(__value);
	NestTest.prototype.super.apply(__value, [].slice.call(arguments));
	return NestTest.init.call(__value);
	
};

var Exception = function () {
	this.stackTrace = null;
	this.message = null;
	
	
};

Exception.prototype = Object.create(NovaObject.prototype);
Exception.prototype.constructor = Exception;


Exception.prototype.destroy = function () {
	
};

Exception.init = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("") : message;
	this.message = message;
	return this;
	
};

Exception.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).accessor_name() || nova_null).plus0(((this.message) != null ? novaConstructors.newString2(": ").plus0(((this.message) || nova_null).plus0(novaConstructors.newString2(""))) : novaConstructors.newString2("")));
	
};

Exception.prototype.onThrown = function (soft) {
	
};

Exception.catchType = function (func, exceptionType, soft, exact) {
	soft = typeof soft === 'undefined' ? false : soft;
	exact = typeof exact === 'undefined' ? false : exact;
	if (soft) {
		try {
			func();
		} catch (e)  {
			if (!(e instanceof Exception)) {
				console.log(0.7297538222129987);
				console.error(e);
				process.exit(1);
			} else {
				if ((((e || nova_null).accessor__js_class() || nova_null).location || nova_null).equals0((exceptionType || nova_null).location)) {
					return true;
				}
			}
		 }
		finally {
		}
	} else {
		try {
			func();
		} catch (e)  {
			if (!(e instanceof Exception)) {
				console.log(0.48194926699891605);
				console.error(e);
				process.exit(1);
			} else {
				if ((((e || nova_null).accessor__js_class() || nova_null).location || nova_null).equals0((exceptionType || nova_null).location)) {
					return true;
				}
			}
		 }
		finally {
		}
	}
	return false;
	
};

Exception.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/exception/Exception"), false);
	
};

Exception.prototype.mutator__js_class = function () {
	
};

Exception.prototype.super = function () {
	this.stackTrace = novaConstructors.newStackTrace();
	
};

novaConstructors.newException = function (message) {
	var __value = new Exception()
	NovaObject.call(__value);
	Exception.prototype.super.apply(__value, [].slice.call(arguments));
	return Exception.init.call(__value, message);
	
};

var NonWholeDivisionException = function () {
	
	
};

NonWholeDivisionException.prototype = Object.create(Exception.prototype);
NonWholeDivisionException.prototype.constructor = NonWholeDivisionException;


NonWholeDivisionException.prototype.destroy = function () {
	
};

NonWholeDivisionException.init = function () {
	return this;
	
};

NonWholeDivisionException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/NonWholeDivisionException"), false);
	
};

NonWholeDivisionException.prototype.mutator__js_class = function () {
	
};

NonWholeDivisionException.prototype.super = function () {
	
};

novaConstructors.newNonWholeDivisionException = function () {
	var __value = new NonWholeDivisionException()
	Exception.call(__value);
	NonWholeDivisionException.prototype.super.apply(__value, [].slice.call(arguments));
	return NonWholeDivisionException.init.call(__value);
	
};

var Polygon = function () {
	
	
};

Polygon.prototype.constructor = Polygon;


Polygon.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/Polygon"), false);
	
};

Polygon.prototype.mutator__js_class = function () {
	
};

var PolymorphismDemo = function () {
	
	
};

PolymorphismDemo.prototype = Object.create(NovaObject.prototype);
PolymorphismDemo.prototype.constructor = PolymorphismDemo;


PolymorphismDemo.prototype.destroy = function () {
	
};

PolymorphismDemo.main = function (args) {
	var animals;
	var dog;
	var spider;
	var description;
	animals = novaConstructors.newArray0(2);
	dog = novaConstructors.newDog();
	spider = novaConstructors.newSpider();
	(animals || nova_null).set0(0, dog);
	(animals || nova_null).set0(1, spider);
	description = PolymorphismDemo.getDescriptionOfAnimalWithNumberOfLegs(animals, 8);
	NovaConsole.writeLine1(novaConstructors.newString2("Searched for animal with 8 legs and found: ").plus0(((description) || nova_null).plus0(novaConstructors.newString2(""))));
	NovaConsole.waitForEnter();
	
};

PolymorphismDemo.getDescriptionOfAnimalWithNumberOfLegs = function (animals, numLegs) {
	var i;
	i = 0;
	for (; i < 2; i++) {
		if (((animals || nova_null).data[i] || nova_null).getNumLegs() === numLegs) {
			return ((animals || nova_null).data[i] || nova_null).getDescription();
		}
	}
	return novaConstructors.newString2("Could not find animal with ").plus0(NovaInt.toString((numLegs)).plus0(novaConstructors.newString2(" legs")));
	
};

PolymorphismDemo.init = function () {
	return this;
	
};

PolymorphismDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/PolymorphismDemo"), false);
	
};

PolymorphismDemo.prototype.mutator__js_class = function () {
	
};

PolymorphismDemo.prototype.super = function () {
	
};

novaConstructors.newPolymorphismDemo = function () {
	var __value = new PolymorphismDemo()
	NovaObject.call(__value);
	PolymorphismDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return PolymorphismDemo.init.call(__value);
	
};

var QueueDemo = function () {
	
	
};

QueueDemo.prototype = Object.create(NovaObject.prototype);
QueueDemo.prototype.constructor = QueueDemo;


QueueDemo.prototype.destroy = function () {
	
};

QueueDemo.main = function (args) {
	NovaConsole.waitForEnter();
	
};

QueueDemo.init = function () {
	return this;
	
};

QueueDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/QueueDemo"), false);
	
};

QueueDemo.prototype.mutator__js_class = function () {
	
};

QueueDemo.prototype.super = function () {
	
};

novaConstructors.newQueueDemo = function () {
	var __value = new QueueDemo()
	NovaObject.call(__value);
	QueueDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return QueueDemo.init.call(__value);
	
};

var Spider = function () {
	
	
};

Spider.prototype = Object.create(Animal.prototype);
Spider.prototype.constructor = Spider;


Spider.prototype.destroy = function () {
	
};

Spider.prototype.getNumLegs = function () {
	return 8;
	
};

Spider.prototype.getNumEyes = function () {
	return 9000;
	
};

Spider.prototype.getDescription = function () {
	return novaConstructors.newString2("A disgusting thing (Spider)");
	
};

Spider.init = function () {
	return this;
	
};

Spider.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/Spider"), false);
	
};

Spider.prototype.mutator__js_class = function () {
	
};

Spider.prototype.super = function () {
	
};

novaConstructors.newSpider = function () {
	var __value = new Spider()
	Animal.call(__value);
	Spider.prototype.super.apply(__value, [].slice.call(arguments));
	return Spider.init.call(__value);
	
};

var Square = function () {
	this.sideLength = 0;
	
	
};

Square.prototype = Object.create(NovaObject.prototype);
Square.prototype.constructor = Square;


Square.prototype.destroy = function () {
	
};

Square.init = function (sideLength) {
	this.sideLength = sideLength;
	return this;
	
};

Square.prototype.numberSides = function () {
	return 4;
	
};

Square.prototype.calculateArea = function () {
	return this.sideLength * this.sideLength;
	
};

Square.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/Square"), false);
	
};

Square.prototype.mutator__js_class = function () {
	
};

Square.prototype.super = function () {
	
};

novaConstructors.newSquare = function (sideLength) {
	var __value = new Square()
	NovaObject.call(__value);
	Square.prototype.super.apply(__value, [].slice.call(arguments));
	return Square.init.call(__value, sideLength);
	
};

var SvgChart = function () {
	
	
};

SvgChart.prototype = Object.create(NovaObject.prototype);
SvgChart.prototype.constructor = SvgChart;


SvgChart.prototype.destroy = function () {
	
};

SvgChart.main = function (args) {
	var timer;
	var selection;
	timer = novaConstructors.newTimer().start();
	selection = No3.select(novaConstructors.newString2("body"));
	NovaConsole.writeLine1((selection || nova_null).toJs());
	(timer || nova_null).stop();
	NovaConsole.write0(novaConstructors.newString2("Done generating ").plus0(NovaLong.toString((timer || nova_null).accessor_duration())));
	NovaConsole.waitForEnter();
	
};

SvgChart.init = function () {
	return this;
	
};

SvgChart.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/SvgChart"), false);
	
};

SvgChart.prototype.mutator__js_class = function () {
	
};

SvgChart.prototype.super = function () {
	
};

novaConstructors.newSvgChart = function () {
	var __value = new SvgChart()
	NovaObject.call(__value);
	SvgChart.prototype.super.apply(__value, [].slice.call(arguments));
	return SvgChart.init.call(__value);
	
};

var SvgFractal = function () {
	
	
};

SvgFractal.prototype = Object.create(NovaObject.prototype);
SvgFractal.prototype.constructor = SvgFractal;


SvgFractal.prototype.destroy = function () {
	
};

SvgFractal.main = function (args) {
	var s;
	var pi2;
	var numVerts;
	var coefficient;
	var numPoints;
	var timer;
	var points;
	var radius;
	var offset;
	var cx;
	var cy;
	var f;
	var writer;
	s = novaConstructors.newSvg();
	pi2 = NovaMath.PI * 2;
	NovaConsole.write0(novaConstructors.newString2("Enter the number of vertices: "));
	numVerts = NovaConsole.readInt();
	NovaConsole.write0(novaConstructors.newString2("Enter the coefficient: "));
	coefficient = NovaConsole.readDouble();
	NovaConsole.write0(novaConstructors.newString2("Enter the number of points: "));
	numPoints = NovaConsole.readInt();
	timer = novaConstructors.newTimer().start();
	points = novaConstructors.newArray1Double0(numVerts * 2);
	radius = 450;
	offset = /*Double*//*Byte*/pi2 / 12;
	var i;
	i = 0;
	for (; i < numVerts; i++) {
		var rad;
		rad = pi2 * (/*Int*//*Float*/i / (numVerts * 1.0)) + offset;
		(points || nova_null).set(i * 2 + 0, radius * NovaMath.cos(rad) + radius + 10);
		(points || nova_null).set(i * 2 + 1, radius * NovaMath.sin(rad) + radius + 10);
	}
	var n;
	n = 0;
	for (; n < numVerts; n++) {
		var x;
		var y;
		var circle2;
		x = (points || nova_null).get(n * 2 + 0);
		y = (points || nova_null).get(n * 2 + 1);
		circle2 = novaConstructors.newSvgCircle(x, y, 3);
		(((s || nova_null).root || nova_null).children || nova_null).addChild(circle2);
	}
	cx = radius + 10;
	cy = radius + 10;
	var p;
	p = 0;
	for (; p < numPoints; p++) {
		var rand;
		var x;
		var y;
		rand = NovaMath.random1(numVerts);
		x = (points || nova_null).get(rand * 2 + 0);
		y = (points || nova_null).get(rand * 2 + 1);
		cx = cx - (cx - x) * coefficient;
		cy = cy - (cy - y) * coefficient;
		if (p > 15) {
			var circle;
			if (/*Int*//*Bool*/(p + 1) % 1000 === 0) {
				NovaConsole.writeLine6(p + 1);
			}
			circle = novaConstructors.newSvgCircle(cx, cy, 1);
			(((s || nova_null).root || nova_null).children || nova_null).addChild(circle);
		}
	}
	f = novaConstructors.newFile1(novaConstructors.newString2("C:/Users/Braden/svgoutput.html"));
	writer = novaConstructors.newFileWriter0(f);
	(writer || nova_null).create();
	(writer || nova_null).clearContents();
	(s || nova_null).generateHTMLOutput(writer);
	(writer || nova_null).close();
	(timer || nova_null).stop();
	NovaConsole.write0(novaConstructors.newString2("Done generating ").plus0(NovaLong.toString((timer.accessor_duration())).plus0(novaConstructors.newString2(""))));
	NovaConsole.waitForEnter();
	
};

SvgFractal.init = function () {
	return this;
	
};

SvgFractal.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/SvgFractal"), false);
	
};

SvgFractal.prototype.mutator__js_class = function () {
	
};

SvgFractal.prototype.super = function () {
	
};

novaConstructors.newSvgFractal = function () {
	var __value = new SvgFractal()
	NovaObject.call(__value);
	SvgFractal.prototype.super.apply(__value, [].slice.call(arguments));
	return SvgFractal.init.call(__value);
	
};

var T1 = function () {
	
	
};

T1.prototype = Object.create(NovaObject.prototype);
T1.prototype.constructor = T1;


T1.prototype.destroy = function () {
	
};

T1.init = function () {
	return this;
	
};

T1.accessor_ind = function () {
	return 1;
	
};

T1.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/T1"), false);
	
};

T1.prototype.mutator__js_class = function () {
	
};

T1.prototype.super = function () {
	
};

novaConstructors.newT1 = function () {
	var __value = new T1()
	NovaObject.call(__value);
	T1.prototype.super.apply(__value, [].slice.call(arguments));
	return T1.init.call(__value);
	
};

var T2 = function () {
	
	
};

T2.prototype = Object.create(T1.prototype);
T2.prototype.constructor = T2;


T2.prototype.destroy = function () {
	
};

T2.init = function () {
	return this;
	
};

T2.accessor_ind = function () {
	return 2;
	
};

T2.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/T2"), false);
	
};

T2.prototype.mutator__js_class = function () {
	
};

T2.prototype.super = function () {
	
};

novaConstructors.newT2 = function () {
	var __value = new T2()
	T1.call(__value);
	T2.prototype.super.apply(__value, [].slice.call(arguments));
	return T2.init.call(__value);
	
};

var Test = function () {
	
	
};

Test.prototype = Object.create(NovaObject.prototype);
Test.prototype.constructor = Test;


Test.prototype.destroy = function () {
	
};

Test.main = function (args) {
	var s;
	var d;
	s = novaConstructors.newStack();
	(s || nova_null).push(novaConstructors.newString2("How are you?"));
	(s || nova_null).push(novaConstructors.newString2("Larry"));
	(s || nova_null).push(novaConstructors.newString2("Hello"));
	while (!(s || nova_null).accessor_isEmpty()) {
		NovaConsole.writeLine1((s || nova_null).pop());
	}
	d = 5;
	NovaConsole.writeLine1(novaConstructors.newString2("Comparison: ").plus0(NovaLong.toString(NovaInt.compareTo1(d, 3))));
	NovaConsole.waitForEnter();
	
};

Test.init = function () {
	return this;
	
};

Test.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/Test"), false);
	
};

Test.prototype.mutator__js_class = function () {
	
};

Test.prototype.super = function () {
	
};

novaConstructors.newTest = function () {
	var __value = new Test()
	NovaObject.call(__value);
	Test.prototype.super.apply(__value, [].slice.call(arguments));
	return Test.init.call(__value);
	
};

var ThreadDemo = function () {
	
	
};

ThreadDemo.prototype = Object.create(NovaObject.prototype);
ThreadDemo.prototype.constructor = ThreadDemo;


ThreadDemo.prototype.destroy = function () {
	
};

ThreadDemo.main = function (args) {
	var c;
	c = 'y';
	while (c === 'y' || c === 'Y') {
		var thread;
		var thread2;
		var timer;
		thread = novaConstructors.newThreadDemoImplementation(100, novaConstructors.newString2("Thread1"));
		thread2 = novaConstructors.newThreadDemoImplementation(100, novaConstructors.newString2("Thread2"));
		timer = novaConstructors.newTimer().start();
		(thread || nova_null).start();
		(thread2 || nova_null).start();
		(thread || nova_null).join();
		(thread2 || nova_null).join();
		(timer || nova_null).stop();
		NovaConsole.writeLine1(novaConstructors.newString2("Time taken: ").plus0(NovaLong.toString((timer || nova_null).accessor_duration()).plus0(novaConstructors.newString2("ms"))));
		NovaConsole.write0(novaConstructors.newString2("Run again? (Y/N) "));
		c = NovaConsole.readChar();
	}
	NovaConsole.writeLine1(novaConstructors.newString2("\nFinished"));
	NovaConsole.waitForEnter();
	
};

ThreadDemo.init = function () {
	return this;
	
};

ThreadDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/ThreadDemo"), false);
	
};

ThreadDemo.prototype.mutator__js_class = function () {
	
};

ThreadDemo.prototype.super = function () {
	
};

novaConstructors.newThreadDemo = function () {
	var __value = new ThreadDemo()
	NovaObject.call(__value);
	ThreadDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return ThreadDemo.init.call(__value);
	
};

var Thread = function () {
	this.handle = null;
	this.action = null;
	this.useAction = 0;
	this.active = 0;
	
	
};

Thread.prototype = Object.create(NovaObject.prototype);
Thread.prototype.constructor = Thread;


Thread.prototype.destroy = function () {
	
};

Thread.init = function () {
	return this;
	
};

Thread.init0 = function (action) {
	this.action = action;
	this.useAction = true;
	return this;
	
};

Thread.prototype.start = function () {
	this.handle = create_thread(this, (function (context) { return function () { var self = context; return self.startRun.call(self); } })(this));
	return this;
	
};

Thread.prototype.join = function () {
	lib_nova_thread_join(this.handle);
	
};

Thread.prototype.kill = function () {
	lib_nova_thread_cancel(this.handle);
	
};

Thread.sleep = function (millis) {
	console.warn("No sleep available in JS");
	
};

Thread.lock = function () {
	
};

Thread.unlock = function () {
	
};

Thread.sync = function (action) {
	Thread.lock();
	action();
	Thread.unlock();
	
};

Thread.prototype.run = function () {
	
};

Thread.prototype.startRun = function () {
	var self = this;
	
	this.active = true;
	Thread.sync(() => {
			self.ACTIVE_THREADS = (self.ACTIVE_THREADS || nova_null).add0(this);
			
	});
	try {
		if (this.useAction) {
			action();
		} else {
			this.run();
		}
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.6528086912311714);
			console.error(e);
			process.exit(1);
		} else {
			var message;
			message = ((e.accessor__js_class().location) || nova_null).plus0(novaConstructors.newString2(" in Thread ").plus0(NovaLong.toString((Thread.accessor_id())).plus0(novaConstructors.newString2(""))));
			if ((e.message) != null) {
				message = (message || nova_null).concat(novaConstructors.newString2(": ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2(""))));
			}
			NovaConsole.log(message);
			NovaConsole.waitForEnter();
		}
	 }
	finally {
	}
	this.active = false;
	Thread.sync(() => {
			self.ACTIVE_THREADS = (self.ACTIVE_THREADS || nova_null).remove0(this);
			
	});
	
};

Thread.accessor_id = function () {
	
};

Thread.prototype.mutator_id = function () {
	
};

Thread.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/thread/Thread"), false);
	
};

Thread.prototype.mutator__js_class = function () {
	
};

Thread.prototype.super = function () {
	this.useAction = false;
	
};

novaConstructors.newThread = function () {
	var __value = new Thread()
	NovaObject.call(__value);
	Thread.prototype.super.apply(__value, [].slice.call(arguments));
	return Thread.init.call(__value);
	
};

novaConstructors.newThread0 = function (action) {
	var __value = new Thread()
	NovaObject.call(__value);
	Thread.prototype.super.apply(__value, [].slice.call(arguments));
	return Thread.init0.call(__value, action);
	
};

var ThreadDemoImplementation = function () {
	this.millis = 0;
	this.word = null;
	
	
};

ThreadDemoImplementation.prototype = Object.create(Thread.prototype);
ThreadDemoImplementation.prototype.constructor = ThreadDemoImplementation;


ThreadDemoImplementation.prototype.destroy = function () {
	
};

ThreadDemoImplementation.init = function (millis, word) {
	this.millis = millis;
	this.word = word;
	return this;
	
};

ThreadDemoImplementation.prototype.run = function () {
	var i;
	i = 0;
	for (; i < 10; i++) {
		NovaConsole.writeLine1(this.word);
		Thread.sleep(this.millis);
	}
	
};

ThreadDemoImplementation.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/ThreadDemoImplementation"), false);
	
};

ThreadDemoImplementation.prototype.mutator__js_class = function () {
	
};

ThreadDemoImplementation.prototype.super = function () {
	
};

novaConstructors.newThreadDemoImplementation = function (millis, word) {
	var __value = new ThreadDemoImplementation()
	Thread.call(__value);
	ThreadDemoImplementation.prototype.super.apply(__value, [].slice.call(arguments));
	return ThreadDemoImplementation.init.call(__value, millis, word);
	
};

var Ackermann = function () {
	
	
};

Ackermann.prototype = Object.create(NovaObject.prototype);
Ackermann.prototype.constructor = Ackermann;


Ackermann.prototype.destroy = function () {
	
};

Ackermann.main = function (args) {
	NovaConsole.writeLine1(novaConstructors.newString2("Ackermann: ").plus0(NovaInt.toString(Ackermann.run(4, 1))));
	NovaConsole.waitForEnter();
	
};

Ackermann.run = function (m, n) {
	if (m === 0) {
		return n + 1;
	} else if (m > 0) {
	}
	return 0;
	
};

Ackermann.run2 = function (m, n) {
	if (m === 0) {
		return n + 1;
	} else if (m > 0) {
	}
	return 0;
	
};

Ackermann.init = function () {
	return this;
	
};

Ackermann.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/ackermann/Ackermann"), false);
	
};

Ackermann.prototype.mutator__js_class = function () {
	
};

Ackermann.prototype.super = function () {
	
};

novaConstructors.newAckermann = function () {
	var __value = new Ackermann()
	NovaObject.call(__value);
	Ackermann.prototype.super.apply(__value, [].slice.call(arguments));
	return Ackermann.init.call(__value);
	
};

var Dog = function () {
	
	
};

Dog.prototype = Object.create(NovaObject.prototype);
Dog.prototype.constructor = Dog;


Dog.prototype.destroy = function () {
	
};

Dog.init = function (a, b) {
	NovaConsole.writeLine1(NovaInt.toString(a).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString(b))));
	return this;
	
};

Dog.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/copy/Dog"), false);
	
};

Dog.prototype.mutator__js_class = function () {
	
};

Dog.prototype.super = function () {
	
};

novaConstructors.newDog = function (a, b) {
	var __value = new Dog()
	NovaObject.call(__value);
	Dog.prototype.super.apply(__value, [].slice.call(arguments));
	return Dog.init.call(__value, a, b);
	
};

var DatabaseDemo = function () {
	
	
};

DatabaseDemo.prototype = Object.create(NovaObject.prototype);
DatabaseDemo.prototype.constructor = DatabaseDemo;


DatabaseDemo.prototype.destroy = function () {
	
};

DatabaseDemo.main = function (args) {
	var connection;
	var result;
	var id;
	connection = DatabaseDemo.connect();
	result = (connection || nova_null).query(novaConstructors.newString2("select * from market"));
	var row;
	row = 0;
	for (; row < (result || nova_null).accessor_numRows(); row++) {
		NovaConsole.write0(novaConstructors.newString2("Found (").plus0(NovaInt.toString((row)).plus0(novaConstructors.newString2("): ").plus0((((result.rows.get(row).get(0)) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))));
		var col;
		col = 1;
		for (; col < (result || nova_null).numCols; col++) {
			NovaConsole.write0(novaConstructors.newString2(", ").plus0(((((result || nova_null).rows || nova_null).get(row) || nova_null).get(col) || nova_null).toString()));
		}
		NovaConsole.writeLine1(novaConstructors.newString2(""));
	}
	id = NovaInt.parseInt((((result || nova_null).rows || nova_null).get((result || nova_null).accessor_numRows() - 1) || nova_null).get(0)) + 1;
	(connection || nova_null).query(novaConstructors.newString2("insert into market values(").plus0(NovaInt.toString((id)).plus0(novaConstructors.newString2(", 6, 634, 3);"))));
	DatabaseDemo.close(connection);
	NovaConsole.waitForEnter();
	
};

DatabaseDemo.connect = function () {
	var connection;
	var error;
	NovaConsole.writeLine1(novaConstructors.newString2("Connecting..."));
	connection = novaConstructors.newDBConnector();
	(connection || nova_null).connect1(novaConstructors.newString2("localhost"), novaConstructors.newString2("root"), novaConstructors.newString2("server"), novaConstructors.newString2("test"));
	error = (connection || nova_null).error;
	if ((error || nova_null).count > 0) {
		NovaConsole.writeLine1(novaConstructors.newString2("Error: ").plus0(error));
	} else {
		NovaConsole.writeLine1(novaConstructors.newString2("Connected."));
	}
	return connection;
	
};

DatabaseDemo.close = function (connection) {
	NovaConsole.writeLine1(novaConstructors.newString2("Closing..."));
	(connection || nova_null).close();
	NovaConsole.writeLine1(novaConstructors.newString2("Closed"));
	
};

DatabaseDemo.init = function () {
	return this;
	
};

DatabaseDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/database/DatabaseDemo"), false);
	
};

DatabaseDemo.prototype.mutator__js_class = function () {
	
};

DatabaseDemo.prototype.super = function () {
	
};

novaConstructors.newDatabaseDemo = function () {
	var __value = new DatabaseDemo()
	NovaObject.call(__value);
	DatabaseDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return DatabaseDemo.init.call(__value);
	
};

var ClientDemo = function () {
	
	
};

ClientDemo.prototype = Object.create(NovaObject.prototype);
ClientDemo.prototype.constructor = ClientDemo;


ClientDemo.prototype.destroy = function () {
	
};

ClientDemo.main = function (args) {
	var socket;
	var ip;
	var port;
	var connected;
	socket = novaConstructors.newClientSocket();
	ip = novaConstructors.newString2("127.0.0.1");
	port = 5675;
	NovaConsole.writeLine1(novaConstructors.newString2("Attempting to connect to ").plus0((ip || nova_null).plus0(novaConstructors.newString2(":").plus0(NovaInt.toString(port)))));
	connected = (socket || nova_null).connect(ip, port);
	if (connected) {
		var thread;
		thread = novaConstructors.newConnectionThread((socket || nova_null).connection);
		(thread || nova_null).start();
		NovaConsole.writeLine1(novaConstructors.newString2("Connected!"));
		while (((socket || nova_null).connection || nova_null).connected) {
			var message;
			message = NovaConsole.readLine();
			if ((message || nova_null).equals0(novaConstructors.newString2("q"))) {
				(socket || nova_null).close();
				break;
			}
			(((socket || nova_null).connection || nova_null).out || nova_null).write(message);
		}
		(socket || nova_null).close();
	} else {
		NovaConsole.writeLine1(novaConstructors.newString2("Failed to connect"));
		NovaConsole.waitForEnter();
	}
	
};

ClientDemo.init = function () {
	return this;
	
};

ClientDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/network/ClientDemo"), false);
	
};

ClientDemo.prototype.mutator__js_class = function () {
	
};

ClientDemo.prototype.super = function () {
	
};

novaConstructors.newClientDemo = function () {
	var __value = new ClientDemo()
	NovaObject.call(__value);
	ClientDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return ClientDemo.init.call(__value);
	
};

var ConnectionThread = function () {
	this.socket = null;
	
	
};

ConnectionThread.prototype = Object.create(Thread.prototype);
ConnectionThread.prototype.constructor = ConnectionThread;


ConnectionThread.prototype.destroy = function () {
	
};

ConnectionThread.init = function (socket) {
	this.socket = socket;
	return this;
	
};

ConnectionThread.prototype.run = function () {
	while (true) {
		var message;
		if (!(this.socket || nova_null).validateConnection()) {
			NovaConsole.writeLine1(novaConstructors.newString2("Disconnected."));
			break;
		}
		message = ((this.socket || nova_null).in || nova_null).readString();
		NovaConsole.writeLine1(novaConstructors.newString2("HE SAYS: ").plus0(message));
	}
	
};

ConnectionThread.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/network/ConnectionThread"), false);
	
};

ConnectionThread.prototype.mutator__js_class = function () {
	
};

ConnectionThread.prototype.super = function () {
	
};

novaConstructors.newConnectionThread = function (socket) {
	var __value = new ConnectionThread()
	Thread.call(__value);
	ConnectionThread.prototype.super.apply(__value, [].slice.call(arguments));
	return ConnectionThread.init.call(__value, socket);
	
};

var OutputThread = function () {
	this.serverSocket = null;
	this.socket = null;
	
	
};

OutputThread.prototype = Object.create(Thread.prototype);
OutputThread.prototype.constructor = OutputThread;


OutputThread.prototype.destroy = function () {
	
};

OutputThread.init = function (serverSocket, socket) {
	this.serverSocket = serverSocket;
	this.socket = socket;
	return this;
	
};

OutputThread.prototype.run = function () {
	while ((this.socket || nova_null).connected) {
		var message;
		message = NovaConsole.readLine();
		if ((message || nova_null).equals0(novaConstructors.newString2("q"))) {
			(this.serverSocket || nova_null).close();
			break;
		}
		if (!(this.socket || nova_null).connected) {
			break;
		}
		((this.socket || nova_null).out || nova_null).write(message);
	}
	
};

OutputThread.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/network/OutputThread"), false);
	
};

OutputThread.prototype.mutator__js_class = function () {
	
};

OutputThread.prototype.super = function () {
	
};

novaConstructors.newOutputThread = function (serverSocket, socket) {
	var __value = new OutputThread()
	Thread.call(__value);
	OutputThread.prototype.super.apply(__value, [].slice.call(arguments));
	return OutputThread.init.call(__value, serverSocket, socket);
	
};

var ServerDemo = function () {
	
	
};

ServerDemo.prototype = Object.create(NovaObject.prototype);
ServerDemo.prototype.constructor = ServerDemo;


ServerDemo.prototype.destroy = function () {
	
};

ServerDemo.main = function (args) {
	var connections;
	var socket;
	var port;
	connections = novaConstructors.newArray();
	socket = novaConstructors.newServerSocket();
	port = 25560;
	if ((socket.start(port)) === null) {
		NovaConsole.writeLine1(novaConstructors.newString2("Failed to start server"));
	} else {
		var request;
		NovaConsole.writeLine1(novaConstructors.newString2("Started server on port ").plus0(NovaInt.toString(port)));
		NovaConsole.writeLine1(novaConstructors.newString2("Waiting on client..."));
		request = (socket || nova_null).acceptClient();
		if ((request) === null) {
			NovaConsole.writeLine1(novaConstructors.newString2("Failed to accept client"));
		}
		while ((request) != null) {
			var thread;
			var othread;
			(connections || nova_null).add0(request);
			thread = novaConstructors.newConnectionThread(request);
			(thread || nova_null).start();
			othread = novaConstructors.newOutputThread(socket, request);
			(othread || nova_null).start();
			NovaConsole.writeLine1(novaConstructors.newString2("Waiting on another"));
			request = (socket || nova_null).acceptClient();
		}
		NovaConsole.writeLine1(novaConstructors.newString2("Exiting"));
	}
	NovaConsole.waitForEnter();
	
};

ServerDemo.init = function () {
	return this;
	
};

ServerDemo.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("example/network/ServerDemo"), false);
	
};

ServerDemo.prototype.mutator__js_class = function () {
	
};

ServerDemo.prototype.super = function () {
	
};

novaConstructors.newServerDemo = function () {
	var __value = new ServerDemo()
	NovaObject.call(__value);
	ServerDemo.prototype.super.apply(__value, [].slice.call(arguments));
	return ServerDemo.init.call(__value);
	
};

var AssignmentStability = function () {
	this._js_class = null;
	
	
};

AssignmentStability.prototype = Object.create(NovaObject.prototype);
AssignmentStability.prototype.constructor = AssignmentStability;


AssignmentStability.prototype.destroy = function () {
	
};

AssignmentStability.prototype.testEmbeddedPropertyAssignments = function (out) {
	var props;
	var num;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing embedded property assignments "));
	props = novaConstructors.newClassWithProperties();
	num = (props || nova_null).mutator_prop1((props || nova_null).mutator_prop2(1));
	(Nest.expect6(num === 1 && (props || nova_null).accessor_prop1() === 1 && (props || nova_null).accessor_prop2() === 1) || nova_null).toBe(true, novaConstructors.newString2("Did not return mutated property value correctly. Expected 1, 1, 1 but received ").plus0(NovaInt.toString((num)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((props.accessor_prop1())).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((props.accessor_prop2())).plus0(novaConstructors.newString2(""))))))));
	
};

AssignmentStability.prototype.testEmbeddedPrimitiveAssignments = function (out) {
	var a;
	var b;
	var c;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing embedded primitive assignments "));
	a = b = c = 1;
	(Nest.expect7(a === 1 && b === 1 && c === 1) || nova_null).toBe(true, novaConstructors.newString2("Did not set assigned primitive values correctly. Expected 1, 1, 1 but received ").plus0(NovaInt.toString((a)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((b)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((c)).plus0(novaConstructors.newString2(""))))))));
	
};

AssignmentStability.prototype.runTests = function (onResult, out) {
	var testEmbeddedPropertyAssignmentsTimer;
	var testEmbeddedPrimitiveAssignmentsTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing AssignmentStability"));
	testEmbeddedPropertyAssignmentsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testEmbeddedPropertyAssignments(out);
		(testEmbeddedPropertyAssignmentsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testEmbeddedPropertyAssignmentsTimer, AssignmentStability._testEmbeddedPropertyAssignmentsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.059129871685073665);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testEmbeddedPropertyAssignmentsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testEmbeddedPropertyAssignmentsTimer, AssignmentStability._testEmbeddedPropertyAssignmentsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testEmbeddedPrimitiveAssignmentsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testEmbeddedPrimitiveAssignments(out);
		(testEmbeddedPrimitiveAssignmentsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testEmbeddedPrimitiveAssignmentsTimer, AssignmentStability._testEmbeddedPrimitiveAssignmentsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8289572921500813);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testEmbeddedPrimitiveAssignmentsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testEmbeddedPrimitiveAssignmentsTimer, AssignmentStability._testEmbeddedPrimitiveAssignmentsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

AssignmentStability.init = function () {
	return this;
	
};

AssignmentStability.generated3 = function (value0, value1) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	return novaConstructors.newArray1(temp, 2);
	
};

AssignmentStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/AssignmentStability"), false);
	
};

AssignmentStability.prototype.mutator__js_class = function () {
	
};

AssignmentStability.prototype.accessor_model = function () {
	return AssignmentStability._runTestsTestRunner;
	
};

AssignmentStability.prototype.mutator_model = function () {
	
};

AssignmentStability.prototype.super = function () {
	
};

novaConstructors.newAssignmentStability = function () {
	var __value = new AssignmentStability()
	NovaObject.call(__value);
	AssignmentStability.prototype.super.apply(__value, [].slice.call(arguments));
	return AssignmentStability.init.call(__value);
	
};

var BoundedIntervalStability = function () {
	this._js_class = null;
	
	
};

BoundedIntervalStability.prototype = Object.create(NovaObject.prototype);
BoundedIntervalStability.prototype.constructor = BoundedIntervalStability;


BoundedIntervalStability.prototype.destroy = function () {
	
};

BoundedIntervalStability.prototype.invalidUnboundedIntervalBounds = function (out) {
	var self = this;
	
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing invalidUnboundedIntervalBounds "));
	(Nest.expect1(() => {
				novaConstructors.newBoundedInterval(null, null);
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newBoundedInterval(null, novaConstructors.newDateTime2(5));
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newBoundedInterval(novaConstructors.newDateTime2(5), null);
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	
};

BoundedIntervalStability.prototype.invalidIntervalBounds = function (out) {
	var self = this;
	
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing invalidIntervalBounds "));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017), novaConstructors.newDateTime2(2016));
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 6), novaConstructors.newDateTime2(2017, 5));
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 6, 5), novaConstructors.newDateTime2(2017, 6, 4));
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 6, 5, 4), novaConstructors.newDateTime2(2017, 6, 5, 3));
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 6, 5, 4, 3), novaConstructors.newDateTime2(2017, 6, 5, 4, 2));
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 6, 5, 4, 3, 2), novaConstructors.newDateTime2(2017, 6, 5, 4, 3, 1));
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 6, 5, 4, 3, 2, 1), novaConstructors.newDateTime2(2017, 6, 5, 4, 3, 2, 0));
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	
};

BoundedIntervalStability.prototype.validIntervalBounds = function (out) {
	var self = this;
	
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing validIntervalBounds "));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(0), novaConstructors.newDateTime2(0));
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2016), novaConstructors.newDateTime2(2017));
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 5), novaConstructors.newDateTime2(2017, 6));
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 6, 4), novaConstructors.newDateTime2(2017, 6, 5));
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 6, 5, 3), novaConstructors.newDateTime2(2017, 6, 5, 4));
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 6, 5, 4, 2), novaConstructors.newDateTime2(2017, 6, 5, 4, 3));
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 6, 5, 4, 3, 1), novaConstructors.newDateTime2(2017, 6, 5, 4, 3, 2));
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 6, 5, 4, 3, 2, 0), novaConstructors.newDateTime2(2017, 6, 5, 4, 3, 2, 1));
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	
};

BoundedIntervalStability.prototype.runTests = function (onResult, out) {
	var invalidUnboundedIntervalBoundsTimer;
	var invalidIntervalBoundsTimer;
	var validIntervalBoundsTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing BoundedIntervalStability"));
	invalidUnboundedIntervalBoundsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.invalidUnboundedIntervalBounds(out);
		(invalidUnboundedIntervalBoundsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, invalidUnboundedIntervalBoundsTimer, BoundedIntervalStability._invalidUnboundedIntervalBoundsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.9066126686040383);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(invalidUnboundedIntervalBoundsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, invalidUnboundedIntervalBoundsTimer, BoundedIntervalStability._invalidUnboundedIntervalBoundsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	invalidIntervalBoundsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.invalidIntervalBounds(out);
		(invalidIntervalBoundsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, invalidIntervalBoundsTimer, BoundedIntervalStability._invalidIntervalBoundsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.9327302207547972);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(invalidIntervalBoundsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, invalidIntervalBoundsTimer, BoundedIntervalStability._invalidIntervalBoundsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	validIntervalBoundsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.validIntervalBounds(out);
		(validIntervalBoundsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, validIntervalBoundsTimer, BoundedIntervalStability._validIntervalBoundsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.10695700233193961);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(validIntervalBoundsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, validIntervalBoundsTimer, BoundedIntervalStability._validIntervalBoundsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

BoundedIntervalStability.init = function () {
	return this;
	
};

BoundedIntervalStability.generated4 = function (value0, value1, value2) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	temp[2] = value2;
	return novaConstructors.newArray1(temp, 3);
	
};

BoundedIntervalStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/BoundedIntervalStability"), false);
	
};

BoundedIntervalStability.prototype.mutator__js_class = function () {
	
};

BoundedIntervalStability.prototype.accessor_model = function () {
	return BoundedIntervalStability._runTestsTestRunner;
	
};

BoundedIntervalStability.prototype.mutator_model = function () {
	
};

BoundedIntervalStability.prototype.super = function () {
	
};

novaConstructors.newBoundedIntervalStability = function () {
	var __value = new BoundedIntervalStability()
	NovaObject.call(__value);
	BoundedIntervalStability.prototype.super.apply(__value, [].slice.call(arguments));
	return BoundedIntervalStability.init.call(__value);
	
};

var BoundlessIntervalStability = function () {
	this._js_class = null;
	
	
};

BoundlessIntervalStability.prototype = Object.create(NovaObject.prototype);
BoundlessIntervalStability.prototype.constructor = BoundlessIntervalStability;


BoundlessIntervalStability.prototype.destroy = function () {
	
};

BoundlessIntervalStability.prototype.invalidBoundlessIntervalBounds = function (out) {
	var self = this;
	
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing invalidBoundlessIntervalBounds "));
	(Nest.expect1(() => {
				novaConstructors.newBoundlessInterval(novaConstructors.newDateTime2(4), novaConstructors.newDateTime2(5));
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	
};

BoundlessIntervalStability.prototype.validIntervalBounds = function (out) {
	var self = this;
	
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing validIntervalBounds "));
	(Nest.expect1(() => {
				novaConstructors.newBoundlessInterval();
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newBoundlessInterval(novaConstructors.newDateTime2(5));
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newBoundlessInterval(undefined, novaConstructors.newDateTime2(5));
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newBoundlessInterval(null, novaConstructors.newDateTime2(5));
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	(Nest.expect1(() => {
				novaConstructors.newBoundlessInterval(novaConstructors.newDateTime2(4), null);
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false));
	
};

BoundlessIntervalStability.prototype.infiniteIntervalValues = function (out) {
	var self = this;
	
	var interval;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing infiniteIntervalValues "));
	interval = novaConstructors.newInterval(null, novaConstructors.newDateTime2(5));
	(Nest.expect1(() => {
				(interval || nova_null).accessor_years();
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/BoundlessInterval.InfiniteIntervalException"), false));
	
};

BoundlessIntervalStability.prototype.runTests = function (onResult, out) {
	var invalidBoundlessIntervalBoundsTimer;
	var validIntervalBoundsTimer;
	var infiniteIntervalValuesTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing BoundlessIntervalStability"));
	invalidBoundlessIntervalBoundsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.invalidBoundlessIntervalBounds(out);
		(invalidBoundlessIntervalBoundsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, invalidBoundlessIntervalBoundsTimer, BoundlessIntervalStability._invalidBoundlessIntervalBoundsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.10056764842210619);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(invalidBoundlessIntervalBoundsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, invalidBoundlessIntervalBoundsTimer, BoundlessIntervalStability._invalidBoundlessIntervalBoundsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	validIntervalBoundsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.validIntervalBounds(out);
		(validIntervalBoundsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, validIntervalBoundsTimer, BoundlessIntervalStability._validIntervalBoundsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7350478476358082);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(validIntervalBoundsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, validIntervalBoundsTimer, BoundlessIntervalStability._validIntervalBoundsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	infiniteIntervalValuesTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.infiniteIntervalValues(out);
		(infiniteIntervalValuesTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, infiniteIntervalValuesTimer, BoundlessIntervalStability._infiniteIntervalValuesTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8002857163641344);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(infiniteIntervalValuesTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, infiniteIntervalValuesTimer, BoundlessIntervalStability._infiniteIntervalValuesTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

BoundlessIntervalStability.init = function () {
	return this;
	
};

BoundlessIntervalStability.generated5 = function (value0, value1, value2) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	temp[2] = value2;
	return novaConstructors.newArray1(temp, 3);
	
};

BoundlessIntervalStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/BoundlessIntervalStability"), false);
	
};

BoundlessIntervalStability.prototype.mutator__js_class = function () {
	
};

BoundlessIntervalStability.prototype.accessor_model = function () {
	return BoundlessIntervalStability._runTestsTestRunner;
	
};

BoundlessIntervalStability.prototype.mutator_model = function () {
	
};

BoundlessIntervalStability.prototype.super = function () {
	
};

novaConstructors.newBoundlessIntervalStability = function () {
	var __value = new BoundlessIntervalStability()
	NovaObject.call(__value);
	BoundlessIntervalStability.prototype.super.apply(__value, [].slice.call(arguments));
	return BoundlessIntervalStability.init.call(__value);
	
};

var CastStability = function () {
	this._js_class = null;
	
	
};

CastStability.prototype = Object.create(NovaObject.prototype);
CastStability.prototype.constructor = CastStability;


CastStability.prototype.destroy = function () {
	
};

CastStability.prototype.validPrimitveNumericCasts = function (out) {
	var x;
	var y;
	var z;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing validPrimitveNumericCasts "));
	x = 100;
	y = x;
	z = x;
	
};

CastStability.prototype.validArrayTypeCast = function (out) {
	var array;
	var x;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing validArrayTypeCast "));
	array = this.generated43();
	x = (array || nova_null).get(0);
	(Nest.expect8(x) || nova_null).toBe(10000);
	
};

CastStability.prototype.incompatibleCast = function (out) {
	var x;
	var y;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing incompatibleCast "));
	x = null;
	y = (x);
	
};

CastStability.prototype.runTests = function (onResult, out) {
	var validPrimitveNumericCastsTimer;
	var validArrayTypeCastTimer;
	var incompatibleCastTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing CastStability"));
	validPrimitveNumericCastsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.validPrimitveNumericCasts(out);
		(validPrimitveNumericCastsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, validPrimitveNumericCastsTimer, CastStability._validPrimitveNumericCastsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.19516220774987603);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(validPrimitveNumericCastsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, validPrimitveNumericCastsTimer, CastStability._validPrimitveNumericCastsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	validArrayTypeCastTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.validArrayTypeCast(out);
		(validArrayTypeCastTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, validArrayTypeCastTimer, CastStability._validArrayTypeCastTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.05626758354678418);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(validArrayTypeCastTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, validArrayTypeCastTimer, CastStability._validArrayTypeCastTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	incompatibleCastTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.incompatibleCast(out);
		(incompatibleCastTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, incompatibleCastTimer, CastStability._incompatibleCastTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.40749481887657024);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(incompatibleCastTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, incompatibleCastTimer, CastStability._incompatibleCastTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

CastStability.init = function () {
	return this;
	
};

CastStability.generated6 = function (value0, value1, value2) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	temp[2] = value2;
	return novaConstructors.newArray1(temp, 3);
	
};

CastStability.prototype.generated43 = function () {
	var temp;
	temp = [];
	temp[0] = 10000;
	temp[1] = 1212121;
	return novaConstructors.newArray1Int1(temp, 2);
	
};

CastStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/CastStability"), false);
	
};

CastStability.prototype.mutator__js_class = function () {
	
};

CastStability.prototype.accessor_model = function () {
	return CastStability._runTestsTestRunner;
	
};

CastStability.prototype.mutator_model = function () {
	
};

CastStability.prototype.super = function () {
	
};

novaConstructors.newCastStability = function () {
	var __value = new CastStability()
	NovaObject.call(__value);
	CastStability.prototype.super.apply(__value, [].slice.call(arguments));
	return CastStability.init.call(__value);
	
};

var ClassWithProperties = function () {
	this.privateProp1 = 0;
	this.privateProp2 = 0;
	this.prop2 = 0;
	
	
};

ClassWithProperties.prototype = Object.create(NovaObject.prototype);
ClassWithProperties.prototype.constructor = ClassWithProperties;


ClassWithProperties.prototype.destroy = function () {
	
};

ClassWithProperties.init = function () {
	return this;
	
};

ClassWithProperties.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/ClassWithProperties"), false);
	
};

ClassWithProperties.prototype.mutator__js_class = function () {
	
};

ClassWithProperties.prototype.accessor_prop1 = function () {
	return this.privateProp1;
	
};

ClassWithProperties.prototype.mutator_prop1 = function (value) {
	this.privateProp1 = value;
	return value;
	
};

ClassWithProperties.prototype.accessor_prop2 = function () {
	return this.privateProp2;
	
};

ClassWithProperties.prototype.mutator_prop2 = function (value) {
	this.privateProp2 = value;
	return value;
	
};

ClassWithProperties.prototype.super = function () {
	
};

novaConstructors.newClassWithProperties = function () {
	var __value = new ClassWithProperties()
	NovaObject.call(__value);
	ClassWithProperties.prototype.super.apply(__value, [].slice.call(arguments));
	return ClassWithProperties.init.call(__value);
	
};

var ClientThread = function () {
	this.port = 0;
	this.out = null;
	
	
};

ClientThread.prototype = Object.create(Thread.prototype);
ClientThread.prototype.constructor = ClientThread;


ClientThread.prototype.destroy = function () {
	
};

ClientThread.init = function (port, out) {
	this.port = port;
	this.out = out;
	return this;
	
};

ClientThread.prototype.run = function () {
	var client;
	var ip;
	var s;
	client = novaConstructors.newClientSocket();
	ip = novaConstructors.newString2("127.0.0.1");
	(this.out || nova_null).write(novaConstructors.newString2("ClientSocket attempting to connect to ").plus0(((ip) || nova_null).plus0(novaConstructors.newString2(":").plus0(NovaInt.toString((this.port)).plus0(novaConstructors.newString2("... "))))));
	(Nest.expect9((client || nova_null).connect(ip, this.port)) || nova_null).toBe(true, novaConstructors.newString2("Failed to connect to localhost server"));
	(this.out || nova_null).writeLine(novaConstructors.newString2("Success"));
	(this.out || nova_null).writeLine(novaConstructors.newString2("Waiting for String from ServerSocket..."));
	s = (((client || nova_null).connection || nova_null).in || nova_null).readString();
	(Nest.expect10((s || nova_null).count === (NetworkStability.received || nova_null).count && (s || nova_null).equals0(NetworkStability.received)) || nova_null).toBe(true, novaConstructors.newString2("Client unable to receive the correct message from server"));
	(this.out || nova_null).write(novaConstructors.newString2("Attempting to send String to ServerSocket... "));
	(((client || nova_null).connection || nova_null).out || nova_null).write(NetworkStability.received);
	(this.out || nova_null).writeLine(novaConstructors.newString2("Success"));
	(this.out || nova_null).write(novaConstructors.newString2("Attempting to close ClientSocket... "));
	(Nest.expect11((client || nova_null).close()) || nova_null).toBe(true, novaConstructors.newString2("Unable to close Client connection"));
	(this.out || nova_null).writeLine(novaConstructors.newString2("Success"));
	
};

ClientThread.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/ClientThread"), false);
	
};

ClientThread.prototype.mutator__js_class = function () {
	
};

ClientThread.prototype.super = function () {
	
};

novaConstructors.newClientThread = function (port, out) {
	var __value = new ClientThread()
	Thread.call(__value);
	ClientThread.prototype.super.apply(__value, [].slice.call(arguments));
	return ClientThread.init.call(__value, port, out);
	
};

var ClosureStability = function () {
	this.number = 0;
	this._js_class = null;
	
	
};

ClosureStability.prototype = Object.create(NovaObject.prototype);
ClosureStability.prototype.constructor = ClosureStability;


ClosureStability.prototype.destroy = function () {
	
};

ClosureStability.prototype.incrementNumber = function () {
	return this.number++;
	
};

ClosureStability.prototype.testMathClosures = function (out) {
	var a;
	var b;
	var value;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing static math closures "));
	a = 5;
	b = 3;
	value = 0.5;
	(Nest.expect12(ClosureStability.callClosure(ClosureStability.multiply, a, b)) || nova_null).toBe(ClosureStability.multiply(a, b), novaConstructors.newString2("Failed to call multiply(Int, Int) closure"));
	(Nest.expect13(ClosureStability.callClosure(ClosureStability.pow, a, b)) || nova_null).toBe(ClosureStability.pow(a, b), novaConstructors.newString2("Failed to call pow(Int, Int) closure"));
	(Nest.expect14(ClosureStability.mathClosure(NovaMath.sin, value) - NovaMath.sin(value) < ClosureStability.TOLERANCE) || nova_null).toBe(true, novaConstructors.newString2("Failed to call Math.sin(Double) closure"));
	(Nest.expect15(ClosureStability.mathClosure(NovaMath.tan, value) - NovaMath.tan(value) < ClosureStability.TOLERANCE) || nova_null).toBe(true, novaConstructors.newString2("Failed to call Math.tan(Double) closure"));
	
};

ClosureStability.prototype.testInstanceClosure = function (out) {
	var c;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing instance closures "));
	c = novaConstructors.newClosureStability();
	ClosureStability.instanceClosure(function () { var self = c; return self.incrementNumber.call(self); });
	(Nest.expect16((c || nova_null).number === 0) || nova_null).toBe(false, novaConstructors.newString2("Failed to call incrementNumber() instance closure"));
	ClosureStability.instanceClosure(function () { var self = novaConstructors.newClosureStability(); return self.incrementNumber.call(self); });
	ClosureStability.instanceClosure(function () { var self = c; return self.incrementNumber.call(self); });
	
};

ClosureStability.callClosure = function (closure, a, b) {
	return closure(a, b);
	
};

ClosureStability.mathClosure = function (closure, value) {
	return closure(value);
	
};

ClosureStability.instanceClosure = function (closure) {
	closure();
	
};

ClosureStability.multiply = function (value1, value2) {
	return value1 * value2;
	
};

ClosureStability.pow = function (base, pow) {
	var value;
	value = base;
	var i;
	i = 0;
	for (; i < (pow - 1); i++) {
		value *= base;
	}
	return value;
	
};

ClosureStability.prototype.runTests = function (onResult, out) {
	var testMathClosuresTimer;
	var testInstanceClosureTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing ClosureStability"));
	testMathClosuresTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testMathClosures(out);
		(testMathClosuresTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testMathClosuresTimer, ClosureStability._testMathClosuresTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.07777080819356819);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testMathClosuresTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testMathClosuresTimer, ClosureStability._testMathClosuresTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testInstanceClosureTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testInstanceClosure(out);
		(testInstanceClosureTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testInstanceClosureTimer, ClosureStability._testInstanceClosureTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.644169539420639);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testInstanceClosureTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testInstanceClosureTimer, ClosureStability._testInstanceClosureTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

ClosureStability.init = function () {
	return this;
	
};

ClosureStability.generated7 = function (value0, value1) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	return novaConstructors.newArray1(temp, 2);
	
};

ClosureStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/ClosureStability"), false);
	
};

ClosureStability.prototype.mutator__js_class = function () {
	
};

ClosureStability.prototype.accessor_model = function () {
	return ClosureStability._runTestsTestRunner;
	
};

ClosureStability.prototype.mutator_model = function () {
	
};

ClosureStability.prototype.super = function () {
	
};

novaConstructors.newClosureStability = function () {
	var __value = new ClosureStability()
	NovaObject.call(__value);
	ClosureStability.prototype.super.apply(__value, [].slice.call(arguments));
	return ClosureStability.init.call(__value);
	
};

var ExceptionStability = function () {
	this._js_class = null;
	
	
};

ExceptionStability.prototype = Object.create(NovaObject.prototype);
ExceptionStability.prototype.constructor = ExceptionStability;


ExceptionStability.prototype.destroy = function () {
	
};

ExceptionStability.prototype.test = function (out) {
	var self = this;
	
	var worked;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.expect1(() => {
				self.testException(out);
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/exception/Exception"), false), novaConstructors.newString2("Failed to catch exception"));
	worked = false;
	try {
		this.testSoftExceptions(out);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8601168701832982);
			console.error(e);
			process.exit(1);
		} else {
			worked = true;
			(out || nova_null).writeLine(novaConstructors.newString2("- Success"));
		}
	 }
	finally {
	}
	(Nest.expect17(worked) || nova_null).toBe(true, novaConstructors.newString2("Failed to catch soft Exception"));
	
};

ExceptionStability.prototype.testException = function (out) {
	try {
		(out || nova_null).write(novaConstructors.newString2("Testing DivideByZeroException "));
		try {
			throw novaConstructors.newDivideByZeroException();
		} catch (e)  {
			if (!(e instanceof Exception)) {
				console.log(0.9393391571950568);
				console.error(e);
				process.exit(1);
			} else {
				(out || nova_null).writeLine(novaConstructors.newString2("- Success"));
				(out || nova_null).write(novaConstructors.newString2("Testing StabilityTestException "));
				throw novaConstructors.newStabilityTestException();
			}
		 }
		finally {
		}
		Nest.fail(novaConstructors.newString2("Failed to catch DivideByZeroException"));
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.3250832220146942);
			console.error(e);
			process.exit(1);
		} else {
			(out || nova_null).writeLine(novaConstructors.newString2("- Success"));
			throw novaConstructors.newException();
		}
	 }
	finally {
	}
	Nest.fail(novaConstructors.newString2("Failed to catch StabilityTestException"));
	
};

ExceptionStability.prototype.testSoftExceptions = function (out) {
	var worked;
	worked = false;
	try {
		(out || nova_null).write(novaConstructors.newString2("Testing soft exception without a soft catch "));
		throw novaConstructors.newStabilityTestException();
		worked = true;
		(out || nova_null).writeLine(novaConstructors.newString2("- Success"));
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8179261988238157);
			console.error(e);
			process.exit(1);
		} else {
			Nest.fail(novaConstructors.newString2("Caught soft exception without soft keyword"));
		}
	 }
	finally {
	}
	(Nest.expect18(worked) || nova_null).toBe(true, novaConstructors.newString2("Failed to throw soft without corresponding catch"));
	(out || nova_null).write(novaConstructors.newString2("Testing soft exception with a soft catch "));
	throw novaConstructors.newDivideByZeroException();
	Nest.fail(novaConstructors.newString2("Failed to exit subroutine after throwing soft Exception"));
	
};

ExceptionStability.prototype.runTests = function (onResult, out) {
	var testTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing ExceptionStability"));
	testTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.test(out);
		(testTimer || nova_null).stop();
		testResult = novaConstructors.newTestResult(true, testTimer, ExceptionStability._testTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7338449505378706);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testTimer || nova_null).stop();
			testResult = novaConstructors.newTestResult(false, testTimer, ExceptionStability._testTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

ExceptionStability.init = function () {
	return this;
	
};

ExceptionStability.generated8 = function (value0) {
	var temp;
	temp = [];
	temp[0] = value0;
	return novaConstructors.newArray1(temp, 1);
	
};

ExceptionStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/ExceptionStability"), false);
	
};

ExceptionStability.prototype.mutator__js_class = function () {
	
};

ExceptionStability.prototype.accessor_model = function () {
	return ExceptionStability._runTestsTestRunner;
	
};

ExceptionStability.prototype.mutator_model = function () {
	
};

ExceptionStability.prototype.super = function () {
	
};

novaConstructors.newExceptionStability = function () {
	var __value = new ExceptionStability()
	NovaObject.call(__value);
	ExceptionStability.prototype.super.apply(__value, [].slice.call(arguments));
	return ExceptionStability.init.call(__value);
	
};

var ExternalInnerClassStability = function () {
	this._js_class = null;
	
	
};

ExternalInnerClassStability.prototype = Object.create(NovaObject.prototype);
ExternalInnerClassStability.prototype.constructor = ExternalInnerClassStability;


ExternalInnerClassStability.prototype.destroy = function () {
	
};

ExternalInnerClassStability.prototype.test = function (out) {
	var instance;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing external inner class access "));
	instance = novaConstructors.newMyInner(3, 5);
	(Nest.expect19((instance || nova_null).x) || nova_null).toBe(3, novaConstructors.newString2("did not set values correctly"));
	
};

ExternalInnerClassStability.prototype.runTests = function (onResult, out) {
	var testTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing ExternalInnerClassStability"));
	testTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.test(out);
		(testTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testTimer, ExternalInnerClassStability._testTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.21323323410923156);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testTimer, ExternalInnerClassStability._testTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

ExternalInnerClassStability.init = function () {
	return this;
	
};

ExternalInnerClassStability.generated9 = function (value0) {
	var temp;
	temp = [];
	temp[0] = value0;
	return novaConstructors.newArray1(temp, 1);
	
};

ExternalInnerClassStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/ExternalInnerClassStability"), false);
	
};

ExternalInnerClassStability.prototype.mutator__js_class = function () {
	
};

ExternalInnerClassStability.prototype.accessor_model = function () {
	return ExternalInnerClassStability._runTestsTestRunner;
	
};

ExternalInnerClassStability.prototype.mutator_model = function () {
	
};

ExternalInnerClassStability.prototype.super = function () {
	
};

novaConstructors.newExternalInnerClassStability = function () {
	var __value = new ExternalInnerClassStability()
	NovaObject.call(__value);
	ExternalInnerClassStability.prototype.super.apply(__value, [].slice.call(arguments));
	return ExternalInnerClassStability.init.call(__value);
	
};

var FancyOutputStreamTests = function () {
	this.stream = null;
	this.builder = null;
	this._js_class = null;
	
	
};

FancyOutputStreamTests.prototype = Object.create(NovaObject.prototype);
FancyOutputStreamTests.prototype.constructor = FancyOutputStreamTests;


FancyOutputStreamTests.prototype.destroy = function () {
	
};

FancyOutputStreamTests.prototype.init = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	this.builder = novaConstructors.newStringBuilder();
	this.stream = novaConstructors.newFancyOutputStream(this.builder);
	
};

FancyOutputStreamTests.prototype.clean = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	this.stream = null;
	this.builder = null;
	
};

FancyOutputStreamTests.prototype.oddHeader = function (out) {
	var string;
	var expected;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing oddHeader "));
	(this.stream || nova_null).writeHeader1(novaConstructors.newString2("Testing"));
	string = (this.builder || nova_null).toString();
	expected = novaConstructors.newString2("=================================== ");
	(Nest.expect20((string || nova_null).count) || nova_null).toBe(81);
	(Nest.expect21((string || nova_null).accessor_last()) || nova_null).toBe('\n', novaConstructors.newString2("Expected new line at end of header, received '").plus0(Char.toString((string.accessor_last())).plus0(novaConstructors.newString2("'"))));
	(Nest.expect22(((string || nova_null).trim() || nova_null).count) || nova_null).toBe(80);
	(Nest.expect23((string || nova_null).startsWith1(expected)) || nova_null).toBe(true, novaConstructors.newString2("Header width not correct (").plus0(NovaInt.toString((string.count)).plus0(novaConstructors.newString2(" chars)\n").plus0(((expected) || nova_null).plus0(novaConstructors.newString2("\n").plus0(((string) || nova_null).plus0(novaConstructors.newString2(""))))))));
	
};

FancyOutputStreamTests.prototype.evenHeader = function (out) {
	var string;
	var expected;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing evenHeader "));
	(this.stream || nova_null).writeHeader1(novaConstructors.newString2("Test"));
	string = (this.builder || nova_null).toString();
	expected = novaConstructors.newString2("===================================== ");
	(Nest.expect24((string || nova_null).count) || nova_null).toBe(81);
	(Nest.expect25((string || nova_null).accessor_last()) || nova_null).toBe('\n', novaConstructors.newString2("Expected new line at end of header, received '").plus0(Char.toString((string.accessor_last())).plus0(novaConstructors.newString2("'"))));
	(Nest.expect26(((string || nova_null).trim() || nova_null).count) || nova_null).toBe(80);
	(Nest.expect27((string || nova_null).startsWith1(expected)) || nova_null).toBe(true, novaConstructors.newString2("Header width not correct (").plus0(NovaInt.toString((string.count)).plus0(novaConstructors.newString2(" chars)\n").plus0(((expected) || nova_null).plus0(novaConstructors.newString2("\n").plus0(((string) || nova_null).plus0(novaConstructors.newString2(""))))))));
	
};

FancyOutputStreamTests.prototype.headerPattern = function (out) {
	var string;
	var expected;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing headerPattern "));
	(this.stream || nova_null).headerPattern = novaConstructors.newString2("/\\");
	(this.stream || nova_null).writeHeader1(novaConstructors.newString2("Test"));
	string = (this.builder || nova_null).toString();
	expected = novaConstructors.newString2("/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/ ");
	(Nest.expect28((string || nova_null).count) || nova_null).toBe(81, novaConstructors.newString2("Header count expected 81, but received ").plus0(NovaInt.toString((string.count)).plus0(novaConstructors.newString2(""))));
	(Nest.expect29((string || nova_null).accessor_last()) || nova_null).toBe('\n', novaConstructors.newString2("Expected new line at end of header, received '").plus0(Char.toString((string.accessor_last())).plus0(novaConstructors.newString2("'"))));
	(Nest.expect30(((string || nova_null).trim() || nova_null).count) || nova_null).toBe(80, novaConstructors.newString2("Trimmed header count expected 80, but received ").plus0(NovaInt.toString((string.trim().count)).plus0(novaConstructors.newString2(""))));
	(Nest.expect31((string || nova_null).startsWith1(expected)) || nova_null).toBe(true, novaConstructors.newString2("Header width not correct (").plus0(NovaInt.toString((string.count)).plus0(novaConstructors.newString2(" chars)\n").plus0(((expected) || nova_null).plus0(novaConstructors.newString2("\n").plus0(((string) || nova_null).plus0(novaConstructors.newString2(""))))))));
	
};

FancyOutputStreamTests.prototype.runTests = function (onResult, out) {
	var oddHeaderTimer;
	var evenHeaderTimer;
	var headerPatternTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing FancyOutputStreamTests"));
	this.init(out);
	oddHeaderTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.oddHeader(out);
		(oddHeaderTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, oddHeaderTimer, FancyOutputStreamTests._oddHeaderTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.03022541385308053);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(oddHeaderTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, oddHeaderTimer, FancyOutputStreamTests._oddHeaderTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	this.clean(out);
	this.init(out);
	evenHeaderTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.evenHeader(out);
		(evenHeaderTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, evenHeaderTimer, FancyOutputStreamTests._evenHeaderTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.00102713717904368);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(evenHeaderTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, evenHeaderTimer, FancyOutputStreamTests._evenHeaderTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	this.clean(out);
	this.init(out);
	headerPatternTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.headerPattern(out);
		(headerPatternTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, headerPatternTimer, FancyOutputStreamTests._headerPatternTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.18135050806927677);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(headerPatternTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, headerPatternTimer, FancyOutputStreamTests._headerPatternTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	this.clean(out);
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

FancyOutputStreamTests.init = function () {
	return this;
	
};

FancyOutputStreamTests.generated10 = function (value0, value1, value2) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	temp[2] = value2;
	return novaConstructors.newArray1(temp, 3);
	
};

FancyOutputStreamTests.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/FancyOutputStreamTests"), false);
	
};

FancyOutputStreamTests.prototype.mutator__js_class = function () {
	
};

FancyOutputStreamTests.prototype.accessor_model = function () {
	return FancyOutputStreamTests._runTestsTestRunner;
	
};

FancyOutputStreamTests.prototype.mutator_model = function () {
	
};

FancyOutputStreamTests.prototype.super = function () {
	
};

novaConstructors.newFancyOutputStreamTests = function () {
	var __value = new FancyOutputStreamTests()
	NovaObject.call(__value);
	FancyOutputStreamTests.prototype.super.apply(__value, [].slice.call(arguments));
	return FancyOutputStreamTests.init.call(__value);
	
};

var FileStability = function () {
	this.f = null;
	this.writer = null;
	this.reader = null;
	
	
};

FileStability.prototype = Object.create(NovaObject.prototype);
FileStability.prototype.constructor = FileStability;


FileStability.prototype.destroy = function () {
	
};

FileStability.prototype.initClass = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	this.f = novaConstructors.newFile1(novaConstructors.newString2("temp").plus0(NovaLong.toString((Time.accessor_currentTimeMillis())).plus0(novaConstructors.newString2(""))));
	this.writer = novaConstructors.newFileWriter0(this.f);
	this.reader = novaConstructors.newFileReader(this.f);
	
};

FileStability.prototype.createFile = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing file creation "));
	(Nest.expect32((this.writer || nova_null).create()) || nova_null).toBe(true, novaConstructors.newString2("Failed to create file"));
	
};

FileStability.prototype.writeToFile = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing writing lines of data to file "));
	var i;
	i = 0;
	for (; i < FileStability.lines; i++) {
		(this.writer || nova_null).writeLine(FileStability.inputString);
	}
	
};

FileStability.prototype.readFromFile = function (out) {
	var times;
	var line;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing reading lines from file "));
	if (!(this.reader || nova_null).accessor_isOpen()) {
		(this.reader || nova_null).open();
	}
	(Nest.expect33((this.reader || nova_null).accessor_isOpen()) || nova_null).toBe(true, novaConstructors.newString2("File reader failed to open"));
	times = 0;
	line = (this.reader || nova_null).readLine();
	while ((line) != null) {
		(Nest.expect34((line || nova_null).equals0(FileStability.inputString)) || nova_null).toBe(true, novaConstructors.newString2("Reading from file failed: '").plus0(((line) || nova_null).plus0(novaConstructors.newString2("' != '").plus0(((FileStability.inputString) || nova_null).plus0(novaConstructors.newString2("'"))))));
		line = (this.reader || nova_null).readLine();
		times++;
	}
	(this.reader || nova_null).close();
	(Nest.expect35(times != FileStability.lines) || nova_null).toBe(false, novaConstructors.newString2("Failed; only read ").plus0(NovaInt.toString((times)).plus0(novaConstructors.newString2("/100 lines"))));
	
};

FileStability.prototype.deleteFile = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.expect36((this.writer || nova_null).delete()) || nova_null).toBe(true, novaConstructors.newString2("Failed to delete file"));
	
};

FileStability.prototype.runTests = function (onResult, out) {
	var createFileTimer;
	var writeToFileTimer;
	var readFromFileTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing FileStability"));
	this.initClass(out);
	createFileTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.createFile(out);
		(createFileTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, createFileTimer, FileStability._createFileTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.4583826765400617);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(createFileTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, createFileTimer, FileStability._createFileTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	writeToFileTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.writeToFile(out);
		(writeToFileTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, writeToFileTimer, FileStability._writeToFileTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.5952260736535899);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(writeToFileTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, writeToFileTimer, FileStability._writeToFileTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	readFromFileTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.readFromFile(out);
		(readFromFileTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, readFromFileTimer, FileStability._readFromFileTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.06677997756436038);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(readFromFileTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, readFromFileTimer, FileStability._readFromFileTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	this.deleteFile(out);
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

FileStability.init = function () {
	return this;
	
};

FileStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/FileStability"), false);
	
};

FileStability.prototype.mutator__js_class = function () {
	
};

FileStability.prototype.super = function () {
	
};

novaConstructors.newFileStability = function () {
	var __value = new FileStability()
	NovaObject.call(__value);
	FileStability.prototype.super.apply(__value, [].slice.call(arguments));
	return FileStability.init.call(__value);
	
};

var FirstClassFunctionStability = function () {
	this.funcSwitch = 0;
	this.funcCount = 0;
	this.chainCount = 0;
	this.bodyWorked = 0;
	this._js_class = null;
	
	
};

FirstClassFunctionStability.prototype = Object.create(NovaObject.prototype);
FirstClassFunctionStability.prototype.constructor = FirstClassFunctionStability;


FirstClassFunctionStability.prototype.destroy = function () {
	
};

FirstClassFunctionStability.prototype.testFunctionReturnedByFunction = function (out) {
	var func;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing calling a function returned by a function "));
	func = this.getFunc();
	func();
	(Nest.expect37(this.funcSwitch) || nova_null).toBe(true, novaConstructors.newString2("Failed to call first class function returned from function"));
	
};

FirstClassFunctionStability.prototype.testFunctionReturnedByInlineFunction = function (out) {
	var func2;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing calling a function returned by an inline function "));
	this.funcSwitch = false;
	func2 = this.inlineGetFunc();
	func2();
	(Nest.expect38(this.funcSwitch) || nova_null).toBe(true, novaConstructors.newString2("Failed to call first class function returned from inline function"));
	
};

FirstClassFunctionStability.prototype.testFunctionReturnedByInlineFunctionWithTypeSpecified = function (out) {
	var func3;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing calling a function returned by an inline function with type specified "));
	this.funcSwitch = false;
	func3 = this.inlineGetFunc2();
	func3();
	(Nest.expect39(this.funcSwitch) || nova_null).toBe(true, novaConstructors.newString2("Failed to call first class function returned from inline function with type specified"));
	
};

FirstClassFunctionStability.prototype.testCallingChainedFunctionReturnedByFunction = function (out) {
	var chained;
	var nova_local_0;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing calling a chained function returned by a function "));
	this.funcCount = 0;
	this.funcSwitch = false;
	chained = this.chainedFuncReference();
	chained();
	(Nest.expect40(this.funcSwitch && this.funcCount === 1) || nova_null).toBe(true, novaConstructors.newString2("Failed to call first class chained function returned from function: ").plus0(Bool.toString((this.funcSwitch)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((this.funcCount)).plus0(novaConstructors.newString2(""))))));
	
};

FirstClassFunctionStability.prototype.testCallingAssignedChainFunction = function (out) {
	var chained;
	var c;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing calling an assigned chained function returned by a function "));
	this.funcCount = 0;
	this.funcSwitch = false;
	chained = this.chainedFuncReference();
	c = chained();
	c();
	c();
	c();
	(Nest.expect41(this.funcSwitch && this.funcCount === 3) || nova_null).toBe(true, novaConstructors.newString2("Failed to call first class chained function returned from function: ").plus0(Bool.toString((this.funcSwitch)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((this.funcCount)).plus0(novaConstructors.newString2(""))))));
	
};

FirstClassFunctionStability.prototype.testCallingChainedFunctionX3 = function (out) {
	var chainX3;
	var nova_local_0;
	var nova_local_1;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing calling a chained function x3 returned by a function "));
	this.funcCount = 0;
	this.funcSwitch = false;
	this.chainCount = 0;
	chainX3 = this.chainedFuncReference3();
	chainX3();
	(Nest.expect42(this.funcSwitch && this.funcCount === 1 && this.chainCount === 3) || nova_null).toBe(true, novaConstructors.newString2("Failed to call first class chained function x3 returned from function: ").plus0(Bool.toString((this.funcSwitch)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((this.funcCount)).plus0(novaConstructors.newString2(", x").plus0(NovaInt.toString((this.chainCount)).plus0(novaConstructors.newString2(""))))))));
	
};

FirstClassFunctionStability.prototype.testCallingChainedFunctionX4 = function (out) {
	var chainX4;
	var nova_local_0;
	var nova_local_1;
	var nova_local_2;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing calling a chained function x4 returned by a function "));
	this.funcCount = 0;
	this.funcSwitch = false;
	this.chainCount = 0;
	chainX4 = this.chainedFuncReference4();
	chainX4();
	(Nest.expect43(this.funcSwitch && this.funcCount === 1 && this.chainCount === 4) || nova_null).toBe(true, novaConstructors.newString2("Failed to call first class chained function x4 returned from function: ").plus0(Bool.toString((this.funcSwitch)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((this.funcCount)).plus0(novaConstructors.newString2(", x").plus0(NovaInt.toString((this.chainCount)).plus0(novaConstructors.newString2(""))))))));
	
};

FirstClassFunctionStability.prototype.testCallingChainedFunctionX5 = function (out) {
	var chainX5;
	var nova_local_0;
	var nova_local_1;
	var nova_local_2;
	var nova_local_3;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing calling a chained function x5 returned by a function "));
	this.funcCount = 0;
	this.funcSwitch = false;
	this.chainCount = 0;
	chainX5 = this.chainedFuncReference5();
	chainX5();
	(Nest.expect44(this.funcSwitch && this.funcCount === 1 && this.chainCount === 5) || nova_null).toBe(true, novaConstructors.newString2("Failed to call first class chained function x5 returned from function: ").plus0(Bool.toString((this.funcSwitch)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((this.funcCount)).plus0(novaConstructors.newString2(", x").plus0(NovaInt.toString((this.chainCount)).plus0(novaConstructors.newString2(""))))))));
	
};

FirstClassFunctionStability.prototype.testCallingChainedFunctionX6 = function (out) {
	var chainX6;
	var nova_local_0;
	var nova_local_1;
	var nova_local_2;
	var nova_local_3;
	var nova_local_4;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing calling a chained function x6 returned by a function "));
	this.funcCount = 0;
	this.funcSwitch = false;
	this.chainCount = 0;
	chainX6 = this.chainedFuncReference6();
	chainX6();
	(Nest.expect45(this.funcSwitch && this.funcCount === 1 && this.chainCount === 6) || nova_null).toBe(true, novaConstructors.newString2("Failed to call first class chained function x6 returned from function: ").plus0(Bool.toString((this.funcSwitch)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((this.funcCount)).plus0(novaConstructors.newString2(", x").plus0(NovaInt.toString((this.chainCount)).plus0(novaConstructors.newString2(""))))))));
	
};

FirstClassFunctionStability.prototype.refFunc = function () {
	this.funcSwitch = true;
	this.funcCount++;
	
};

FirstClassFunctionStability.prototype.getFunc = function () {
	return (function (context) { return function () { var self = context; return self.refFunc.call(self); } })(this);
	
};

FirstClassFunctionStability.prototype.inlineGetFunc = function () {
	this.chainCount++;
	return (function (context) { return function () { var self = context; return self.refFunc.call(self); } })(this);
	
};

FirstClassFunctionStability.prototype.inlineGetFunc2 = function () {
	return (function (context) { return function () { var self = context; return self.refFunc.call(self); } })(this);
	
};

FirstClassFunctionStability.prototype.chainedFuncReference = function () {
	this.chainCount++;
	return (function (context) { return function () { var self = context; return self.inlineGetFunc.call(self); } })(this);
	
};

FirstClassFunctionStability.prototype.chainedFuncReference3 = function () {
	this.chainCount++;
	return (function (context) { return function () { var self = context; return self.chainedFuncReference.call(self); } })(this);
	
};

FirstClassFunctionStability.prototype.chainedFuncReference4 = function () {
	this.chainCount++;
	return (function (context) { return function () { var self = context; return self.chainedFuncReference3.call(self); } })(this);
	
};

FirstClassFunctionStability.prototype.chainedFuncReference5 = function () {
	this.chainCount++;
	return (function (context) { return function () { var self = context; return self.chainedFuncReference4.call(self); } })(this);
	
};

FirstClassFunctionStability.prototype.chainedFuncReference6 = function () {
	this.chainCount++;
	return (function (context) { return function () { var self = context; return self.chainedFuncReference5.call(self); } })(this);
	
};

FirstClassFunctionStability.prototype.testSingleFunctionInArray = function (out) {
	var array;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing single function in Array "));
	array = novaConstructors.newArray();
	(array || nova_null).add0((function (context) { return function () { var self = context; return self.refFunc.call(self); } })(this));
	
};

FirstClassFunctionStability.prototype.testCallingFunctionFromCollection = function (out) {
	var array;
	var nova_local_0;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing calling a single function from Array "));
	array = novaConstructors.newArray();
	(array || nova_null).add0((function (context) { return function () { var self = context; return self.refFunc.call(self); } })(this));
	this.funcSwitch = false;
	nova_local_0 = (array || nova_null).accessor_first();
	(Nest.expect46(this.funcSwitch) || nova_null).toBe(true, novaConstructors.newString2("Failed to call single function from collection"));
	
};

FirstClassFunctionStability.prototype.paramFunc = function (x, y) {
	return x + (y || nova_null).count;
	
};

FirstClassFunctionStability.prototype.testParameterlessLambdaVariableFunctionality = function (out) {
	var self = this;
	
	var worked;
	var func;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing parameterless lambda variable functionality "));
	worked = false;
	func = () => {
		return worked = true;
		
	};
	(Nest.expect47(worked) || nova_null).toBe(false);
	func();
	(Nest.expect48(worked) || nova_null).toBe(true);
	worked = false;
	(Nest.expect49(worked) || nova_null).toBe(false);
	this.callFunc(func);
	(Nest.expect50(worked) || nova_null).toBe(true);
	
};

FirstClassFunctionStability.prototype.callFunc = function (func) {
	func();
	
};

FirstClassFunctionStability.prototype.testParameterlessLocalFunction = function (out) {
	var self = this;
	
	var worked;
	var func;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing parameterless local function "));
	worked = false;
	func = () => {
		return worked = true;
		
	};
	(Nest.expect51(worked) || nova_null).toBe(false);
	func();
	(Nest.expect52(worked) || nova_null).toBe(true);
	
};

FirstClassFunctionStability.prototype.testLambdaVariableWithParameters = function (out) {
	var self = this;
	
	var worked;
	var func;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing lambda variable with parameters functionality "));
	worked = false;
	func = (x) => {
		return worked = x * 2 === 6;
		
	};
	(Nest.expect53(worked) || nova_null).toBe(false);
	func(3);
	(Nest.expect54(worked) || nova_null).toBe(true);
	
};

FirstClassFunctionStability.prototype.testLocalFunctionWithParameters = function (out) {
	var self = this;
	
	var worked;
	var func;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing local function with parameters "));
	worked = false;
	func = (x) => {
		return worked = x * 2 === 6;
		
	};
	(Nest.expect55(worked) || nova_null).toBe(false);
	func(3);
	(Nest.expect56(worked) || nova_null).toBe(true);
	
};

FirstClassFunctionStability.prototype.testReturningLambda = function (out) {
	var func;
	var returned;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing returning a lambda "));
	func = this.returnLambda(5);
	returned = func();
	(Nest.expect57(returned) || nova_null).toBe(10, novaConstructors.newString2("Expected 10, but received ").plus0(NovaInt.toString((returned)).plus0(novaConstructors.newString2(""))));
	
};

FirstClassFunctionStability.prototype.returnLambda = function (input) {
	var self = this;
	
	return () => {
		return input * 2;
		
	};
	
};

FirstClassFunctionStability.prototype.testReturningLambdaWithParameters = function (out) {
	var func;
	var returned;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing returning a lambda with parameters "));
	func = this.returnLambdaWithParameters(5);
	returned = func(3, 6);
	(Nest.expect58(returned) || nova_null).toBe(3 * 6 + 5, novaConstructors.newString2("Expected ").plus0(NovaByte.toString((3 * 6 + 5)).plus0(novaConstructors.newString2(", but received ").plus0(NovaInt.toString((returned))))));
	
};

FirstClassFunctionStability.prototype.returnLambdaWithParameters = function (input) {
	var self = this;
	
	return (x, y) => {
		return x * y + input;
		
	};
	
};

FirstClassFunctionStability.prototype.testInlineReturningLambda = function (out) {
	var func;
	var returned;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing inline returning a lambda "));
	func = this.inlineReturnLambda(5);
	returned = func();
	(Nest.expect59(returned) || nova_null).toBe(10, novaConstructors.newString2("Expected 10, but received ").plus0(NovaInt.toString((returned)).plus0(novaConstructors.newString2(""))));
	
};

FirstClassFunctionStability.prototype.inlineReturnLambda = function (input) {
	var self = this;
	
	return () => {
		return input * 2;
		
	};
	
};

FirstClassFunctionStability.prototype.testInlineReturningLambdaWithParameters = function (out) {
	var func;
	var returned;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing inline returning a lambda with parameters "));
	func = this.inlineReturnLambdaWithParameters(5);
	returned = func(3, 6);
	(Nest.expect60(returned) || nova_null).toBe(3 * 6 + 5, novaConstructors.newString2("Expected ").plus0(NovaByte.toString((3 * 6 + 5)).plus0(novaConstructors.newString2(", but received ").plus0(NovaInt.toString((returned))))));
	
};

FirstClassFunctionStability.prototype.inlineReturnLambdaWithParameters = function (input) {
	var self = this;
	
	return (x, y) => {
		return x * y + input;
		
	};
	
};

FirstClassFunctionStability.prototype.testInlineReturningLambdaWithParametersAndType = function (out) {
	var func;
	var returned;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing inline returning a lambda with parameters and type predefined "));
	func = this.inlineReturnLambdaWithParametersAndType(5);
	returned = func(3, 6);
	(Nest.expect61(returned) || nova_null).toBe(3 * 6 + 5, novaConstructors.newString2("Expected ").plus0(NovaByte.toString((3 * 6 + 5)).plus0(novaConstructors.newString2(", but received ").plus0(NovaInt.toString((returned))))));
	
};

FirstClassFunctionStability.prototype.inlineReturnLambdaWithParametersAndType = function (input) {
	var self = this;
	
	return (x, y) => {
		return x * y + input;
		
	};
	
};

FirstClassFunctionStability.prototype.testInlineReturningLambdaWithParametersAndTypeWithBody = function (out) {
	var func;
	var returned;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing inline returning a lambda with parameters and type predefined with body "));
	(Nest.expect62(this.bodyWorked) || nova_null).toBe(false);
	func = this.inlineReturnLambdaWithParametersAndTypeWithBody(5);
	(Nest.expect63(this.bodyWorked) || nova_null).toBe(true);
	returned = func(3, 6);
	(Nest.expect64(returned) || nova_null).toBe(3 * 6 + 5, novaConstructors.newString2("Expected ").plus0(NovaByte.toString((3 * 6 + 5)).plus0(novaConstructors.newString2(", but received ").plus0(NovaInt.toString((returned))))));
	
};

FirstClassFunctionStability.prototype.inlineReturnLambdaWithParametersAndTypeWithBody = function (input) {
	var self = this;
	
	this.bodyWorked = true;
	return (x, y) => {
		return x * y + input;
		
	};
	
};

FirstClassFunctionStability.prototype.testImplicitNullFunctionReference = function (out) {
	var func;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing implicit null function reference "));
	
};

FirstClassFunctionStability.prototype.testExplicitNullFunctionReference = function (out) {
	var func;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing explicit null function reference "));
	func = null;
	
};

FirstClassFunctionStability.prototype.testNonNullFunctionReference = function (out) {
	var self = this;
	
	var func;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing non-null function reference "));
	func = () => {
		
	};
	
};

FirstClassFunctionStability.prototype.runTests = function (onResult, out) {
	var testFunctionReturnedByFunctionTimer;
	var testFunctionReturnedByInlineFunctionTimer;
	var testFunctionReturnedByInlineFunctionWithTypeSpecifiedTimer;
	var testCallingChainedFunctionReturnedByFunctionTimer;
	var testCallingAssignedChainFunctionTimer;
	var testCallingChainedFunctionX3Timer;
	var testCallingChainedFunctionX4Timer;
	var testCallingChainedFunctionX5Timer;
	var testCallingChainedFunctionX6Timer;
	var testSingleFunctionInArrayTimer;
	var testCallingFunctionFromCollectionTimer;
	var testParameterlessLambdaVariableFunctionalityTimer;
	var testParameterlessLocalFunctionTimer;
	var testLambdaVariableWithParametersTimer;
	var testLocalFunctionWithParametersTimer;
	var testReturningLambdaTimer;
	var testReturningLambdaWithParametersTimer;
	var testInlineReturningLambdaTimer;
	var testInlineReturningLambdaWithParametersTimer;
	var testInlineReturningLambdaWithParametersAndTypeTimer;
	var testInlineReturningLambdaWithParametersAndTypeWithBodyTimer;
	var testImplicitNullFunctionReferenceTimer;
	var testExplicitNullFunctionReferenceTimer;
	var testNonNullFunctionReferenceTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing FirstClassFunctionStability"));
	testFunctionReturnedByFunctionTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testFunctionReturnedByFunction(out);
		(testFunctionReturnedByFunctionTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testFunctionReturnedByFunctionTimer, FirstClassFunctionStability._testFunctionReturnedByFunctionTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.06906019969092292);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testFunctionReturnedByFunctionTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testFunctionReturnedByFunctionTimer, FirstClassFunctionStability._testFunctionReturnedByFunctionTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testFunctionReturnedByInlineFunctionTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testFunctionReturnedByInlineFunction(out);
		(testFunctionReturnedByInlineFunctionTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testFunctionReturnedByInlineFunctionTimer, FirstClassFunctionStability._testFunctionReturnedByInlineFunctionTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.5935422918249531);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testFunctionReturnedByInlineFunctionTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testFunctionReturnedByInlineFunctionTimer, FirstClassFunctionStability._testFunctionReturnedByInlineFunctionTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testFunctionReturnedByInlineFunctionWithTypeSpecifiedTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testFunctionReturnedByInlineFunctionWithTypeSpecified(out);
		(testFunctionReturnedByInlineFunctionWithTypeSpecifiedTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testFunctionReturnedByInlineFunctionWithTypeSpecifiedTimer, FirstClassFunctionStability._testFunctionReturnedByInlineFunctionWithTypeSpecifiedTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.10774499920454028);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testFunctionReturnedByInlineFunctionWithTypeSpecifiedTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testFunctionReturnedByInlineFunctionWithTypeSpecifiedTimer, FirstClassFunctionStability._testFunctionReturnedByInlineFunctionWithTypeSpecifiedTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testCallingChainedFunctionReturnedByFunctionTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testCallingChainedFunctionReturnedByFunction(out);
		(testCallingChainedFunctionReturnedByFunctionTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testCallingChainedFunctionReturnedByFunctionTimer, FirstClassFunctionStability._testCallingChainedFunctionReturnedByFunctionTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.992148842564103);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testCallingChainedFunctionReturnedByFunctionTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testCallingChainedFunctionReturnedByFunctionTimer, FirstClassFunctionStability._testCallingChainedFunctionReturnedByFunctionTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testCallingAssignedChainFunctionTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testCallingAssignedChainFunction(out);
		(testCallingAssignedChainFunctionTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testCallingAssignedChainFunctionTimer, FirstClassFunctionStability._testCallingAssignedChainFunctionTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.6388365652481717);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testCallingAssignedChainFunctionTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testCallingAssignedChainFunctionTimer, FirstClassFunctionStability._testCallingAssignedChainFunctionTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testCallingChainedFunctionX3Timer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testCallingChainedFunctionX3(out);
		(testCallingChainedFunctionX3Timer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testCallingChainedFunctionX3Timer, FirstClassFunctionStability._testCallingChainedFunctionX3TestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8143671202296083);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testCallingChainedFunctionX3Timer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testCallingChainedFunctionX3Timer, FirstClassFunctionStability._testCallingChainedFunctionX3TestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testCallingChainedFunctionX4Timer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testCallingChainedFunctionX4(out);
		(testCallingChainedFunctionX4Timer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testCallingChainedFunctionX4Timer, FirstClassFunctionStability._testCallingChainedFunctionX4TestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.3192909090007964);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testCallingChainedFunctionX4Timer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testCallingChainedFunctionX4Timer, FirstClassFunctionStability._testCallingChainedFunctionX4TestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testCallingChainedFunctionX5Timer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testCallingChainedFunctionX5(out);
		(testCallingChainedFunctionX5Timer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testCallingChainedFunctionX5Timer, FirstClassFunctionStability._testCallingChainedFunctionX5TestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.9952424707762094);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testCallingChainedFunctionX5Timer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testCallingChainedFunctionX5Timer, FirstClassFunctionStability._testCallingChainedFunctionX5TestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testCallingChainedFunctionX6Timer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testCallingChainedFunctionX6(out);
		(testCallingChainedFunctionX6Timer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testCallingChainedFunctionX6Timer, FirstClassFunctionStability._testCallingChainedFunctionX6TestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.6014152406617655);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testCallingChainedFunctionX6Timer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testCallingChainedFunctionX6Timer, FirstClassFunctionStability._testCallingChainedFunctionX6TestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testSingleFunctionInArrayTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testSingleFunctionInArray(out);
		(testSingleFunctionInArrayTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testSingleFunctionInArrayTimer, FirstClassFunctionStability._testSingleFunctionInArrayTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7911161501808133);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testSingleFunctionInArrayTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testSingleFunctionInArrayTimer, FirstClassFunctionStability._testSingleFunctionInArrayTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testCallingFunctionFromCollectionTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testCallingFunctionFromCollection(out);
		(testCallingFunctionFromCollectionTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testCallingFunctionFromCollectionTimer, FirstClassFunctionStability._testCallingFunctionFromCollectionTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.21289456382221983);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testCallingFunctionFromCollectionTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testCallingFunctionFromCollectionTimer, FirstClassFunctionStability._testCallingFunctionFromCollectionTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testParameterlessLambdaVariableFunctionalityTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testParameterlessLambdaVariableFunctionality(out);
		(testParameterlessLambdaVariableFunctionalityTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testParameterlessLambdaVariableFunctionalityTimer, FirstClassFunctionStability._testParameterlessLambdaVariableFunctionalityTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.5719885993972548);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testParameterlessLambdaVariableFunctionalityTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testParameterlessLambdaVariableFunctionalityTimer, FirstClassFunctionStability._testParameterlessLambdaVariableFunctionalityTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testParameterlessLocalFunctionTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testParameterlessLocalFunction(out);
		(testParameterlessLocalFunctionTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testParameterlessLocalFunctionTimer, FirstClassFunctionStability._testParameterlessLocalFunctionTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.5608902266778371);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testParameterlessLocalFunctionTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testParameterlessLocalFunctionTimer, FirstClassFunctionStability._testParameterlessLocalFunctionTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testLambdaVariableWithParametersTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testLambdaVariableWithParameters(out);
		(testLambdaVariableWithParametersTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testLambdaVariableWithParametersTimer, FirstClassFunctionStability._testLambdaVariableWithParametersTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.10930731054258325);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testLambdaVariableWithParametersTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testLambdaVariableWithParametersTimer, FirstClassFunctionStability._testLambdaVariableWithParametersTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testLocalFunctionWithParametersTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testLocalFunctionWithParameters(out);
		(testLocalFunctionWithParametersTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testLocalFunctionWithParametersTimer, FirstClassFunctionStability._testLocalFunctionWithParametersTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.03624472088672093);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testLocalFunctionWithParametersTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testLocalFunctionWithParametersTimer, FirstClassFunctionStability._testLocalFunctionWithParametersTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testReturningLambdaTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testReturningLambda(out);
		(testReturningLambdaTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testReturningLambdaTimer, FirstClassFunctionStability._testReturningLambdaTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.9908627392855048);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testReturningLambdaTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testReturningLambdaTimer, FirstClassFunctionStability._testReturningLambdaTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testReturningLambdaWithParametersTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testReturningLambdaWithParameters(out);
		(testReturningLambdaWithParametersTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testReturningLambdaWithParametersTimer, FirstClassFunctionStability._testReturningLambdaWithParametersTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.15455501400074667);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testReturningLambdaWithParametersTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testReturningLambdaWithParametersTimer, FirstClassFunctionStability._testReturningLambdaWithParametersTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testInlineReturningLambdaTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testInlineReturningLambda(out);
		(testInlineReturningLambdaTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testInlineReturningLambdaTimer, FirstClassFunctionStability._testInlineReturningLambdaTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.13377427760194438);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testInlineReturningLambdaTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testInlineReturningLambdaTimer, FirstClassFunctionStability._testInlineReturningLambdaTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testInlineReturningLambdaWithParametersTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testInlineReturningLambdaWithParameters(out);
		(testInlineReturningLambdaWithParametersTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testInlineReturningLambdaWithParametersTimer, FirstClassFunctionStability._testInlineReturningLambdaWithParametersTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7007079132917742);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testInlineReturningLambdaWithParametersTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testInlineReturningLambdaWithParametersTimer, FirstClassFunctionStability._testInlineReturningLambdaWithParametersTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testInlineReturningLambdaWithParametersAndTypeTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testInlineReturningLambdaWithParametersAndType(out);
		(testInlineReturningLambdaWithParametersAndTypeTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testInlineReturningLambdaWithParametersAndTypeTimer, FirstClassFunctionStability._testInlineReturningLambdaWithParametersAndTypeTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8680164995810431);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testInlineReturningLambdaWithParametersAndTypeTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testInlineReturningLambdaWithParametersAndTypeTimer, FirstClassFunctionStability._testInlineReturningLambdaWithParametersAndTypeTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testInlineReturningLambdaWithParametersAndTypeWithBodyTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testInlineReturningLambdaWithParametersAndTypeWithBody(out);
		(testInlineReturningLambdaWithParametersAndTypeWithBodyTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testInlineReturningLambdaWithParametersAndTypeWithBodyTimer, FirstClassFunctionStability._testInlineReturningLambdaWithParametersAndTypeWithBodyTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.4574464353755012);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testInlineReturningLambdaWithParametersAndTypeWithBodyTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testInlineReturningLambdaWithParametersAndTypeWithBodyTimer, FirstClassFunctionStability._testInlineReturningLambdaWithParametersAndTypeWithBodyTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testImplicitNullFunctionReferenceTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testImplicitNullFunctionReference(out);
		(testImplicitNullFunctionReferenceTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testImplicitNullFunctionReferenceTimer, FirstClassFunctionStability._testImplicitNullFunctionReferenceTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.3056771950243241);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testImplicitNullFunctionReferenceTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testImplicitNullFunctionReferenceTimer, FirstClassFunctionStability._testImplicitNullFunctionReferenceTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testExplicitNullFunctionReferenceTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testExplicitNullFunctionReference(out);
		(testExplicitNullFunctionReferenceTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testExplicitNullFunctionReferenceTimer, FirstClassFunctionStability._testExplicitNullFunctionReferenceTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.0023171556658243553);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testExplicitNullFunctionReferenceTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testExplicitNullFunctionReferenceTimer, FirstClassFunctionStability._testExplicitNullFunctionReferenceTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testNonNullFunctionReferenceTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testNonNullFunctionReference(out);
		(testNonNullFunctionReferenceTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testNonNullFunctionReferenceTimer, FirstClassFunctionStability._testNonNullFunctionReferenceTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.2898770410214876);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testNonNullFunctionReferenceTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testNonNullFunctionReferenceTimer, FirstClassFunctionStability._testNonNullFunctionReferenceTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

FirstClassFunctionStability.init = function () {
	return this;
	
};

FirstClassFunctionStability.generated11 = function (value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	temp[2] = value2;
	temp[3] = value3;
	temp[4] = value4;
	temp[5] = value5;
	temp[6] = value6;
	temp[7] = value7;
	temp[8] = value8;
	temp[9] = value9;
	temp[10] = value10;
	temp[11] = value11;
	temp[12] = value12;
	temp[13] = value13;
	temp[14] = value14;
	temp[15] = value15;
	temp[16] = value16;
	temp[17] = value17;
	temp[18] = value18;
	temp[19] = value19;
	temp[20] = value20;
	temp[21] = value21;
	temp[22] = value22;
	temp[23] = value23;
	return novaConstructors.newArray1(temp, 24);
	
};

FirstClassFunctionStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/FirstClassFunctionStability"), false);
	
};

FirstClassFunctionStability.prototype.mutator__js_class = function () {
	
};

FirstClassFunctionStability.prototype.accessor_model = function () {
	return FirstClassFunctionStability._runTestsTestRunner;
	
};

FirstClassFunctionStability.prototype.mutator_model = function () {
	
};

FirstClassFunctionStability.prototype.super = function () {
	this.funcSwitch = false;
	this.bodyWorked = false;
	
};

novaConstructors.newFirstClassFunctionStability = function () {
	var __value = new FirstClassFunctionStability()
	NovaObject.call(__value);
	FirstClassFunctionStability.prototype.super.apply(__value, [].slice.call(arguments));
	return FirstClassFunctionStability.init.call(__value);
	
};

var InnerClassStability = function () {
	this._js_class = null;
	
	
};

InnerClassStability.prototype = Object.create(NovaObject.prototype);
InnerClassStability.prototype.constructor = InnerClassStability;


InnerClassStability.prototype.destroy = function () {
	
};

InnerClassStability.prototype.test = function (out) {
	var instance;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Checking inner classes "));
	instance = novaConstructors.newMyInner(3, 5);
	(Nest.expect65((instance || nova_null).x === 3 && (instance || nova_null).y === 5) || nova_null).toBe(true, novaConstructors.newString2("did not set values correctly"));
	
};

InnerClassStability.prototype.runTests = function (onResult, out) {
	var testTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing InnerClassStability"));
	testTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.test(out);
		(testTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testTimer, InnerClassStability._testTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.3972274145480259);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testTimer, InnerClassStability._testTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

InnerClassStability.init = function () {
	return this;
	
};

InnerClassStability.generated12 = function (value0) {
	var temp;
	temp = [];
	temp[0] = value0;
	return novaConstructors.newArray1(temp, 1);
	
};

InnerClassStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/InnerClassStability"), false);
	
};

InnerClassStability.prototype.mutator__js_class = function () {
	
};

InnerClassStability.prototype.accessor_model = function () {
	return InnerClassStability._runTestsTestRunner;
	
};

InnerClassStability.prototype.mutator_model = function () {
	
};

InnerClassStability.prototype.super = function () {
	
};

novaConstructors.newInnerClassStability = function () {
	var __value = new InnerClassStability()
	NovaObject.call(__value);
	InnerClassStability.prototype.super.apply(__value, [].slice.call(arguments));
	return InnerClassStability.init.call(__value);
	
};

var MyOuter = function () {
	
	
};

MyOuter.prototype = Object.create(NovaObject.prototype);
MyOuter.prototype.constructor = MyOuter;


MyOuter.prototype.destroy = function () {
	
};

MyOuter.prototype.test = function () {
	var instance;
	instance = novaConstructors.newMyInner(4, 6);
	
};

MyOuter.init = function () {
	return this;
	
};

MyOuter.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/InnerClassStability.MyOuter"), false);
	
};

MyOuter.prototype.mutator__js_class = function () {
	
};

MyOuter.prototype.super = function () {
	
};

novaConstructors.newMyOuter = function () {
	var __value = new MyOuter()
	NovaObject.call(__value);
	MyOuter.prototype.super.apply(__value, [].slice.call(arguments));
	return MyOuter.init.call(__value);
	
};

var MyInner = function () {
	this.y = 0;
	this.x = 0;
	
	
};

MyInner.prototype = Object.create(NovaObject.prototype);
MyInner.prototype.constructor = MyInner;


MyInner.prototype.destroy = function () {
	
};

MyInner.init = function (x, y) {
	this.x = x;
	this.y = y;
	return this;
	
};

MyInner.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/InnerClassStability.MyInner"), false);
	
};

MyInner.prototype.mutator__js_class = function () {
	
};

MyInner.prototype.super = function () {
	
};

novaConstructors.newMyInner = function (x, y) {
	var __value = new MyInner()
	NovaObject.call(__value);
	MyInner.prototype.super.apply(__value, [].slice.call(arguments));
	return MyInner.init.call(__value, x, y);
	
};

var IntervalStability = function () {
	this._js_class = null;
	
	
};

IntervalStability.prototype = Object.create(NovaObject.prototype);
IntervalStability.prototype.constructor = IntervalStability;


IntervalStability.prototype.destroy = function () {
	
};

IntervalStability.prototype.threeHourInterval = function (out) {
	var interval;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing threeHourInterval "));
	interval = novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 3, 27, 5), novaConstructors.newDateTime2(2017, 3, 27, 8));
	(Nest.expect66((interval || nova_null).accessor_days()) || nova_null).toBe(0, novaConstructors.newString2("Invalid days: ").plus0(NovaLong.toString((interval.accessor_days())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect67((interval || nova_null).accessor_hours()) || nova_null).toBe(3, novaConstructors.newString2("Invalid hours: ").plus0(NovaLong.toString((interval.accessor_hours())).plus0(novaConstructors.newString2(" != 3"))));
	(Nest.expect68((interval || nova_null).accessor_remainingHours()) || nova_null).toBe(3, novaConstructors.newString2("Invalid remainingHours: ").plus0(NovaInt.toString((interval.accessor_remainingHours())).plus0(novaConstructors.newString2(" != 3"))));
	(Nest.expect69((interval || nova_null).accessor_seconds()) || nova_null).toBe(3600 * 3, novaConstructors.newString2("Invalid seconds: ").plus0(NovaLong.toString((interval.accessor_seconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaShort.toString((3600 * 3)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect70((interval || nova_null).accessor_remainingSeconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remaining seconds: ").plus0(NovaInt.toString((interval.accessor_remainingSeconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect71((interval || nova_null).accessor_milliseconds()) || nova_null).toBe(3600 * 3 * 1000, novaConstructors.newString2("Invalid milliseconds: ").plus0(NovaLong.toString((interval.accessor_milliseconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaShort.toString((3600 * 3 * 1000)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect72((interval || nova_null).accessor_remainingMilliseconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMilliseconds: ").plus0(NovaInt.toString((interval.accessor_remainingMilliseconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect73((interval || nova_null).accessor_months()) || nova_null).toBe(0, novaConstructors.newString2("Invalid months: ").plus0(NovaInt.toString((interval.accessor_months())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect74((interval || nova_null).accessor_remainingMonths()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMonths: ").plus0(NovaInt.toString((interval.accessor_remainingMonths())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect75((interval || nova_null).accessor_years()) || nova_null).toBe(0, novaConstructors.newString2("Invalid years: ").plus0(NovaInt.toString((interval.accessor_years())).plus0(novaConstructors.newString2(" != 0"))));
	
};

IntervalStability.prototype.threeHourTwentyMinuteInterval = function (out) {
	var interval;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing threeHourTwentyMinuteInterval "));
	interval = novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 3, 27, 5, 10), novaConstructors.newDateTime2(2017, 3, 27, 8, 30));
	(Nest.expect76((interval || nova_null).accessor_days()) || nova_null).toBe(0, novaConstructors.newString2("Invalid days: ").plus0(NovaLong.toString((interval.accessor_days())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect77((interval || nova_null).accessor_hours()) || nova_null).toBe(3, novaConstructors.newString2("Invalid hours: ").plus0(NovaLong.toString((interval.accessor_hours())).plus0(novaConstructors.newString2(" != 3"))));
	(Nest.expect78((interval || nova_null).accessor_remainingHours()) || nova_null).toBe(3, novaConstructors.newString2("Invalid remainingHours: ").plus0(NovaInt.toString((interval.accessor_remainingHours())).plus0(novaConstructors.newString2(" != 3"))));
	(Nest.expect79((interval || nova_null).accessor_minutes()) || nova_null).toBe(20 + 60 * 3, novaConstructors.newString2("Invalid minutes: ").plus0(NovaLong.toString((interval.accessor_minutes())).plus0(novaConstructors.newString2(" != ").plus0(NovaByte.toString((20 + 60 * 3)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect80((interval || nova_null).accessor_remainingMinutes()) || nova_null).toBe(20, novaConstructors.newString2("Invalid remainingMinutes: ").plus0(NovaInt.toString((interval.accessor_remainingMinutes())).plus0(novaConstructors.newString2(" != 20"))));
	(Nest.expect81((interval || nova_null).accessor_seconds()) || nova_null).toBe(3600 * 3 + 20 * 60, novaConstructors.newString2("Invalid seconds: ").plus0(NovaLong.toString((interval.accessor_seconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaShort.toString((3600 * 3 + 20 * 60)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect82((interval || nova_null).accessor_remainingSeconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remaining seconds: ").plus0(NovaInt.toString((interval.accessor_remainingSeconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect83((interval || nova_null).accessor_milliseconds()) || nova_null).toBe((3600 * 3 + 20 * 60) * 1000, novaConstructors.newString2("Invalid milliseconds: ").plus0(NovaLong.toString((interval.accessor_milliseconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaShort.toString(((3600 * 3 + 20 * 60) * 1000)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect84((interval || nova_null).accessor_remainingMilliseconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMilliseconds: ").plus0(NovaInt.toString((interval.accessor_remainingMilliseconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect85((interval || nova_null).accessor_months()) || nova_null).toBe(0, novaConstructors.newString2("Invalid months: ").plus0(NovaInt.toString((interval.accessor_months())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect86((interval || nova_null).accessor_remainingMonths()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMonths: ").plus0(NovaInt.toString((interval.accessor_remainingMonths())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect87((interval || nova_null).accessor_years()) || nova_null).toBe(0, novaConstructors.newString2("Invalid years: ").plus0(NovaInt.toString((interval.accessor_years())).plus0(novaConstructors.newString2(" != 0"))));
	
};

IntervalStability.prototype.threeHourTwentyMinuteFifteenSecondInterval = function (out) {
	var interval;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing threeHourTwentyMinuteFifteenSecondInterval "));
	interval = novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 3, 27, 5, 10, 5), novaConstructors.newDateTime2(2017, 3, 27, 8, 30, 20));
	(Nest.expect88((interval || nova_null).accessor_days()) || nova_null).toBe(0, novaConstructors.newString2("Invalid days: ").plus0(NovaLong.toString((interval.accessor_days())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect89((interval || nova_null).accessor_hours()) || nova_null).toBe(3, novaConstructors.newString2("Invalid hours: ").plus0(NovaLong.toString((interval.accessor_hours())).plus0(novaConstructors.newString2(" != 3"))));
	(Nest.expect90((interval || nova_null).accessor_remainingHours()) || nova_null).toBe(3, novaConstructors.newString2("Invalid remainingHours: ").plus0(NovaInt.toString((interval.accessor_remainingHours())).plus0(novaConstructors.newString2(" != 3"))));
	(Nest.expect91((interval || nova_null).accessor_minutes()) || nova_null).toBe(20 + 60 * 3, novaConstructors.newString2("Invalid minutes: ").plus0(NovaLong.toString((interval.accessor_minutes())).plus0(novaConstructors.newString2(" != ").plus0(NovaByte.toString((20 + 60 * 3)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect92((interval || nova_null).accessor_remainingMinutes()) || nova_null).toBe(20, novaConstructors.newString2("Invalid remainingMinutes: ").plus0(NovaInt.toString((interval.accessor_remainingMinutes())).plus0(novaConstructors.newString2(" != 20"))));
	(Nest.expect93((interval || nova_null).accessor_seconds()) || nova_null).toBe(3600 * 3 + 20 * 60 + 15, novaConstructors.newString2("Invalid seconds: ").plus0(NovaLong.toString((interval.accessor_seconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaShort.toString((3600 * 3 + 20 * 60 + 15)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect94((interval || nova_null).accessor_remainingSeconds()) || nova_null).toBe(15, novaConstructors.newString2("Invalid remaining seconds: ").plus0(NovaInt.toString((interval.accessor_remainingSeconds())).plus0(novaConstructors.newString2(" != 15"))));
	(Nest.expect95((interval || nova_null).accessor_milliseconds()) || nova_null).toBe((3600 * 3 + 20 * 60 + 15) * 1000, novaConstructors.newString2("Invalid milliseconds: ").plus0(NovaLong.toString((interval.accessor_milliseconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaShort.toString(((3600 * 3 + 20 * 60 + 15) * 1000)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect96((interval || nova_null).accessor_remainingMilliseconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMilliseconds: ").plus0(NovaInt.toString((interval.accessor_remainingMilliseconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect97((interval || nova_null).accessor_months()) || nova_null).toBe(0, novaConstructors.newString2("Invalid months: ").plus0(NovaInt.toString((interval.accessor_months())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect98((interval || nova_null).accessor_remainingMonths()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMonths: ").plus0(NovaInt.toString((interval.accessor_remainingMonths())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect99((interval || nova_null).accessor_years()) || nova_null).toBe(0, novaConstructors.newString2("Invalid years: ").plus0(NovaInt.toString((interval.accessor_years())).plus0(novaConstructors.newString2(" != 0"))));
	
};

IntervalStability.prototype.threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondInterval = function (out) {
	var interval;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondInterval "));
	interval = novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 3, 27, 5, 10, 5, 79), novaConstructors.newDateTime2(2017, 3, 27, 8, 30, 20, 200));
	(Nest.expect100((interval || nova_null).accessor_days()) || nova_null).toBe(0, novaConstructors.newString2("Invalid days: ").plus0(NovaLong.toString((interval.accessor_days())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect101((interval || nova_null).accessor_hours()) || nova_null).toBe(3, novaConstructors.newString2("Invalid hours: ").plus0(NovaLong.toString((interval.accessor_hours())).plus0(novaConstructors.newString2(" != 3"))));
	(Nest.expect102((interval || nova_null).accessor_remainingHours()) || nova_null).toBe(3, novaConstructors.newString2("Invalid remainingHours: ").plus0(NovaInt.toString((interval.accessor_remainingHours())).plus0(novaConstructors.newString2(" != 3"))));
	(Nest.expect103((interval || nova_null).accessor_minutes()) || nova_null).toBe(20 + 60 * 3, novaConstructors.newString2("Invalid minutes: ").plus0(NovaLong.toString((interval.accessor_minutes())).plus0(novaConstructors.newString2(" != ").plus0(NovaByte.toString((20 + 60 * 3)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect104((interval || nova_null).accessor_remainingMinutes()) || nova_null).toBe(20, novaConstructors.newString2("Invalid remainingMinutes: ").plus0(NovaInt.toString((interval.accessor_remainingMinutes())).plus0(novaConstructors.newString2(" != 20"))));
	(Nest.expect105((interval || nova_null).accessor_seconds()) || nova_null).toBe(3600 * 3 + 20 * 60 + 15, novaConstructors.newString2("Invalid seconds: ").plus0(NovaLong.toString((interval.accessor_seconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaShort.toString((3600 * 3 + 20 * 60 + 15)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect106((interval || nova_null).accessor_remainingSeconds()) || nova_null).toBe(15, novaConstructors.newString2("Invalid remaining seconds: ").plus0(NovaInt.toString((interval.accessor_remainingSeconds())).plus0(novaConstructors.newString2(" != 15"))));
	(Nest.expect107((interval || nova_null).accessor_milliseconds()) || nova_null).toBe((3600 * 3 + 20 * 60 + 15) * 1000 + 121, novaConstructors.newString2("Invalid milliseconds: ").plus0(NovaLong.toString((interval.accessor_milliseconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaShort.toString(((3600 * 3 + 20 * 60 + 15) * 1000 + 121)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect108((interval || nova_null).accessor_remainingMilliseconds()) || nova_null).toBe(121, novaConstructors.newString2("Invalid remainingMilliseconds: ").plus0(NovaInt.toString((interval.accessor_remainingMilliseconds())).plus0(novaConstructors.newString2(" != 121"))));
	(Nest.expect109((interval || nova_null).accessor_months()) || nova_null).toBe(0, novaConstructors.newString2("Invalid months: ").plus0(NovaInt.toString((interval.accessor_months())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect110((interval || nova_null).accessor_remainingMonths()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMonths: ").plus0(NovaInt.toString((interval.accessor_remainingMonths())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect111((interval || nova_null).accessor_years()) || nova_null).toBe(0, novaConstructors.newString2("Invalid years: ").plus0(NovaInt.toString((interval.accessor_years())).plus0(novaConstructors.newString2(" != 0"))));
	
};

IntervalStability.prototype.oneDayInterval = function (out) {
	var oneDay;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing oneDayInterval "));
	oneDay = novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 3, 26), novaConstructors.newDateTime2(2017, 3, 27));
	(Nest.expect112((oneDay || nova_null).accessor_days()) || nova_null).toBe(1, novaConstructors.newString2("Invalid days: ").plus0(NovaLong.toString((oneDay.accessor_days())).plus0(novaConstructors.newString2(" != 1"))));
	(Nest.expect113((oneDay || nova_null).accessor_seconds()) || nova_null).toBe(86400, novaConstructors.newString2("Invalid seconds: ").plus0(NovaLong.toString((oneDay.accessor_seconds())).plus0(novaConstructors.newString2(" != 86400"))));
	(Nest.expect114((oneDay || nova_null).accessor_remainingSeconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remaining seconds: ").plus0(NovaInt.toString((oneDay.accessor_remainingSeconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect115((oneDay || nova_null).accessor_milliseconds()) || nova_null).toBe(86400 * 1000, novaConstructors.newString2("Invalid milliseconds: ").plus0(NovaLong.toString((oneDay.accessor_milliseconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaInt.toString((86400 * 1000)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect116((oneDay || nova_null).accessor_remainingMilliseconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMilliseconds: ").plus0(NovaInt.toString((oneDay.accessor_remainingMilliseconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect117((oneDay || nova_null).accessor_months()) || nova_null).toBe(0, novaConstructors.newString2("Invalid months: ").plus0(NovaInt.toString((oneDay.accessor_months())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect118((oneDay || nova_null).accessor_remainingMonths()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMonths: ").plus0(NovaInt.toString((oneDay.accessor_remainingMonths())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect119((oneDay || nova_null).accessor_years()) || nova_null).toBe(0, novaConstructors.newString2("Invalid years: ").plus0(NovaInt.toString((oneDay.accessor_years())).plus0(novaConstructors.newString2(" != 0"))));
	
};

IntervalStability.prototype.twoDayInterval = function (out) {
	var twoDays;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing twoDayInterval "));
	twoDays = novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 3, 26), novaConstructors.newDateTime2(2017, 3, 28));
	(Nest.expect120((twoDays || nova_null).accessor_days()) || nova_null).toBe(2, novaConstructors.newString2("Invalid days: ").plus0(NovaLong.toString((twoDays.accessor_days())).plus0(novaConstructors.newString2(" != 2"))));
	(Nest.expect121((twoDays || nova_null).accessor_seconds()) || nova_null).toBe(86400 * 2, novaConstructors.newString2("Invalid seconds: ").plus0(NovaLong.toString((twoDays.accessor_seconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaInt.toString((86400 * 2)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect122((twoDays || nova_null).accessor_remainingSeconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remaining seconds: ").plus0(NovaInt.toString((twoDays.accessor_remainingSeconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect123((twoDays || nova_null).accessor_milliseconds()) || nova_null).toBe(86400 * 2 * 1000, novaConstructors.newString2("Invalid milliseconds: ").plus0(NovaLong.toString((twoDays.accessor_milliseconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaInt.toString((86400 * 2 * 1000)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect124((twoDays || nova_null).accessor_remainingMilliseconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMilliseconds: ").plus0(NovaInt.toString((twoDays.accessor_remainingMilliseconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect125((twoDays || nova_null).accessor_months()) || nova_null).toBe(0, novaConstructors.newString2("Invalid months: ").plus0(NovaInt.toString((twoDays.accessor_months())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect126((twoDays || nova_null).accessor_remainingMonths()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMonths: ").plus0(NovaInt.toString((twoDays.accessor_remainingMonths())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect127((twoDays || nova_null).accessor_years()) || nova_null).toBe(0, novaConstructors.newString2("Invalid years: ").plus0(NovaInt.toString((twoDays.accessor_years())).plus0(novaConstructors.newString2(" != 0"))));
	
};

IntervalStability.prototype.twoAndAHalfDayInterval = function (out) {
	var interval;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing twoAndAHalfDayInterval "));
	interval = novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 3, 26), novaConstructors.newDateTime2(2017, 3, 28, 12));
	(Nest.expect128((interval || nova_null).accessor_days()) || nova_null).toBe(2, novaConstructors.newString2("Invalid days: ").plus0(NovaLong.toString((interval.accessor_days())).plus0(novaConstructors.newString2(" != 2"))));
	(Nest.expect129((interval || nova_null).accessor_seconds()) || nova_null).toBe((86400 * 2.5), novaConstructors.newString2("Invalid seconds: ").plus0(NovaLong.toString((interval.accessor_seconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaFloat.toString(((86400 * 2.5))).plus0(novaConstructors.newString2(""))))));
	(Nest.expect130((interval || nova_null).accessor_remainingSeconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remaining seconds: ").plus0(NovaInt.toString((interval.accessor_remainingSeconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect131((interval || nova_null).accessor_milliseconds()) || nova_null).toBe((86400 * 2.5 * 1000), novaConstructors.newString2("Invalid milliseconds: ").plus0(NovaLong.toString((interval.accessor_milliseconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaFloat.toString(((86400 * 2.5 * 1000))).plus0(novaConstructors.newString2(""))))));
	(Nest.expect132((interval || nova_null).accessor_remainingMilliseconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMilliseconds: ").plus0(NovaInt.toString((interval.accessor_remainingMilliseconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect133((interval || nova_null).accessor_months()) || nova_null).toBe(0, novaConstructors.newString2("Invalid months: ").plus0(NovaInt.toString((interval.accessor_months())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect134((interval || nova_null).accessor_remainingMonths()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMonths: ").plus0(NovaInt.toString((interval.accessor_remainingMonths())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect135((interval || nova_null).accessor_years()) || nova_null).toBe(0, novaConstructors.newString2("Invalid years: ").plus0(NovaInt.toString((interval.accessor_years())).plus0(novaConstructors.newString2(" != 0"))));
	
};

IntervalStability.prototype.twoMonthInterval = function (out) {
	var interval;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing twoMonthInterval "));
	interval = novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 3, 26), novaConstructors.newDateTime2(2017, 5, 28));
	(Nest.expect136((interval || nova_null).accessor_days()) || nova_null).toBe(63, novaConstructors.newString2("Invalid days: ").plus0(NovaLong.toString((interval.accessor_days())).plus0(novaConstructors.newString2(" != 63"))));
	(Nest.expect137((interval || nova_null).accessor_seconds()) || nova_null).toBe(86400 * 63, novaConstructors.newString2("Invalid seconds: ").plus0(NovaLong.toString((interval.accessor_seconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaInt.toString((86400 * 63)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect138((interval || nova_null).accessor_remainingSeconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remaining seconds: ").plus0(NovaInt.toString((interval.accessor_remainingSeconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect139((interval || nova_null).accessor_milliseconds()) || nova_null).toBe(86400 * 63 * 1000, novaConstructors.newString2("Invalid milliseconds: ").plus0(NovaLong.toString((interval.accessor_milliseconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaLong.toString((86400 * 63 * 1000)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect140((interval || nova_null).accessor_remainingMilliseconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMilliseconds: ").plus0(NovaInt.toString((interval.accessor_remainingMilliseconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect141((interval || nova_null).accessor_months()) || nova_null).toBe(2, novaConstructors.newString2("Invalid months: ").plus0(NovaInt.toString((interval.accessor_months())).plus0(novaConstructors.newString2(" != 2"))));
	(Nest.expect142((interval || nova_null).accessor_remainingMonths()) || nova_null).toBe(2, novaConstructors.newString2("Invalid remainingMonths: ").plus0(NovaInt.toString((interval.accessor_remainingMonths())).plus0(novaConstructors.newString2(" != 2"))));
	(Nest.expect143((interval || nova_null).accessor_years()) || nova_null).toBe(0, novaConstructors.newString2("Invalid years: ").plus0(NovaInt.toString((interval.accessor_years())).plus0(novaConstructors.newString2(" != 0"))));
	
};

IntervalStability.prototype.oneYearInterval = function (out) {
	var interval;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing oneYearInterval "));
	interval = novaConstructors.newInterval(novaConstructors.newDateTime2(2016, 3, 26), novaConstructors.newDateTime2(2017, 3, 26));
	(Nest.expect144((interval || nova_null).accessor_days()) || nova_null).toBe(365, novaConstructors.newString2("Invalid days: ").plus0(NovaLong.toString((interval.accessor_days())).plus0(novaConstructors.newString2(" != 365"))));
	(Nest.expect145((interval || nova_null).accessor_seconds()) || nova_null).toBe(86400 * 365, novaConstructors.newString2("Invalid seconds: ").plus0(NovaLong.toString((interval.accessor_seconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaInt.toString((86400 * 365)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect146((interval || nova_null).accessor_remainingSeconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remaining seconds: ").plus0(NovaInt.toString((interval.accessor_remainingSeconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect147((interval || nova_null).accessor_milliseconds()) || nova_null).toBe(86400 * 365 * 1000, novaConstructors.newString2("Invalid milliseconds: ").plus0(NovaLong.toString((interval.accessor_milliseconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaLong.toString((86400 * 365 * 1000)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect148((interval || nova_null).accessor_remainingMilliseconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMilliseconds: ").plus0(NovaInt.toString((interval.accessor_remainingMilliseconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect149((interval || nova_null).accessor_months()) || nova_null).toBe(12, novaConstructors.newString2("Invalid months: ").plus0(NovaInt.toString((interval.accessor_months())).plus0(novaConstructors.newString2(" != 12"))));
	(Nest.expect150((interval || nova_null).accessor_remainingMonths()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMonths: ").plus0(NovaInt.toString((interval.accessor_remainingMonths())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect151((interval || nova_null).accessor_years()) || nova_null).toBe(1, novaConstructors.newString2("Invalid years: ").plus0(NovaInt.toString((interval.accessor_years())).plus0(novaConstructors.newString2(" != 1"))));
	
};

IntervalStability.prototype.twoAndAHalfYearInterval = function (out) {
	var interval;
	var days;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing twoAndAHalfYearInterval "));
	interval = novaConstructors.newInterval(novaConstructors.newDateTime2(2015, 3, 26), novaConstructors.newDateTime2(2017, 9, 26));
	days = 6 + 275 + 366 + 273 - 5;
	(Nest.expect152((interval || nova_null).accessor_days()) || nova_null).toBe(days, novaConstructors.newString2("Invalid days: ").plus0(NovaLong.toString((interval.accessor_days())).plus0(novaConstructors.newString2(" != ").plus0(NovaInt.toString((days)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect153((interval || nova_null).accessor_seconds()) || nova_null).toBe(86400 * days, novaConstructors.newString2("Invalid seconds: ").plus0(NovaLong.toString((interval.accessor_seconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaInt.toString((86400 * days)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect154((interval || nova_null).accessor_remainingSeconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remaining seconds: ").plus0(NovaInt.toString((interval.accessor_remainingSeconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect155((interval || nova_null).accessor_milliseconds()) || nova_null).toBe(86400 * days * 1000, novaConstructors.newString2("Invalid milliseconds: ").plus0(NovaLong.toString((interval.accessor_milliseconds())).plus0(novaConstructors.newString2(" != ").plus0(NovaLong.toString((86400 * days * 1000)).plus0(novaConstructors.newString2(""))))));
	(Nest.expect156((interval || nova_null).accessor_remainingMilliseconds()) || nova_null).toBe(0, novaConstructors.newString2("Invalid remainingMilliseconds: ").plus0(NovaInt.toString((interval.accessor_remainingMilliseconds())).plus0(novaConstructors.newString2(" != 0"))));
	(Nest.expect157((interval || nova_null).accessor_months()) || nova_null).toBe(30, novaConstructors.newString2("Invalid months: ").plus0(NovaInt.toString((interval.accessor_months())).plus0(novaConstructors.newString2(" != 30"))));
	(Nest.expect158((interval || nova_null).accessor_remainingMonths()) || nova_null).toBe(6, novaConstructors.newString2("Invalid remainingMonths: ").plus0(NovaInt.toString((interval.accessor_remainingMonths())).plus0(novaConstructors.newString2(" != 6"))));
	(Nest.expect159((interval || nova_null).accessor_years()) || nova_null).toBe(2, novaConstructors.newString2("Invalid years: ").plus0(NovaInt.toString((interval.accessor_years())).plus0(novaConstructors.newString2(" != 2"))));
	
};

IntervalStability.prototype.invalidIntervalGap = function (out) {
	var self = this;
	
	var interval1;
	var interval2;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing invalidIntervalGap "));
	interval1 = novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 4, 10), novaConstructors.newDateTime2(2018, 4, 10));
	interval2 = novaConstructors.newInterval(novaConstructors.newDateTime2(2015, 4, 10), novaConstructors.newDateTime2(2019, 4, 10));
	(Nest.expect1(() => {
				(interval1 || nova_null).getGap(interval2);
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.NoGapException"), false));
	
};

IntervalStability.prototype.validIntervalGap = function (out) {
	var self = this;
	
	var interval1;
	var interval2;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing validIntervalGap "));
	interval1 = novaConstructors.newInterval(novaConstructors.newDateTime2(2017, 4, 10), novaConstructors.newDateTime2(2018, 4, 10));
	interval2 = novaConstructors.newInterval(novaConstructors.newDateTime2(2015, 4, 10), novaConstructors.newDateTime2(2016, 4, 10));
	(Nest.expect1(() => {
				(interval1 || nova_null).getGap(interval2);
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.NoGapException"), false));
	
};

IntervalStability.prototype.runTests = function (onResult, out) {
	var threeHourIntervalTimer;
	var threeHourTwentyMinuteIntervalTimer;
	var threeHourTwentyMinuteFifteenSecondIntervalTimer;
	var threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondIntervalTimer;
	var oneDayIntervalTimer;
	var twoDayIntervalTimer;
	var twoAndAHalfDayIntervalTimer;
	var twoMonthIntervalTimer;
	var oneYearIntervalTimer;
	var twoAndAHalfYearIntervalTimer;
	var invalidIntervalGapTimer;
	var validIntervalGapTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing IntervalStability"));
	threeHourIntervalTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.threeHourInterval(out);
		(threeHourIntervalTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, threeHourIntervalTimer, IntervalStability._threeHourIntervalTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.9923708413006592);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(threeHourIntervalTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, threeHourIntervalTimer, IntervalStability._threeHourIntervalTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	threeHourTwentyMinuteIntervalTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.threeHourTwentyMinuteInterval(out);
		(threeHourTwentyMinuteIntervalTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, threeHourTwentyMinuteIntervalTimer, IntervalStability._threeHourTwentyMinuteIntervalTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.20772909668597883);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(threeHourTwentyMinuteIntervalTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, threeHourTwentyMinuteIntervalTimer, IntervalStability._threeHourTwentyMinuteIntervalTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	threeHourTwentyMinuteFifteenSecondIntervalTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.threeHourTwentyMinuteFifteenSecondInterval(out);
		(threeHourTwentyMinuteFifteenSecondIntervalTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, threeHourTwentyMinuteFifteenSecondIntervalTimer, IntervalStability._threeHourTwentyMinuteFifteenSecondIntervalTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.5762655720726233);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(threeHourTwentyMinuteFifteenSecondIntervalTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, threeHourTwentyMinuteFifteenSecondIntervalTimer, IntervalStability._threeHourTwentyMinuteFifteenSecondIntervalTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondIntervalTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondInterval(out);
		(threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondIntervalTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondIntervalTimer, IntervalStability._threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondIntervalTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.1525834615979177);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondIntervalTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondIntervalTimer, IntervalStability._threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondIntervalTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	oneDayIntervalTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.oneDayInterval(out);
		(oneDayIntervalTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, oneDayIntervalTimer, IntervalStability._oneDayIntervalTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.40163507623774086);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(oneDayIntervalTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, oneDayIntervalTimer, IntervalStability._oneDayIntervalTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	twoDayIntervalTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.twoDayInterval(out);
		(twoDayIntervalTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, twoDayIntervalTimer, IntervalStability._twoDayIntervalTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.16631270809017384);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(twoDayIntervalTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, twoDayIntervalTimer, IntervalStability._twoDayIntervalTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	twoAndAHalfDayIntervalTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.twoAndAHalfDayInterval(out);
		(twoAndAHalfDayIntervalTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, twoAndAHalfDayIntervalTimer, IntervalStability._twoAndAHalfDayIntervalTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.18430969064535063);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(twoAndAHalfDayIntervalTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, twoAndAHalfDayIntervalTimer, IntervalStability._twoAndAHalfDayIntervalTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	twoMonthIntervalTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.twoMonthInterval(out);
		(twoMonthIntervalTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, twoMonthIntervalTimer, IntervalStability._twoMonthIntervalTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7670971054093443);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(twoMonthIntervalTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, twoMonthIntervalTimer, IntervalStability._twoMonthIntervalTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	oneYearIntervalTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.oneYearInterval(out);
		(oneYearIntervalTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, oneYearIntervalTimer, IntervalStability._oneYearIntervalTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7446248671421881);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(oneYearIntervalTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, oneYearIntervalTimer, IntervalStability._oneYearIntervalTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	twoAndAHalfYearIntervalTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.twoAndAHalfYearInterval(out);
		(twoAndAHalfYearIntervalTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, twoAndAHalfYearIntervalTimer, IntervalStability._twoAndAHalfYearIntervalTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.2589469422471995);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(twoAndAHalfYearIntervalTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, twoAndAHalfYearIntervalTimer, IntervalStability._twoAndAHalfYearIntervalTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	invalidIntervalGapTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.invalidIntervalGap(out);
		(invalidIntervalGapTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, invalidIntervalGapTimer, IntervalStability._invalidIntervalGapTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.441900758511253);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(invalidIntervalGapTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, invalidIntervalGapTimer, IntervalStability._invalidIntervalGapTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	validIntervalGapTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.validIntervalGap(out);
		(validIntervalGapTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, validIntervalGapTimer, IntervalStability._validIntervalGapTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.5006035331494922);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(validIntervalGapTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, validIntervalGapTimer, IntervalStability._validIntervalGapTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

IntervalStability.init = function () {
	return this;
	
};

IntervalStability.generated13 = function (value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	temp[2] = value2;
	temp[3] = value3;
	temp[4] = value4;
	temp[5] = value5;
	temp[6] = value6;
	temp[7] = value7;
	temp[8] = value8;
	temp[9] = value9;
	temp[10] = value10;
	temp[11] = value11;
	return novaConstructors.newArray1(temp, 12);
	
};

IntervalStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/IntervalStability"), false);
	
};

IntervalStability.prototype.mutator__js_class = function () {
	
};

IntervalStability.prototype.accessor_model = function () {
	return IntervalStability._runTestsTestRunner;
	
};

IntervalStability.prototype.mutator_model = function () {
	
};

IntervalStability.prototype.super = function () {
	
};

novaConstructors.newIntervalStability = function () {
	var __value = new IntervalStability()
	NovaObject.call(__value);
	IntervalStability.prototype.super.apply(__value, [].slice.call(arguments));
	return IntervalStability.init.call(__value);
	
};

var LambdaStability = function () {
	this._js_class = null;
	
	
};

LambdaStability.prototype = Object.create(NovaObject.prototype);
LambdaStability.prototype.constructor = LambdaStability;


LambdaStability.prototype.destroy = function () {
	
};

LambdaStability.prototype.testLambdas = function (out) {
	var self = this;
	
	var list;
	var list2;
	var mappedOutput;
	var mappedExpected;
	var linked;
	var repeated;
	var nova_local_0;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing lambdas "));
	list = this.generated44();
	list2 = this.generated45();
	mappedOutput = (((list || nova_null).filter0((x, _2, _3) => {
					return (x || nova_null).count >= 4;
					
		}) || nova_null).map0((x, i, _3) => {
				return NovaInt.toString(i).plus0(novaConstructors.newString2(": ").plus0((x || nova_null).plus0(novaConstructors.newString2("?"))));
				
	}) || nova_null).join(novaConstructors.newString2(", "));
	mappedExpected = novaConstructors.newString2("0: this?, 1: test?, 2: what shows up?");
	(Nest.expect160((mappedOutput || nova_null).equals0(mappedExpected)) || nova_null).toBe(true, novaConstructors.newString2("Failed first list map with 2 args. Expected '").plus0(((mappedExpected) || nova_null).plus0(novaConstructors.newString2("' but received '").plus0(((mappedOutput) || nova_null).plus0(novaConstructors.newString2("'"))))));
	linked = novaConstructors.newLinkedList();
	(((linked || nova_null).add(novaConstructors.newString2("test")) || nova_null).add(novaConstructors.newString2("test2")) || nova_null).add(novaConstructors.newString2("test3"));
	(Nest.expect161((((linked || nova_null).reverse() || nova_null).join(novaConstructors.newString2(", ")) || nova_null).equals0(novaConstructors.newString2("test3, test2, test"))) || nova_null).toBe(true, novaConstructors.newString2("Failed reverse linked list"));
	(Nest.expect162(((linked || nova_null).join(novaConstructors.newString2(", ")) || nova_null).equals0(novaConstructors.newString2("test, test2, test3"))) || nova_null).toBe(true, novaConstructors.newString2("Failed forward linked list"));
	repeated = (list || nova_null).map0((_1, _2, _3) => {
			return novaConstructors.newString2("test");
			
	});
	nova_local_0 = ((repeated) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		item = (nova_local_0 || nova_null).accessor_next();
		(Nest.expect163((item || nova_null).equals0(novaConstructors.newString2("test"))) || nova_null).toBe(true, novaConstructors.newString2("Map with no arguments failed"));
	}
	
};

LambdaStability.prototype.runTests = function (onResult, out) {
	var testLambdasTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing LambdaStability"));
	testLambdasTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testLambdas(out);
		(testLambdasTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testLambdasTimer, LambdaStability._testLambdasTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7859974092496951);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testLambdasTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testLambdasTimer, LambdaStability._testLambdasTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

LambdaStability.init = function () {
	return this;
	
};

LambdaStability.generated14 = function (value0) {
	var temp;
	temp = [];
	temp[0] = value0;
	return novaConstructors.newArray1(temp, 1);
	
};

LambdaStability.prototype.generated44 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("this");
	temp[1] = novaConstructors.newString2("is");
	temp[2] = novaConstructors.newString2("a");
	temp[3] = novaConstructors.newString2("test");
	temp[4] = novaConstructors.newString2("to");
	temp[5] = novaConstructors.newString2("see");
	temp[6] = novaConstructors.newString2("what shows up");
	return novaConstructors.newArray1(temp, 7);
	
};

LambdaStability.prototype.generated45 = function () {
	var temp;
	temp = [];
	temp[0] = 1;
	temp[1] = 2;
	temp[2] = 3;
	temp[3] = 4;
	temp[4] = 5;
	temp[5] = 6;
	temp[6] = 7;
	return novaConstructors.newArray1Int1(temp, 7);
	
};

LambdaStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/LambdaStability"), false);
	
};

LambdaStability.prototype.mutator__js_class = function () {
	
};

LambdaStability.prototype.accessor_model = function () {
	return LambdaStability._runTestsTestRunner;
	
};

LambdaStability.prototype.mutator_model = function () {
	
};

LambdaStability.prototype.super = function () {
	
};

novaConstructors.newLambdaStability = function () {
	var __value = new LambdaStability()
	NovaObject.call(__value);
	LambdaStability.prototype.super.apply(__value, [].slice.call(arguments));
	return LambdaStability.init.call(__value);
	
};

var LibraryLoadingStability = function () {
	this._js_class = null;
	
	
};

LibraryLoadingStability.prototype = Object.create(NovaObject.prototype);
LibraryLoadingStability.prototype.constructor = LibraryLoadingStability;


LibraryLoadingStability.prototype.destroy = function () {
	
};

LibraryLoadingStability.prototype.runTests = function (onResult, out) {
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing LibraryLoadingStability"));
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

LibraryLoadingStability.init = function () {
	return this;
	
};

LibraryLoadingStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/LibraryLoadingStability"), false);
	
};

LibraryLoadingStability.prototype.mutator__js_class = function () {
	
};

LibraryLoadingStability.prototype.accessor_model = function () {
	return LibraryLoadingStability._runTestsTestRunner;
	
};

LibraryLoadingStability.prototype.mutator_model = function () {
	
};

LibraryLoadingStability.prototype.super = function () {
	
};

novaConstructors.newLibraryLoadingStability = function () {
	var __value = new LibraryLoadingStability()
	NovaObject.call(__value);
	LibraryLoadingStability.prototype.super.apply(__value, [].slice.call(arguments));
	return LibraryLoadingStability.init.call(__value);
	
};

var NetworkStability = function () {
	
	
};

NetworkStability.prototype = Object.create(NovaObject.prototype);
NetworkStability.prototype.constructor = NetworkStability;


NetworkStability.prototype.destroy = function () {
	
};

NetworkStability.prototype.createServer = function (out) {
	var socket;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing creating a ServerSocket "));
	socket = novaConstructors.newServerSocket();
	(Nest.expect0((socket || nova_null).start(NetworkStability.PORT)) || nova_null).toNotBe(null, novaConstructors.newString2("Unable to start server on port ").plus0(NovaInt.toString((NetworkStability.PORT)).plus0(novaConstructors.newString2(""))));
	(Nest.expect164((socket || nova_null).close()) || nova_null).toBe(true, novaConstructors.newString2("Failed to close server socket on port ").plus0(NovaInt.toString((NetworkStability.PORT)).plus0(novaConstructors.newString2(""))));
	
};

NetworkStability.prototype.test = function (out) {
	var server;
	var thread;
	var connection;
	var s;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).writeLine(novaConstructors.newString2("Testing network stability"));
	server = novaConstructors.newServerSocket().start(NetworkStability.PORT);
	thread = novaConstructors.newClientThread(NetworkStability.PORT, out);
	(thread || nova_null).start();
	(out || nova_null).writeLine(novaConstructors.newString2("Accepting ClientSocket connection"));
	connection = (server || nova_null).acceptClient();
	(Nest.expect0(connection) || nova_null).toNotBe(null, novaConstructors.newString2("Failed to accept the client"));
	(out || nova_null).writeLine(novaConstructors.newString2("Sending String to ClientSocket..."));
	(Nest.expect0(((connection || nova_null).out || nova_null).write(NetworkStability.received)) || nova_null).toNotBe(null, novaConstructors.newString2("Server unable to send data to client"));
	(out || nova_null).writeLine(novaConstructors.newString2("Waiting for String from ClientSocket..."));
	s = ((connection || nova_null).in || nova_null).readString();
	(Nest.expect165((s || nova_null).count === (NetworkStability.received || nova_null).count && (s || nova_null).equals0(NetworkStability.received)) || nova_null).toBe(true, novaConstructors.newString2("Server unable to receive correct message from client. Expected message of size ").plus0(NovaInt.toString((NetworkStability.received.count)).plus0(novaConstructors.newString2(", but received of size ").plus0(NovaInt.toString((s.count)).plus0(novaConstructors.newString2(""))))));
	(thread || nova_null).join();
	(out || nova_null).write(novaConstructors.newString2("Attempting to close ServerSocket connection... "));
	(Nest.expect166((server || nova_null).close()) || nova_null).toBe(true, novaConstructors.newString2("Unable to close server"));
	(out || nova_null).writeLine(novaConstructors.newString2("Success"));
	
};

NetworkStability.prototype.runTests = function (onResult, out) {
	var createServerTimer;
	var testTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing NetworkStability"));
	createServerTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.createServer(out);
		(createServerTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, createServerTimer, NetworkStability._createServerTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.1747691462873351);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(createServerTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, createServerTimer, NetworkStability._createServerTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.test(out);
		(testTimer || nova_null).stop();
		testResult = novaConstructors.newTestResult(true, testTimer, NetworkStability._testTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7691740163087429);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testTimer || nova_null).stop();
			testResult = novaConstructors.newTestResult(false, testTimer, NetworkStability._testTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

NetworkStability.init = function () {
	return this;
	
};

NetworkStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/NetworkStability"), false);
	
};

NetworkStability.prototype.mutator__js_class = function () {
	
};

NetworkStability.prototype.super = function () {
	
};

novaConstructors.newNetworkStability = function () {
	var __value = new NetworkStability()
	NovaObject.call(__value);
	NetworkStability.prototype.super.apply(__value, [].slice.call(arguments));
	return NetworkStability.init.call(__value);
	
};

var Node = function () {
	this.child = null;
	this.value = 0;
	
	
};

Node.prototype = Object.create(NovaObject.prototype);
Node.prototype.constructor = Node;


Node.prototype.destroy = function () {
	
};

Node.init = function () {
	return this;
	
};

Node.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/Node"), false);
	
};

Node.prototype.mutator__js_class = function () {
	
};

Node.prototype.super = function () {
	
};

novaConstructors.newNode = function () {
	var __value = new Node()
	NovaObject.call(__value);
	Node.prototype.super.apply(__value, [].slice.call(arguments));
	return Node.init.call(__value);
	
};

var PolymorphicSuperClass = function () {
	this.child = null;
	this._js_class = null;
	
	
};

PolymorphicSuperClass.prototype = Object.create(NovaObject.prototype);
PolymorphicSuperClass.prototype.constructor = PolymorphicSuperClass;


PolymorphicSuperClass.prototype.destroy = function () {
	
};

PolymorphicSuperClass.prototype.giveBirth = function () {
	return this.child = novaConstructors.newPolymorphicSubClass();
	
};

PolymorphicSuperClass.prototype.toString = function () {
	return novaConstructors.newString2("super class");
	
};

PolymorphicSuperClass.init = function () {
	return this;
	
};

PolymorphicSuperClass.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/PolymorphicSuperClass"), false);
	
};

PolymorphicSuperClass.prototype.mutator__js_class = function () {
	
};

PolymorphicSuperClass.prototype.accessor_myProperty = function () {
	return 1;
	
};

PolymorphicSuperClass.prototype.mutator_myProperty = function () {
	
};

PolymorphicSuperClass.prototype.super = function () {
	
};

novaConstructors.newPolymorphicSuperClass = function () {
	var __value = new PolymorphicSuperClass()
	NovaObject.call(__value);
	PolymorphicSuperClass.prototype.super.apply(__value, [].slice.call(arguments));
	return PolymorphicSuperClass.init.call(__value);
	
};

var PolymorphicSubClass = function () {
	this._js_class = null;
	
	
};

PolymorphicSubClass.prototype = Object.create(PolymorphicSuperClass.prototype);
PolymorphicSubClass.prototype.constructor = PolymorphicSubClass;


PolymorphicSubClass.prototype.destroy = function () {
	
};

PolymorphicSubClass.prototype.toString = function () {
	return novaConstructors.newString2("sub class");
	
};

PolymorphicSubClass.init = function () {
	return this;
	
};

PolymorphicSubClass.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/PolymorphicSubClass"), false);
	
};

PolymorphicSubClass.prototype.mutator__js_class = function () {
	
};

PolymorphicSubClass.prototype.accessor_myProperty = function () {
	return 2;
	
};

PolymorphicSubClass.prototype.mutator_myProperty = function () {
	
};

PolymorphicSubClass.prototype.super = function () {
	
};

novaConstructors.newPolymorphicSubClass = function () {
	var __value = new PolymorphicSubClass()
	PolymorphicSuperClass.call(__value);
	PolymorphicSubClass.prototype.super.apply(__value, [].slice.call(arguments));
	return PolymorphicSubClass.init.call(__value);
	
};

var PolymorphismStability = function () {
	this._js_class = null;
	
	
};

PolymorphismStability.prototype = Object.create(NovaObject.prototype);
PolymorphismStability.prototype.constructor = PolymorphismStability;


PolymorphismStability.prototype.destroy = function () {
	
};

PolymorphismStability.prototype.testCalls = function (out) {
	var obj1;
	var obj2;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing polymorphic method calls "));
	obj1 = novaConstructors.newPolymorphicSuperClass();
	obj2 = novaConstructors.newPolymorphicSubClass();
	(Nest.expect167(PolymorphismStability.testSubCall(obj2)) || nova_null).toBe(true, novaConstructors.newString2("Did not call sub class method"));
	
};

PolymorphismStability.testSubCall = function (obj) {
	return ((obj || nova_null).toString() || nova_null).equals0(novaConstructors.newString2("sub class"));
	
};

PolymorphismStability.prototype.testClosure = function (out) {
	var obj;
	var child;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing polymorphic closure method calls "));
	obj = novaConstructors.newPolymorphicSubClass();
	(Nest.expect168(PolymorphismStability.callPolymorphicClosure(function () { var self = obj; return self.toString.call(self); })) || nova_null).toBe(true, novaConstructors.newString2("Did not call sub class method as closure"));
	(obj || nova_null).giveBirth();
	child = (((obj || nova_null).child || nova_null).toString() || nova_null).plus0(novaConstructors.newString2("!"));
	(Nest.expect169(PolymorphismStability.callPolymorphicClosure(function () { var self = obj.child; return self.toString.call(self); })) || nova_null).toBe(true, novaConstructors.newString2("Did not call sub class method as closure"));
	
};

PolymorphismStability.callPolymorphicClosure = function (closure) {
	return (closure() || nova_null).equals0(novaConstructors.newString2("sub class"));
	
};

PolymorphismStability.prototype.testProperty = function (out) {
	var obj1;
	var obj2;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing polymorphic properties "));
	obj1 = novaConstructors.newPolymorphicSuperClass();
	obj2 = novaConstructors.newPolymorphicSubClass();
	(Nest.expect170((obj1 || nova_null).accessor_myProperty() === 1) || nova_null).toBe(true, novaConstructors.newString2("Did not call super polymorphic property accessor correctly"));
	(Nest.expect171((obj2 || nova_null).accessor_myProperty() === 2) || nova_null).toBe(true, novaConstructors.newString2("Did not call sub polymorphic property accessor correctly"));
	
};

PolymorphismStability.prototype.runTests = function (onResult, out) {
	var testCallsTimer;
	var testClosureTimer;
	var testPropertyTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing PolymorphismStability"));
	testCallsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testCalls(out);
		(testCallsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testCallsTimer, PolymorphismStability._testCallsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7613195086592323);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testCallsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testCallsTimer, PolymorphismStability._testCallsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testClosureTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testClosure(out);
		(testClosureTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testClosureTimer, PolymorphismStability._testClosureTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.1550268353461629);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testClosureTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testClosureTimer, PolymorphismStability._testClosureTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testPropertyTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testProperty(out);
		(testPropertyTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testPropertyTimer, PolymorphismStability._testPropertyTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7190289895307449);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testPropertyTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testPropertyTimer, PolymorphismStability._testPropertyTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

PolymorphismStability.init = function () {
	return this;
	
};

PolymorphismStability.generated15 = function (value0, value1, value2) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	temp[2] = value2;
	return novaConstructors.newArray1(temp, 3);
	
};

PolymorphismStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/PolymorphismStability"), false);
	
};

PolymorphismStability.prototype.mutator__js_class = function () {
	
};

PolymorphismStability.prototype.accessor_model = function () {
	return PolymorphismStability._runTestsTestRunner;
	
};

PolymorphismStability.prototype.mutator_model = function () {
	
};

PolymorphismStability.prototype.super = function () {
	
};

novaConstructors.newPolymorphismStability = function () {
	var __value = new PolymorphismStability()
	NovaObject.call(__value);
	PolymorphismStability.prototype.super.apply(__value, [].slice.call(arguments));
	return PolymorphismStability.init.call(__value);
	
};

var PrimitiveOverloadStability = function () {
	this._js_class = null;
	
	
};

PrimitiveOverloadStability.prototype = Object.create(NovaObject.prototype);
PrimitiveOverloadStability.prototype.constructor = PrimitiveOverloadStability;


PrimitiveOverloadStability.prototype.destroy = function () {
	
};

PrimitiveOverloadStability.prototype.test = function (out) {
	var map1;
	var sum;
	var counter;
	var nova_local_0;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing primitive key for HashMap<Int, String> "));
	map1 = novaConstructors.newHashMap1Int0();
	(map1 || nova_null).set(5, novaConstructors.newString2("test"));
	(map1 || nova_null).set(10, novaConstructors.newString2("test2"));
	sum = 0;
	counter = 0;
	nova_local_0 = ((map1) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		entry = (nova_local_0 || nova_null).accessor_next();
		sum += (entry || nova_null).key;
		counter++;
	}
	(Nest.expect172(counter === 2) || nova_null).toBe(true, novaConstructors.newString2("Failed to iterator over map values. Expected counter value of 2, but got ").plus0(NovaInt.toString((counter)).plus0(novaConstructors.newString2(""))));
	(Nest.expect173(sum === 15) || nova_null).toBe(true, novaConstructors.newString2("Failed to get valid key values. Expected a sum of 15, but got ").plus0(NovaInt.toString((sum)).plus0(novaConstructors.newString2(""))));
	
};

PrimitiveOverloadStability.prototype.testPrimitiveKeyAndValue = function (out) {
	var map2;
	var sum;
	var counter;
	var nova_local_0;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing primitive key and value for HashMap<Int, Int> "));
	map2 = novaConstructors.newHashMap1Int2Int0();
	sum = 0;
	counter = 0;
	(map2 || nova_null).set(1, 49);
	(map2 || nova_null).set(3, 2);
	(map2 || nova_null).set(-2, 11);
	nova_local_0 = ((map2) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		entry = (nova_local_0 || nova_null).accessor_next();
		sum += (entry || nova_null).key * (entry || nova_null).value;
		counter++;
	}
	(Nest.expect174(counter === 3) || nova_null).toBe(true, novaConstructors.newString2("Failed to iterator over map values. Expected counter value of 2, but got ").plus0(NovaInt.toString((counter)).plus0(novaConstructors.newString2(""))));
	(Nest.expect175(sum === 49 + 6 - 22) || nova_null).toBe(true, novaConstructors.newString2("Failed to get valid key values. Expected a sum of ").plus0(NovaByte.toString((49 + 6 - 22)).plus0(novaConstructors.newString2(", but got ").plus0(NovaInt.toString((sum))))));
	
};

PrimitiveOverloadStability.prototype.testFunctionalPrimitiveKey = function (out) {
	var self = this;
	
	var map1;
	var sum;
	var counter;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing functional primitive key for HashMap<Int, String> "));
	map1 = novaConstructors.newHashMap1Int0();
	(map1 || nova_null).set(5, novaConstructors.newString2("test"));
	(map1 || nova_null).set(10, novaConstructors.newString2("test2"));
	sum = 0;
	counter = 0;
	(map1 || nova_null).forEach0((entry, _2, _3) => {
			sum += (entry || nova_null).key;
			counter++;
			
	});
	(Nest.expect176(counter === 2) || nova_null).toBe(true, novaConstructors.newString2("Failed to iterator over map values. Expected counter value of 2, but got ").plus0(NovaInt.toString((counter)).plus0(novaConstructors.newString2(""))));
	(Nest.expect177(sum === 15) || nova_null).toBe(true, novaConstructors.newString2("Failed to get valid key values. Expected a sum of 15, but got ").plus0(NovaInt.toString((sum)).plus0(novaConstructors.newString2(""))));
	
};

PrimitiveOverloadStability.prototype.testFunctionalPrimitiveKeyAndValue = function (out) {
	var self = this;
	
	var map2;
	var sum;
	var counter;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing functional primitive key and value for HashMap<Int, Int> "));
	map2 = novaConstructors.newHashMap1Int2Int0();
	sum = 0;
	counter = 0;
	(map2 || nova_null).set(1, 49);
	(map2 || nova_null).set(3, 2);
	(map2 || nova_null).set(-2, 11);
	(map2 || nova_null).forEach0((entry, _2, _3) => {
			sum += (entry || nova_null).key * (entry || nova_null).value;
			counter++;
			
	});
	(Nest.expect178(counter === 3) || nova_null).toBe(true, novaConstructors.newString2("Failed to iterator over map values. Expected counter value of 2, but got ").plus0(NovaInt.toString((counter)).plus0(novaConstructors.newString2(""))));
	(Nest.expect179(sum === 49 + 6 - 22) || nova_null).toBe(true, novaConstructors.newString2("Failed to get valid key values. Expected a sum of ").plus0(NovaByte.toString((49 + 6 - 22)).plus0(novaConstructors.newString2(", but got ").plus0(NovaInt.toString((sum))))));
	
};

PrimitiveOverloadStability.prototype.runTests = function (onResult, out) {
	var testTimer;
	var testPrimitiveKeyAndValueTimer;
	var testFunctionalPrimitiveKeyTimer;
	var testFunctionalPrimitiveKeyAndValueTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing PrimitiveOverloadStability"));
	testTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.test(out);
		(testTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testTimer, PrimitiveOverloadStability._testTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7974659681629406);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testTimer, PrimitiveOverloadStability._testTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testPrimitiveKeyAndValueTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testPrimitiveKeyAndValue(out);
		(testPrimitiveKeyAndValueTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testPrimitiveKeyAndValueTimer, PrimitiveOverloadStability._testPrimitiveKeyAndValueTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8145769265866983);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testPrimitiveKeyAndValueTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testPrimitiveKeyAndValueTimer, PrimitiveOverloadStability._testPrimitiveKeyAndValueTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testFunctionalPrimitiveKeyTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testFunctionalPrimitiveKey(out);
		(testFunctionalPrimitiveKeyTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testFunctionalPrimitiveKeyTimer, PrimitiveOverloadStability._testFunctionalPrimitiveKeyTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.308117362195647);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testFunctionalPrimitiveKeyTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testFunctionalPrimitiveKeyTimer, PrimitiveOverloadStability._testFunctionalPrimitiveKeyTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testFunctionalPrimitiveKeyAndValueTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testFunctionalPrimitiveKeyAndValue(out);
		(testFunctionalPrimitiveKeyAndValueTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testFunctionalPrimitiveKeyAndValueTimer, PrimitiveOverloadStability._testFunctionalPrimitiveKeyAndValueTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.5983684595088212);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testFunctionalPrimitiveKeyAndValueTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testFunctionalPrimitiveKeyAndValueTimer, PrimitiveOverloadStability._testFunctionalPrimitiveKeyAndValueTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

PrimitiveOverloadStability.init = function () {
	return this;
	
};

PrimitiveOverloadStability.generated16 = function (value0, value1, value2, value3) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	temp[2] = value2;
	temp[3] = value3;
	return novaConstructors.newArray1(temp, 4);
	
};

PrimitiveOverloadStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/PrimitiveOverloadStability"), false);
	
};

PrimitiveOverloadStability.prototype.mutator__js_class = function () {
	
};

PrimitiveOverloadStability.prototype.accessor_model = function () {
	return PrimitiveOverloadStability._runTestsTestRunner;
	
};

PrimitiveOverloadStability.prototype.mutator_model = function () {
	
};

PrimitiveOverloadStability.prototype.super = function () {
	
};

novaConstructors.newPrimitiveOverloadStability = function () {
	var __value = new PrimitiveOverloadStability()
	NovaObject.call(__value);
	PrimitiveOverloadStability.prototype.super.apply(__value, [].slice.call(arguments));
	return PrimitiveOverloadStability.init.call(__value);
	
};

var RegexStability = function () {
	this._js_class = null;
	
	
};

RegexStability.prototype = Object.create(NovaObject.prototype);
RegexStability.prototype.constructor = RegexStability;


RegexStability.prototype.destroy = function () {
	
};

RegexStability.prototype.testMatch = function (out) {
	var self = this;
	
	var matches;
	var matches2;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing Regex match "));
	(Nest.expect180(Regex.containsMatch0(novaConstructors.newPattern(novaConstructors.newString2("a[bd]c")), novaConstructors.newString2("hello adc goodbye"))) || nova_null).toBe(true, novaConstructors.newString2("Failed to find valid match"));
	(Nest.expect181(Regex.containsMatch0(novaConstructors.newPattern(novaConstructors.newString2("a[bd]c")), novaConstructors.newString2("no match here..."))) || nova_null).toBe(false, novaConstructors.newString2("Failed to not find match"));
	matches = Regex.getMatches0(novaConstructors.newPattern(novaConstructors.newString2("a[bd]c")), novaConstructors.newString2("this is abc test adc adc hello"));
	(out || nova_null).write(NovaInt.toString((matches.accessor_count())).plus0(novaConstructors.newString2(" match").plus0((((matches || nova_null).accessor_count() != 1 ? novaConstructors.newString2("es") : novaConstructors.newString2("")) || nova_null).plus0(novaConstructors.newString2(": ")))));
	(matches || nova_null).forEach0((_1, _2, _3) => {
			(out || nova_null).write((((_1) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(", ")));
			
	});
	matches2 = Regex.getMatches0(novaConstructors.newPattern(novaConstructors.newString2("\\d+")), novaConstructors.newString2("whats my number? 818 414-5326"));
	(out || nova_null).write(NovaInt.toString((matches2.accessor_count())).plus0(novaConstructors.newString2(" match").plus0((((matches2 || nova_null).accessor_count() != 1 ? novaConstructors.newString2("es") : novaConstructors.newString2("")) || nova_null).plus0(novaConstructors.newString2(": ")))));
	(matches2 || nova_null).forEach0((_1, _2, _3) => {
			(out || nova_null).write((((_1) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(", ")));
			
	});
	
};

RegexStability.prototype.runTests = function (onResult, out) {
	var testMatchTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing RegexStability"));
	testMatchTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testMatch(out);
		(testMatchTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testMatchTimer, RegexStability._testMatchTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.3274296880473522);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testMatchTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testMatchTimer, RegexStability._testMatchTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

RegexStability.init = function () {
	return this;
	
};

RegexStability.generated17 = function (value0) {
	var temp;
	temp = [];
	temp[0] = value0;
	return novaConstructors.newArray1(temp, 1);
	
};

RegexStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/RegexStability"), false);
	
};

RegexStability.prototype.mutator__js_class = function () {
	
};

RegexStability.prototype.accessor_model = function () {
	return RegexStability._runTestsTestRunner;
	
};

RegexStability.prototype.mutator_model = function () {
	
};

RegexStability.prototype.super = function () {
	
};

novaConstructors.newRegexStability = function () {
	var __value = new RegexStability()
	NovaObject.call(__value);
	RegexStability.prototype.super.apply(__value, [].slice.call(arguments));
	return RegexStability.init.call(__value);
	
};

var UncaughtExceptionHandler = function () {
	
	
};

UncaughtExceptionHandler.prototype = Object.create(NovaObject.prototype);
UncaughtExceptionHandler.prototype.constructor = UncaughtExceptionHandler;


UncaughtExceptionHandler.prototype.destroy = function () {
	
};

UncaughtExceptionHandler.init = function () {
	return this;
	
};

UncaughtExceptionHandler.prototype.uncaughtException = function (thread, exception) {
	
};

UncaughtExceptionHandler.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/thread/UncaughtExceptionHandler"), false);
	
};

UncaughtExceptionHandler.prototype.mutator__js_class = function () {
	
};

UncaughtExceptionHandler.prototype.super = function () {
	
};

novaConstructors.newUncaughtExceptionHandler = function () {
	var __value = new UncaughtExceptionHandler()
	NovaObject.call(__value);
	UncaughtExceptionHandler.prototype.super.apply(__value, [].slice.call(arguments));
	return UncaughtExceptionHandler.init.call(__value);
	
};

var StabilityExceptionHandler = function () {
	
	
};

StabilityExceptionHandler.prototype = Object.create(UncaughtExceptionHandler.prototype);
StabilityExceptionHandler.prototype.constructor = StabilityExceptionHandler;


StabilityExceptionHandler.prototype.destroy = function () {
	
};

StabilityExceptionHandler.prototype.uncaughtException = function (thread, exception) {
	Nest.fail();
	
};

StabilityExceptionHandler.init = function () {
	return this;
	
};

StabilityExceptionHandler.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/StabilityExceptionHandler"), false);
	
};

StabilityExceptionHandler.prototype.mutator__js_class = function () {
	
};

StabilityExceptionHandler.prototype.super = function () {
	
};

novaConstructors.newStabilityExceptionHandler = function () {
	var __value = new StabilityExceptionHandler()
	UncaughtExceptionHandler.call(__value);
	StabilityExceptionHandler.prototype.super.apply(__value, [].slice.call(arguments));
	return StabilityExceptionHandler.init.call(__value);
	
};

var StabilityTest = function () {
	this._js_class = null;
	
	
};

StabilityTest.prototype = Object.create(NovaObject.prototype);
StabilityTest.prototype.constructor = StabilityTest;


StabilityTest.prototype.destroy = function () {
	
};

StabilityTest.main = function (args) {
	var self = this;
	
	var test;
	var timer;
	var results;
	var suites;
	var fancy;
	var unsuccessful;
	test = novaConstructors.newStabilityTest();
	timer = novaConstructors.newTimer().start();
	results = novaConstructors.newArray();
	suites = (args || nova_null).skip(2);
	if ((suites || nova_null).accessor_count() > 0) {
		(suites || nova_null).forEach0((_1, _2, _3) => {
				var suiteResults;
				var count;
				count = 0;
				suiteResults = [];
				var instance = System.jsCreateInstance(_1)
				instance.runTests((r) => {
						suiteResults.push(r);
						count++;
				});
				var i;
				i = 0;
				for (; i < count; i++) {
					(results || nova_null).add0(suiteResults[i]);
				}
				
		});
	} else {
		(test || nova_null).runTests((result) => {
				(results || nova_null).add0(result);
				
		});
	}
	fancy = novaConstructors.newFancyOutputStream(undefined, undefined, novaConstructors.newString2("/\\"));
	unsuccessful = (results || nova_null).filter0((_1, _2, _3) => {
			return !(_1 || nova_null).success;
			
	});
	if ((unsuccessful || nova_null).accessor_count() > 0) {
		(fancy || nova_null).writeHeader1(NovaInt.toString((unsuccessful.accessor_count())).plus0(novaConstructors.newString2(" Failure").plus0((((unsuccessful || nova_null).accessor_count() === 1 ? novaConstructors.newString2("") : novaConstructors.newString2("s")) || nova_null).plus0(novaConstructors.newString2(" out of ").plus0(NovaInt.toString((results.accessor_count())).plus0(novaConstructors.newString2(" test").plus0((((results || nova_null).accessor_count() === 1 ? novaConstructors.newString2("") : novaConstructors.newString2("s")) || nova_null).plus0(novaConstructors.newString2("")))))))), novaConstructors.newString2(":'( "), undefined, true);
		(unsuccessful || nova_null).forEach0((_1, _2, _3) => {
				NovaConsole.log((((_1) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2("")));
				
		});
	} else {
		(fancy || nova_null).writeHeader1(novaConstructors.newString2("All ").plus0(NovaInt.toString((results.accessor_count())).plus0(novaConstructors.newString2(" Successful"))), novaConstructors.newString2(":) "), undefined, true);
}
(timer || nova_null).stop();
NovaConsole.writeLine1(novaConstructors.newString2("Took ").plus0(NovaLong.toString((timer || nova_null).accessor_duration()).plus0(novaConstructors.newString2("ms"))));
if ((unsuccessful || nova_null).accessor_count() > 0) {
	System.exit0(1);
}
};

StabilityTest.prototype.runTests = function (onResult, out) {
	var testExceptionStability;
	var testSyntaxStability;
	var testClosureStability;
	var testPolymorphismStability;
	var testLambdaStability;
	var testToStringStability;
	var testAssignmentStability;
	var testRegexStability;
	var testStaticImportStability;
	var testInnerClassStability;
	var testExternalInnerClassStability;
	var testPrimitiveOverloadStability;
	var testFancyOutputStreamTests;
	var testFirstClassFunctionStability;
	var testLibraryLoadingStability;
	var testIntervalStability;
	var testBoundedIntervalStability;
	var testBoundlessIntervalStability;
	var testCastStability;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	testExceptionStability = novaConstructors.newExceptionStability();
	testSyntaxStability = novaConstructors.newSyntaxStability();
	testClosureStability = novaConstructors.newClosureStability();
	testPolymorphismStability = novaConstructors.newPolymorphismStability();
	testLambdaStability = novaConstructors.newLambdaStability();
	testToStringStability = novaConstructors.newToStringStability();
	testAssignmentStability = novaConstructors.newAssignmentStability();
	testRegexStability = novaConstructors.newRegexStability();
	testStaticImportStability = novaConstructors.newStaticImportStability();
	testInnerClassStability = novaConstructors.newInnerClassStability();
	testExternalInnerClassStability = novaConstructors.newExternalInnerClassStability();
	testPrimitiveOverloadStability = novaConstructors.newPrimitiveOverloadStability();
	testFancyOutputStreamTests = novaConstructors.newFancyOutputStreamTests();
	testFirstClassFunctionStability = novaConstructors.newFirstClassFunctionStability();
	testLibraryLoadingStability = novaConstructors.newLibraryLoadingStability();
	testIntervalStability = novaConstructors.newIntervalStability();
	testBoundedIntervalStability = novaConstructors.newBoundedIntervalStability();
	testBoundlessIntervalStability = novaConstructors.newBoundlessIntervalStability();
	testCastStability = novaConstructors.newCastStability();
	(testExceptionStability || nova_null).runTests(onResult, out);
	(testSyntaxStability || nova_null).runTests(onResult, out);
	(testClosureStability || nova_null).runTests(onResult, out);
	(testPolymorphismStability || nova_null).runTests(onResult, out);
	(testLambdaStability || nova_null).runTests(onResult, out);
	(testToStringStability || nova_null).runTests(onResult, out);
	(testAssignmentStability || nova_null).runTests(onResult, out);
	(testRegexStability || nova_null).runTests(onResult, out);
	(testStaticImportStability || nova_null).runTests(onResult, out);
	(testInnerClassStability || nova_null).runTests(onResult, out);
	(testExternalInnerClassStability || nova_null).runTests(onResult, out);
	(testPrimitiveOverloadStability || nova_null).runTests(onResult, out);
	(testFancyOutputStreamTests || nova_null).runTests(onResult, out);
	(testFirstClassFunctionStability || nova_null).runTests(onResult, out);
	(testLibraryLoadingStability || nova_null).runTests(onResult, out);
	(testIntervalStability || nova_null).runTests(onResult, out);
	(testBoundedIntervalStability || nova_null).runTests(onResult, out);
	(testBoundlessIntervalStability || nova_null).runTests(onResult, out);
	(testCastStability || nova_null).runTests(onResult, out);
	
};

StabilityTest.init = function () {
	return this;
	
};

StabilityTest.generated18 = function (value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	temp[2] = value2;
	temp[3] = value3;
	temp[4] = value4;
	temp[5] = value5;
	temp[6] = value6;
	temp[7] = value7;
	temp[8] = value8;
	temp[9] = value9;
	temp[10] = value10;
	temp[11] = value11;
	temp[12] = value12;
	temp[13] = value13;
	temp[14] = value14;
	temp[15] = value15;
	temp[16] = value16;
	temp[17] = value17;
	temp[18] = value18;
	return novaConstructors.newArray1(temp, 19);
	
};

StabilityTest.generated19 = function (value0) {
	var temp;
	temp = [];
	temp[0] = value0;
	return novaConstructors.newArray1(temp, 1);
	
};

StabilityTest.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/StabilityTest"), false);
	
};

StabilityTest.prototype.mutator__js_class = function () {
	
};

StabilityTest.prototype.accessor_model = function () {
	return StabilityTest._runTestsTestSuite;
	
};

StabilityTest.prototype.mutator_model = function () {
	
};

StabilityTest.prototype.super = function () {
	
};

novaConstructors.newStabilityTest = function () {
	var __value = new StabilityTest()
	NovaObject.call(__value);
	StabilityTest.prototype.super.apply(__value, [].slice.call(arguments));
	return StabilityTest.init.call(__value);
	
};

var StabilityTestCase = function () {
	this.program = null;
	
	
};

StabilityTestCase.prototype = Object.create(NovaObject.prototype);
StabilityTestCase.prototype.constructor = StabilityTestCase;


StabilityTestCase.prototype.destroy = function () {
	
};

StabilityTestCase.init = function (program) {
	this.program = program;
	return this;
	
};

StabilityTestCase.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/StabilityTestCase"), false);
	
};

StabilityTestCase.prototype.mutator__js_class = function () {
	
};

StabilityTestCase.prototype.super = function () {
	
};

novaConstructors.newStabilityTestCase = function (program) {
	var __value = new StabilityTestCase()
	NovaObject.call(__value);
	StabilityTestCase.prototype.super.apply(__value, [].slice.call(arguments));
	return StabilityTestCase.init.call(__value, program);
	
};

var StabilityTestException = function () {
	
	
};

StabilityTestException.prototype = Object.create(Exception.prototype);
StabilityTestException.prototype.constructor = StabilityTestException;


StabilityTestException.prototype.destroy = function () {
	
};

StabilityTestException.init = function () {
	return this;
	
};

StabilityTestException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/StabilityTestException"), false);
	
};

StabilityTestException.prototype.mutator__js_class = function () {
	
};

StabilityTestException.prototype.super = function () {
	
};

novaConstructors.newStabilityTestException = function () {
	var __value = new StabilityTestException()
	Exception.call(__value);
	StabilityTestException.prototype.super.apply(__value, [].slice.call(arguments));
	return StabilityTestException.init.call(__value);
	
};

var StaticImportStability = function () {
	this._js_class = null;
	
	
};

StaticImportStability.prototype = Object.create(NovaObject.prototype);
StaticImportStability.prototype.constructor = StaticImportStability;


StaticImportStability.prototype.destroy = function () {
	
};

StaticImportStability.prototype.test = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing math static imports "));
	(Nest.expect182(NovaMath.abs0(-5)) || nova_null).toBe(5, novaConstructors.newString2("Did not call abs correctly"));
	(Nest.expect183(NovaMath.max0(-5, -6)) || nova_null).toBe(-5, novaConstructors.newString2("Did not call max correctly"));
	(Nest.expect184(NovaMath.min0(-5, -6)) || nova_null).toBe(-6, novaConstructors.newString2("Did not call min correctly"));
	(Nest.expect185(NovaMath.sign(-5)) || nova_null).toBe(-1, novaConstructors.newString2("Did not call sign correctly"));
	(Nest.expect186(NovaMath.round(5.6)) || nova_null).toBe(6, novaConstructors.newString2("Did not call round correctly. expected 6, but was ").plus0(NovaLong.toString((NovaMath.round(5.6))).plus0(novaConstructors.newString2(""))));
	
};

StaticImportStability.prototype.runTests = function (onResult, out) {
	var testTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing StaticImportStability"));
	testTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.test(out);
		(testTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testTimer, StaticImportStability._testTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8477814861613231);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testTimer, StaticImportStability._testTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

StaticImportStability.init = function () {
	return this;
	
};

StaticImportStability.generated20 = function (value0) {
	var temp;
	temp = [];
	temp[0] = value0;
	return novaConstructors.newArray1(temp, 1);
	
};

StaticImportStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/StaticImportStability"), false);
	
};

StaticImportStability.prototype.mutator__js_class = function () {
	
};

StaticImportStability.prototype.accessor_model = function () {
	return StaticImportStability._runTestsTestRunner;
	
};

StaticImportStability.prototype.mutator_model = function () {
	
};

StaticImportStability.prototype.super = function () {
	
};

novaConstructors.newStaticImportStability = function () {
	var __value = new StaticImportStability()
	NovaObject.call(__value);
	StaticImportStability.prototype.super.apply(__value, [].slice.call(arguments));
	return StaticImportStability.init.call(__value);
	
};

var SyntaxStability = function () {
	this._js_class = null;
	
	
};

SyntaxStability.prototype = Object.create(NovaObject.prototype);
SyntaxStability.prototype.constructor = SyntaxStability;


SyntaxStability.prototype.destroy = function () {
	
};

SyntaxStability.prototype.testSimpleMatchStatement = function (out) {
	var num;
	var worked;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing simple match statement "));
	num = 3;
	worked = false;
	switch ((num)) {
		case 1:
		Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
		
		break;
		case 2:
		Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
		
		break;
		case 3:
		worked = true;
		
		break;
		case 4:
		Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
		
		break;
		default:
		Nest.fail(novaConstructors.newString2("Match failed to accept the correct case"));
		
	}
	(Nest.expect187(worked) || nova_null).toBe(true);
	
};

SyntaxStability.prototype.testSimpleMatchStatementWithIndentation = function (out) {
	var num;
	var worked;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing simple match statement with indentation "));
	num = 3;
	worked = false;
	switch ((num)) {
		case 1:
		Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
		
		break;
		case 2:
		Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
		
		break;
		case 3:
		worked = true;
		
		break;
		case 4:
		Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
		
		break;
		default:
		Nest.fail(novaConstructors.newString2("Match failed to accept the correct case"));
		
	}
	(Nest.expect188(worked) || nova_null).toBe(true);
	
};

SyntaxStability.prototype.testSimpleMatchStatementWithScopes = function (out) {
	var num;
	var worked;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing simple match statement with scopes "));
	num = 3;
	worked = false;
	switch ((num)) {
		case 1:
		Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
		
		break;
		case 2:
		Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
		
		break;
		case 3:
		worked = true;
		
		break;
		case 4:
		Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
		
		break;
		default:
		Nest.fail(novaConstructors.newString2("Match failed to accept the correct case"));
		
	}
	(Nest.expect189(worked) || nova_null).toBe(true);
	
};

SyntaxStability.prototype.testMatchStatementWithVariableCaseValues = function (out) {
	var val;
	var num;
	var worked;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing match statement with variable case values "));
	val = 1;
	num = 3;
	worked = false;
	if ((num) == val++) {
		Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
		
	} else if ((num) == val++) {
		Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
		
	} else if ((num) == (val++)) {
		worked = true;
		
	} else if ((num) == val++) {
		Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
		
	} else {
		Nest.fail(novaConstructors.newString2("Match failed to accept the correct case"));
	}
	
	(Nest.expect190(worked) || nova_null).toBe(true);
	
};

SyntaxStability.prototype.testMatchStatementWithVariableCaseValuesAndFallthrough = function (out) {
	var val;
	var num;
	var worked;
	var worked2;
	var nova_local_0;
	var nova_local_1;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing match statement with variable case values and fallthrough "));
	val = 1;
	num = 3;
	worked = false;
	worked2 = false;
	nova_local_1 = (num++);
	do {
		if (nova_local_1 == val++) {
			Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
			
			break;
		} else if (nova_local_1 == val++) {
			Nest.fail(novaConstructors.newString2("Match accepted incorrect case"));
			
			break;
		} else if (nova_local_1 == val++) {
			worked = true;
			nova_local_0 = 1;
			
		} if (nova_local_0 || nova_local_1 == val++) {
			worked2 = true;
			
			break;
		} else {
			Nest.fail(novaConstructors.newString2("Match failed to accept the correct case"));
		}
		
	} while (false);
	(Nest.expect191(worked && worked2) || nova_null).toBe(true);
	
};

SyntaxStability.prototype.testWhileLoops = function (out) {
	var num;
	var num2;
	var num3;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing inline while loop "));
	num = 0;
	num2 = 0;
	num3 = 0;
	while (num < 100) {
		num++;
	}
	while (num2 < 100) {
		num2++;
	}
	while (num3 < 100) {
		if (true) {
			if (true) {
			}
		}
		num3++;
	}
	(Nest.expect192(num === 100 && num2 === 100 && num3 === 100) || nova_null).toBe(true, novaConstructors.newString2("Inline while loop failed."));
	
};

SyntaxStability.prototype.testForLoops = function (out) {
	var num;
	var num2;
	var num3;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing inline for loop "));
	num = 0;
	num2 = 0;
	num3 = 0;
	var i;
	i = 0;
	for (; i < 100; i++) {
		num++;
	}
	var i2;
	i2 = 0;
	for (; i2 < 100; i2++) {
		num2++;
	}
	var i3;
	i3 = 0;
	for (; i3 < 100; i3++) {
		if (true) {
			if (true) {
			}
		}
		num3++;
	}
	(Nest.expect193(num === 100 && num2 === 100 && num3 === 100) || nova_null).toBe(true, novaConstructors.newString2("Inline for loop failed. Expected 100, 100, 100 received ").plus0(NovaInt.toString((num)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((num2)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((num3)).plus0(novaConstructors.newString2(""))))))));
	
};

SyntaxStability.prototype.testUntil = function (out) {
	var obj;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing until statement "));
	if (((obj)) === null) {
		obj = SyntaxStability.test1();
		if (((obj)) === null) {
			obj = SyntaxStability.test2();
			if (((obj)) === null) {
				obj = SyntaxStability.test3();
				if (((obj)) === null) {
					Nest.fail(novaConstructors.newString2("Failed to stop after correct condition"));
				}
			}
		}
	}
	(Nest.expect0(obj) || nova_null).toNotBe(null, novaConstructors.newString2("Failed to reach correct condition"));
	
};

SyntaxStability.test1 = function () {
	return null;
	
};

SyntaxStability.test2 = function () {
	return null;
	
};

SyntaxStability.test3 = function () {
	return novaConstructors.newObject();
	
};

SyntaxStability.filterFunc = function (i) {
	return (i || nova_null).count >= 4;
	
};

SyntaxStability.foreachClosure = function (s) {
	if ((s || nova_null).count < 4) {
		throw novaConstructors.newUnstableException(novaConstructors.newString2("filtering failed"));
	}
	
};

SyntaxStability.prototype.testFilterFunctionality = function (out) {
	var list;
	var list2;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing filter functionality "));
	list = this.generated46();
	list2 = (list || nova_null).filter0(SyntaxStability.filterFunc);
	try {
		(list2 || nova_null).forEach0(SyntaxStability.foreachClosure);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8309782445056291);
			console.error(e);
			process.exit(1);
		} else {
			Nest.fail(novaConstructors.newString2("Failed to filter data correctly"));
		}
	 }
	finally {
	}
	var n;
	n = 0;
	for (; n < (list2 || nova_null).accessor_count(); n++) {
		(Nest.expect194(((list2 || nova_null).get(n) || nova_null).count >= 4) || nova_null).toBe(true, novaConstructors.newString2("Failed to filter data correctly"));
	}
	
};

SyntaxStability.prototype.testIteratorFunctionality = function (out) {
	var list;
	var list2;
	var iter;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing iterator functionality "));
	list = this.generated47();
	list2 = (list || nova_null).filter0(SyntaxStability.filterFunc);
	iter = (list2 || nova_null).accessor_iterator();
	while ((iter || nova_null).accessor_hasNext()) {
		(Nest.expect195(((iter || nova_null).accessor_next() || nova_null).count >= 4) || nova_null).toBe(true, novaConstructors.newString2("Failed to run iterator"));
	}
	
};

SyntaxStability.prototype.testForeachLoopFunctionality = function (out) {
	var list;
	var list2;
	var nova_local_0;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing foreach loop functionality "));
	list = this.generated48();
	list2 = (list || nova_null).filter0(SyntaxStability.filterFunc);
	nova_local_0 = ((list2) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		string = (nova_local_0 || nova_null).accessor_next();
		(Nest.expect196((string || nova_null).count >= 4) || nova_null).toBe(true, novaConstructors.newString2("Failed to run foreach loop"));
	}
	
};

SyntaxStability.prototype.testTernary = function (out) {
	var first;
	var second;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing ternary functionality "));
	first = this.trueValue() ? novaConstructors.newString2("hey").equals0(novaConstructors.newString2("hey")) : novaConstructors.newString2("hey").equals0(novaConstructors.newString2("hey2"));
	(Nest.expect197(first) || nova_null).toBe(true, novaConstructors.newString2("Failed first ternary test"));
	second = this.falseValue() ? novaConstructors.newString2("one") : novaConstructors.newString2("two");
	(Nest.expect198((second || nova_null).equals0(novaConstructors.newString2("two"))) || nova_null).toBe(true, novaConstructors.newString2("Failed second ternary test"));
	
};

SyntaxStability.prototype.testElvis = function (out) {
	var str;
	var str2;
	var result1;
	var nova_local_0;
	var result2;
	var nova_local_1;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing elvis functionality "));
	str = novaConstructors.newString2("this isnt null");
	str2 = null;
	result1 = (nova_local_0 = str) != null ? nova_local_0 : novaConstructors.newString2("wtf");
	(Nest.expect199((result1 || nova_null).equals0(novaConstructors.newString2("wtf"))) || nova_null).toBe(false, novaConstructors.newString2("Failed first elvis test"));
	result2 = (nova_local_1 = str2) != null ? nova_local_1 : novaConstructors.newString2("this is null");
	(Nest.expect200((result2 || nova_null).equals0(novaConstructors.newString2("this is null"))) || nova_null).toBe(true, novaConstructors.newString2("Failed second elvis test"));
	
};

SyntaxStability.prototype.trueValue = function () {
	return true;
	
};

SyntaxStability.prototype.falseValue = function () {
	return false;
	
};

SyntaxStability.prototype.named0 = function (s, arg, jum, jdd, joe) {
	jum = typeof jum === 'undefined' ? 4 : jum;
	jdd = typeof jdd === 'undefined' ? 0 : jdd;
	joe = typeof joe === 'undefined' ? 0 : joe;
	return -1;
	
};

SyntaxStability.prototype.named1 = function (s, arg, num, add) {
	num = typeof num === 'undefined' ? 4 : num;
	add = typeof add === 'undefined' ? 0 : add;
	return num * (arg || nova_null).count + add;
	
};

SyntaxStability.prototype.testNamedArguments = function (out) {
	var num;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing named arguments "));
	num = this.named1(novaConstructors.newString2(""), novaConstructors.newString2("yo"), 4);
	(Nest.expect201(num === 8) || nova_null).toBe(true, novaConstructors.newString2("Default argument failed. Expected 8, received ").plus0(NovaInt.toString((num)).plus0(novaConstructors.newString2(""))));
	num = this.named1(novaConstructors.newString2(""), novaConstructors.newString2("heyasdf"), 5, 2);
	(Nest.expect202(num === 37) || nova_null).toBe(true, novaConstructors.newString2("Named arguments failed. Expeced 37, received ").plus0(NovaInt.toString((num)).plus0(novaConstructors.newString2(" first"))));
	num = this.named1(novaConstructors.newString2(""), novaConstructors.newString2("heyasdf"), 5, 2);
	(Nest.expect203(num === 37) || nova_null).toBe(true, novaConstructors.newString2("Named arguments failed. Expeced 37, received ").plus0(NovaInt.toString((num)).plus0(novaConstructors.newString2(" second"))));
	
};

SyntaxStability.prototype.func1 = function (a) {
	return a * 2;
	
};

SyntaxStability.prototype.func2 = function (a) {
	return a * 4;
	
};

SyntaxStability.prototype.myFunc = function (something) {
	something = typeof something === 'undefined' ? (function (context) { return function (a) { var self = context; return self.func2.call(self, a); } })(this) : something;
	return something(5);
	
};

SyntaxStability.prototype.checkDefaultClosureArguments = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing default closure arguments "));
	(Nest.expect204(this.myFunc() === 20) || nova_null).toBe(true, novaConstructors.newString2("Failed to call default closure"));
	(Nest.expect205(this.myFunc((function (context) { return function (a) { var self = context; return self.func1.call(self, a); } })(this)) === 10) || nova_null).toBe(true, novaConstructors.newString2("Failed to call overrided default closure"));
	
};

SyntaxStability.prototype.checkZipper = function (out) {
	var self = this;
	
	var array1;
	var array2;
	var zipped;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing zip function "));
	array1 = this.generated49();
	array2 = this.generated50();
	zipped = (array1 || nova_null).zip0(array2, (x, y) => {
			return ((x) || nova_null).plus0(novaConstructors.newString2(" ").plus0(((y) || nova_null).plus0(novaConstructors.newString2(""))));
			
	});
	(out || nova_null).write(novaConstructors.newString2("Zipped: ").plus0((((zipped) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" "))));
	
};

SyntaxStability.prototype.testSafeNavigation = function (out) {
	var node;
	var nova_local_13;
	var nova_local_14;
	var nova_local_15;
	var nova_local_16;
	var nova_local_17;
	var nova_local_18;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing safe navigation operator "));
	node = novaConstructors.newNode();
	(node || nova_null).value = 1;
	(node || nova_null).child = novaConstructors.newNode();
	((node || nova_null).child || nova_null).value = 2;
	((node || nova_null).child || nova_null).child = novaConstructors.newNode();
	(((node || nova_null).child || nova_null).child || nova_null).value = 3;
	(out || nova_null).write(novaConstructors.newString2("if statement... "));
	if ((nova_local_13 = node) != null ? ((nova_local_14 = (nova_local_13 || nova_null).child) != null ? ((nova_local_15 = (nova_local_14 || nova_null).child) != null ? (nova_local_15.value) : 0) : 0) : 0 === 3 && (nova_local_16 = node) != null ? ((nova_local_17 = (nova_local_16 || nova_null).child) != null ? (nova_local_17.value) : 0) : 0 === 2 && (nova_local_18 = node) != null ? (nova_local_18.value) : 0 === 1) {
		var array;
		var nova_local_0;
		var nova_local_2;
		var nova_local_3;
		var nova_local_4;
		var nova_local_5;
		var nova_local_6;
		var nova_local_7;
		var nova_local_8;
		var nova_local_9;
		var nova_local_10;
		var nova_local_11;
		var nova_local_12;
		(out || nova_null).write(novaConstructors.newString2("assignment... "));
		if ((nova_local_0 = node) != null) {
			var nova_local_1;
			if ((nova_local_1 = (nova_local_0 || nova_null).child) != null) {
				((nova_local_1 || nova_null).child || nova_null).value = 5;
			}
		}
		(Nest.expect206((nova_local_2 = node) != null ? ((nova_local_3 = (nova_local_2 || nova_null).child) != null ? (nova_local_3.child.value) : 0) : 0 === 5) || nova_null).toBe(true, novaConstructors.newString2("Failed to set node value while safely navigating it"));
		((node || nova_null).child || nova_null).child = null;
		(Nest.expect207((nova_local_4 = node) != null ? ((nova_local_5 = (nova_local_4 || nova_null).child) != null ? ((nova_local_6 = (nova_local_5 || nova_null).child) != null ? (nova_local_6.value) : 0) : 0) : 0 === 3) || nova_null).toBe(false, novaConstructors.newString2("Failed to skip null child"));
		((node || nova_null).child || nova_null).child = novaConstructors.newNode();
		(((node || nova_null).child || nova_null).child || nova_null).child = novaConstructors.newNode();
		((((node || nova_null).child || nova_null).child || nova_null).child || nova_null).child = novaConstructors.newNode();
		(((((node || nova_null).child || nova_null).child || nova_null).child || nova_null).child || nova_null).value = 91;
		(out || nova_null).write(novaConstructors.newString2("function call... "));
		this.callMeWithNode((nova_local_7 = node) != null ? ((nova_local_8 = (nova_local_7 || nova_null).child) != null ? ((nova_local_9 = (nova_local_8 || nova_null).child) != null ? ((nova_local_10 = (nova_local_9 || nova_null).child) != null ? (nova_local_10.child) : null) : null) : null) : null);
		array = this.generated51();
		(out || nova_null).write(novaConstructors.newString2("array access... "));
		(array || nova_null).set0((nova_local_11 = node) != null ? ((nova_local_12 = (nova_local_11 || nova_null).child) != null ? (nova_local_12.value) : 0) : 0, novaConstructors.newString2("hello"));
		(Nest.expect208(((array || nova_null).get(2) || nova_null).equals0(novaConstructors.newString2("hello"))) || nova_null).toBe(true, novaConstructors.newString2("Failed to set correct array index with correct value using the safe navigation operator"));
	} else {
		Nest.fail(novaConstructors.newString2("Failed to safely navigate valid children"));
	}
	
};

SyntaxStability.prototype.testArraySafeNavigation = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing array safe navigation "));
	
};

SyntaxStability.prototype.callMeWithNode = function (n) {
	return (Nest.expect2((n || nova_null).value === 91) || nova_null).toBe(true, novaConstructors.newString2("Failed to call method with correct safely navigated node"));
	
};

SyntaxStability.prototype.testSnakeCaseNumbers = function (out) {
	var dPos;
	var dNeg;
	var lPos;
	var lNeg;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing snake case numbers "));
	dPos = 51325753.131313;
	dNeg = -51325753.131313;
	(Nest.expect209(dPos === 51325753.131313) || nova_null).toBe(true, novaConstructors.newString2("Positive snake case double failed to parse"));
	(Nest.expect210(dNeg === -51325753.131313) || nova_null).toBe(true, novaConstructors.newString2("Negative snake case double failed to parse"));
	lPos = 922547211;
	lNeg = -922547211;
	(Nest.expect211(lPos === 922547211) || nova_null).toBe(true, novaConstructors.newString2("Positive snake case long failed to parse"));
	(Nest.expect212(lNeg === -922547211) || nova_null).toBe(true, novaConstructors.newString2("Negative snake case long failed to parse"));
	
};

SyntaxStability.prototype.testArrayInitializers = function (out) {
	var num1;
	var num2;
	var myInts;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing array initializers "));
	num1 = 1;
	num2 = 2;
	myInts = this.generated52(num1, num2);
	(Nest.expect213(((myInts || nova_null).get(2) || nova_null).equals0(novaConstructors.newInt(num1)) && ((myInts || nova_null).get(3) || nova_null).equals0(novaConstructors.newInt(num2))) || nova_null).toBe(true);
	
};

SyntaxStability.prototype.runTests = function (onResult, out) {
	var testSimpleMatchStatementTimer;
	var testSimpleMatchStatementWithIndentationTimer;
	var testSimpleMatchStatementWithScopesTimer;
	var testMatchStatementWithVariableCaseValuesTimer;
	var testMatchStatementWithVariableCaseValuesAndFallthroughTimer;
	var testWhileLoopsTimer;
	var testForLoopsTimer;
	var testUntilTimer;
	var testFilterFunctionalityTimer;
	var testIteratorFunctionalityTimer;
	var testForeachLoopFunctionalityTimer;
	var testTernaryTimer;
	var testElvisTimer;
	var testNamedArgumentsTimer;
	var checkDefaultClosureArgumentsTimer;
	var checkZipperTimer;
	var testSafeNavigationTimer;
	var testArraySafeNavigationTimer;
	var testSnakeCaseNumbersTimer;
	var testArrayInitializersTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing SyntaxStability"));
	testSimpleMatchStatementTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testSimpleMatchStatement(out);
		(testSimpleMatchStatementTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testSimpleMatchStatementTimer, SyntaxStability._testSimpleMatchStatementTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.40426077726183707);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testSimpleMatchStatementTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testSimpleMatchStatementTimer, SyntaxStability._testSimpleMatchStatementTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testSimpleMatchStatementWithIndentationTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testSimpleMatchStatementWithIndentation(out);
		(testSimpleMatchStatementWithIndentationTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testSimpleMatchStatementWithIndentationTimer, SyntaxStability._testSimpleMatchStatementWithIndentationTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.38146573441947984);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testSimpleMatchStatementWithIndentationTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testSimpleMatchStatementWithIndentationTimer, SyntaxStability._testSimpleMatchStatementWithIndentationTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testSimpleMatchStatementWithScopesTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testSimpleMatchStatementWithScopes(out);
		(testSimpleMatchStatementWithScopesTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testSimpleMatchStatementWithScopesTimer, SyntaxStability._testSimpleMatchStatementWithScopesTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.38625562478915787);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testSimpleMatchStatementWithScopesTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testSimpleMatchStatementWithScopesTimer, SyntaxStability._testSimpleMatchStatementWithScopesTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testMatchStatementWithVariableCaseValuesTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testMatchStatementWithVariableCaseValues(out);
		(testMatchStatementWithVariableCaseValuesTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testMatchStatementWithVariableCaseValuesTimer, SyntaxStability._testMatchStatementWithVariableCaseValuesTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8478245029036376);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testMatchStatementWithVariableCaseValuesTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testMatchStatementWithVariableCaseValuesTimer, SyntaxStability._testMatchStatementWithVariableCaseValuesTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testMatchStatementWithVariableCaseValuesAndFallthroughTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testMatchStatementWithVariableCaseValuesAndFallthrough(out);
		(testMatchStatementWithVariableCaseValuesAndFallthroughTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testMatchStatementWithVariableCaseValuesAndFallthroughTimer, SyntaxStability._testMatchStatementWithVariableCaseValuesAndFallthroughTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8210063419185387);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testMatchStatementWithVariableCaseValuesAndFallthroughTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testMatchStatementWithVariableCaseValuesAndFallthroughTimer, SyntaxStability._testMatchStatementWithVariableCaseValuesAndFallthroughTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testWhileLoopsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testWhileLoops(out);
		(testWhileLoopsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testWhileLoopsTimer, SyntaxStability._testWhileLoopsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7003526364356361);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testWhileLoopsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testWhileLoopsTimer, SyntaxStability._testWhileLoopsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testForLoopsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testForLoops(out);
		(testForLoopsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testForLoopsTimer, SyntaxStability._testForLoopsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.5009146017719571);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testForLoopsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testForLoopsTimer, SyntaxStability._testForLoopsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testUntilTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testUntil(out);
		(testUntilTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testUntilTimer, SyntaxStability._testUntilTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.6653202927004606);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testUntilTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testUntilTimer, SyntaxStability._testUntilTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testFilterFunctionalityTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testFilterFunctionality(out);
		(testFilterFunctionalityTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testFilterFunctionalityTimer, SyntaxStability._testFilterFunctionalityTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.42159728434924815);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testFilterFunctionalityTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testFilterFunctionalityTimer, SyntaxStability._testFilterFunctionalityTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testIteratorFunctionalityTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testIteratorFunctionality(out);
		(testIteratorFunctionalityTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testIteratorFunctionalityTimer, SyntaxStability._testIteratorFunctionalityTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.9099374325702664);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testIteratorFunctionalityTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testIteratorFunctionalityTimer, SyntaxStability._testIteratorFunctionalityTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testForeachLoopFunctionalityTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testForeachLoopFunctionality(out);
		(testForeachLoopFunctionalityTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testForeachLoopFunctionalityTimer, SyntaxStability._testForeachLoopFunctionalityTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.7262628140058295);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testForeachLoopFunctionalityTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testForeachLoopFunctionalityTimer, SyntaxStability._testForeachLoopFunctionalityTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testTernaryTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testTernary(out);
		(testTernaryTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testTernaryTimer, SyntaxStability._testTernaryTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.4205816057549372);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testTernaryTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testTernaryTimer, SyntaxStability._testTernaryTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testElvisTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testElvis(out);
		(testElvisTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testElvisTimer, SyntaxStability._testElvisTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.2829266764508027);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testElvisTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testElvisTimer, SyntaxStability._testElvisTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testNamedArgumentsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testNamedArguments(out);
		(testNamedArgumentsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testNamedArgumentsTimer, SyntaxStability._testNamedArgumentsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.24097375405174082);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testNamedArgumentsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testNamedArgumentsTimer, SyntaxStability._testNamedArgumentsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	checkDefaultClosureArgumentsTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.checkDefaultClosureArguments(out);
		(checkDefaultClosureArgumentsTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, checkDefaultClosureArgumentsTimer, SyntaxStability._checkDefaultClosureArgumentsTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.11598745596499938);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(checkDefaultClosureArgumentsTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, checkDefaultClosureArgumentsTimer, SyntaxStability._checkDefaultClosureArgumentsTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	checkZipperTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.checkZipper(out);
		(checkZipperTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, checkZipperTimer, SyntaxStability._checkZipperTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.4254081560328947);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(checkZipperTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, checkZipperTimer, SyntaxStability._checkZipperTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testSafeNavigationTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testSafeNavigation(out);
		(testSafeNavigationTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testSafeNavigationTimer, SyntaxStability._testSafeNavigationTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.05123202882292377);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testSafeNavigationTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testSafeNavigationTimer, SyntaxStability._testSafeNavigationTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testArraySafeNavigationTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testArraySafeNavigation(out);
		(testArraySafeNavigationTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testArraySafeNavigationTimer, SyntaxStability._testArraySafeNavigationTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.12367060343586722);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testArraySafeNavigationTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testArraySafeNavigationTimer, SyntaxStability._testArraySafeNavigationTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testSnakeCaseNumbersTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testSnakeCaseNumbers(out);
		(testSnakeCaseNumbersTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testSnakeCaseNumbersTimer, SyntaxStability._testSnakeCaseNumbersTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.4034646611228089);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testSnakeCaseNumbersTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testSnakeCaseNumbersTimer, SyntaxStability._testSnakeCaseNumbersTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	testArrayInitializersTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.testArrayInitializers(out);
		(testArrayInitializersTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testArrayInitializersTimer, SyntaxStability._testArrayInitializersTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.10301511312578371);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testArrayInitializersTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testArrayInitializersTimer, SyntaxStability._testArrayInitializersTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

SyntaxStability.init = function () {
	return this;
	
};

SyntaxStability.generated21 = function (value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	temp[2] = value2;
	temp[3] = value3;
	temp[4] = value4;
	temp[5] = value5;
	temp[6] = value6;
	temp[7] = value7;
	temp[8] = value8;
	temp[9] = value9;
	temp[10] = value10;
	temp[11] = value11;
	temp[12] = value12;
	temp[13] = value13;
	temp[14] = value14;
	temp[15] = value15;
	temp[16] = value16;
	temp[17] = value17;
	temp[18] = value18;
	temp[19] = value19;
	return novaConstructors.newArray1(temp, 20);
	
};

SyntaxStability.prototype.generated46 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("this");
	temp[1] = novaConstructors.newString2("is");
	temp[2] = novaConstructors.newString2("a");
	temp[3] = novaConstructors.newString2("test");
	temp[4] = novaConstructors.newString2("to");
	temp[5] = novaConstructors.newString2("see");
	temp[6] = novaConstructors.newString2("what shows up");
	return novaConstructors.newArray1(temp, 7);
	
};

SyntaxStability.prototype.generated47 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("this");
	temp[1] = novaConstructors.newString2("is");
	temp[2] = novaConstructors.newString2("a");
	temp[3] = novaConstructors.newString2("test");
	temp[4] = novaConstructors.newString2("to");
	temp[5] = novaConstructors.newString2("see");
	temp[6] = novaConstructors.newString2("what shows up");
	return novaConstructors.newArray1(temp, 7);
	
};

SyntaxStability.prototype.generated48 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("this");
	temp[1] = novaConstructors.newString2("is");
	temp[2] = novaConstructors.newString2("a");
	temp[3] = novaConstructors.newString2("test");
	temp[4] = novaConstructors.newString2("to");
	temp[5] = novaConstructors.newString2("see");
	temp[6] = novaConstructors.newString2("what shows up");
	return novaConstructors.newArray1(temp, 7);
	
};

SyntaxStability.prototype.generated49 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("This");
	temp[1] = novaConstructors.newString2("is");
	temp[2] = novaConstructors.newString2("a");
	temp[3] = novaConstructors.newString2("test");
	return novaConstructors.newArray1(temp, 4);
	
};

SyntaxStability.prototype.generated50 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("one");
	temp[1] = novaConstructors.newString2("two");
	temp[2] = novaConstructors.newString2("three");
	temp[3] = novaConstructors.newString2("four");
	return novaConstructors.newArray1(temp, 4);
	
};

SyntaxStability.prototype.generated51 = function () {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newString2("1");
	temp[1] = novaConstructors.newString2("2");
	temp[2] = novaConstructors.newString2("3");
	temp[3] = novaConstructors.newString2("4");
	temp[4] = novaConstructors.newString2("5");
	return novaConstructors.newArray1(temp, 5);
	
};

SyntaxStability.prototype.generated52 = function (value2, value3) {
	var temp;
	temp = [];
	temp[0] = novaConstructors.newByte(0);
	temp[1] = novaConstructors.newByte(0);
	temp[2] = novaConstructors.newInt(value2);
	temp[3] = novaConstructors.newInt(value3);
	temp[4] = novaConstructors.newByte(0);
	return novaConstructors.newArray1(temp, 5);
	
};

SyntaxStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/SyntaxStability"), false);
	
};

SyntaxStability.prototype.mutator__js_class = function () {
	
};

SyntaxStability.prototype.accessor_model = function () {
	return SyntaxStability._runTestsTestRunner;
	
};

SyntaxStability.prototype.mutator_model = function () {
	
};

SyntaxStability.prototype.super = function () {
	
};

novaConstructors.newSyntaxStability = function () {
	var __value = new SyntaxStability()
	NovaObject.call(__value);
	SyntaxStability.prototype.super.apply(__value, [].slice.call(arguments));
	return SyntaxStability.init.call(__value);
	
};

var ThreadImplementation = function () {
	this.times = 0;
	this.millis = 0;
	
	
};

ThreadImplementation.prototype = Object.create(Thread.prototype);
ThreadImplementation.prototype.constructor = ThreadImplementation;


ThreadImplementation.prototype.destroy = function () {
	
};

ThreadImplementation.init = function (times, millis) {
	this.times = times;
	this.millis = millis;
	return this;
	
};

ThreadImplementation.prototype.run = function () {
	var i;
	i = 0;
	for (; i < this.times; i++) {
		Thread.sleep(this.millis);
	}
	
};

ThreadImplementation.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/ThreadImplementation"), false);
	
};

ThreadImplementation.prototype.mutator__js_class = function () {
	
};

ThreadImplementation.prototype.super = function () {
	
};

novaConstructors.newThreadImplementation = function (times, millis) {
	var __value = new ThreadImplementation()
	Thread.call(__value);
	ThreadImplementation.prototype.super.apply(__value, [].slice.call(arguments));
	return ThreadImplementation.init.call(__value, times, millis);
	
};

var ThreadStability = function () {
	
	
};

ThreadStability.prototype = Object.create(NovaObject.prototype);
ThreadStability.prototype.constructor = ThreadStability;


ThreadStability.prototype.destroy = function () {
	
};

ThreadStability.prototype.test = function (out) {
	var threads;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing 20 Threads with memory access "));
	threads = novaConstructors.newArray0(20);
	this.createThreads(threads, 20);
	ThreadStability.checkMemoryAccess();
	ThreadStability.joinThreads(threads, 20);
	
};

ThreadStability.prototype.createThreads = function (threads, amount) {
	var handler;
	handler = novaConstructors.newStabilityExceptionHandler();
	var i;
	i = 0;
	for (; i < amount; i++) {
		(threads || nova_null).set0(i, novaConstructors.newThreadImplementation(10, 10));
		((threads || nova_null).get(i) || nova_null).start();
	}
	
};

ThreadStability.checkMemoryAccess = function () {
	Thread.sleep(30);
	var i;
	i = 0;
	for (; i < 1000; i++) {
		var s;
		s = NovaInt.toString(i);
	}
	
};

ThreadStability.joinThreads = function (threads, amount) {
	var i;
	i = 0;
	for (; i < amount; i++) {
		((threads || nova_null).get(i) || nova_null).join();
	}
	
};

ThreadStability.prototype.runTests = function (onResult, out) {
	var testTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing ThreadStability"));
	testTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.test(out);
		(testTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testTimer, ThreadStability._testTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.01932727787652122);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testTimer, ThreadStability._testTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

ThreadStability.init = function () {
	return this;
	
};

ThreadStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/ThreadStability"), false);
	
};

ThreadStability.prototype.mutator__js_class = function () {
	
};

ThreadStability.prototype.super = function () {
	
};

novaConstructors.newThreadStability = function () {
	var __value = new ThreadStability()
	NovaObject.call(__value);
	ThreadStability.prototype.super.apply(__value, [].slice.call(arguments));
	return ThreadStability.init.call(__value);
	
};

var TimeStability = function () {
	
	
};

TimeStability.prototype = Object.create(NovaObject.prototype);
TimeStability.prototype.constructor = TimeStability;


TimeStability.prototype.destroy = function () {
	
};

TimeStability.prototype.test = function (out) {
	var timer;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing Time.nova "));
	timer = novaConstructors.newTimer();
	(timer || nova_null).start();
	Thread.sleep(100);
	(timer || nova_null).stop();
	(Nest.expect214((timer || nova_null).accessor_duration() >= 99 && (timer || nova_null).accessor_duration() < 130) || nova_null).toBe(true, novaConstructors.newString2("Failed; expected 100ms, found ").plus0(NovaLong.toString((timer.accessor_duration())).plus0(novaConstructors.newString2("ms"))));
	
};

TimeStability.prototype.leapYear = function (out) {
	var self = this;
	
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing leapYear "));
	(Nest.expect215(novaConstructors.newDateTime2(1900).accessor_isLeapYear()) || nova_null).toBe(false, novaConstructors.newString2("1900 is not a leap year"));
	(Nest.expect216(novaConstructors.newDateTime2(2016).accessor_isLeapYear()) || nova_null).toBe(true, novaConstructors.newString2("2016 is a leap year"));
	(Nest.expect217(novaConstructors.newDateTime2(2017).accessor_isLeapYear()) || nova_null).toBe(false, novaConstructors.newString2("2017 is not a leap year"));
	(Nest.expect218(novaConstructors.newDateTime2(2018).accessor_isLeapYear()) || nova_null).toBe(false, novaConstructors.newString2("2018 is not a leap year"));
	(Nest.expect219(novaConstructors.newDateTime2(2019).accessor_isLeapYear()) || nova_null).toBe(false, novaConstructors.newString2("2019 is not a leap year"));
	(Nest.expect220(novaConstructors.newDateTime2(2020).accessor_isLeapYear()) || nova_null).toBe(true, novaConstructors.newString2("2020 is a leap year"));
	(Nest.expect1(() => {
				novaConstructors.newDateTime2(2017, 2, 29);
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
	(Nest.expect1(() => {
				novaConstructors.newDateTime2(2016, 2, 29);
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
	
};

TimeStability.prototype.invalidDateTimeYear = function (out) {
	var self = this;
	
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing invalidDateTimeYear "));
	(Nest.expect1(() => {
				novaConstructors.newDateTime2(0);
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
	
};

TimeStability.prototype.invalidDateTimeMonth = function (out) {
	var self = this;
	
	var m;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing invalidDateTimeMonth "));
	(Nest.expect1(() => {
				novaConstructors.newDateTime2(undefined, 0);
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
	m = 1;
	var i;
	i = 0;
	for (; i < 12; i++) {
		(Nest.expect1(() => {
					novaConstructors.newDateTime2(undefined, m++);
					
		}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
	}
	(Nest.expect1(() => {
				novaConstructors.newDateTime2(undefined, 13);
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
	(Nest.expect1(() => {
				novaConstructors.newDateTime2(undefined, -1);
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
	
};

TimeStability.prototype.invalidDateTimeDay = function (out) {
	var self = this;
	
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing invalidDateTimeDay "));
	(Nest.expect1(() => {
				novaConstructors.newDateTime2(undefined, 12, 31);
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
	(Nest.expect1(() => {
				novaConstructors.newDateTime2(undefined, 11, 31);
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
	(Nest.expect1(() => {
				novaConstructors.newDateTime2(2020, 2, 29);
				
	}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
	(Nest.expect1(() => {
				novaConstructors.newDateTime2(2021, 2, 29);
				
	}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
	(NovaDateTime.MONTH_DAYS || nova_null).forEach1((days, month, _3) => {
			var d;
			d = 1;
			var i;
			i = 0;
			for (; i < days; i++) {
				(Nest.expect1(() => {
							novaConstructors.newDateTime2(2020, month + 1, d++);
							
				}) || nova_null).toNotThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
			}
			(Nest.expect1(() => {
						novaConstructors.newDateTime2(2020, month + 1, -1);
						
			}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
			(Nest.expect1(() => {
						novaConstructors.newDateTime2(2020, month + 1, 0);
						
			}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
			(Nest.expect1(() => {
						novaConstructors.newDateTime2(2020, month + 1, days + 1);
						
			}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false));
			
	});
	
};

TimeStability.prototype.basicEpochTime = function (out) {
	var millis;
	var fromEpoch;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing basicEpochTime "));
	millis = 1490227200000;
	fromEpoch = novaConstructors.newDateTime1(millis);
	(Nest.expect221((fromEpoch || nova_null).millis) || nova_null).toBe(millis);
	(Nest.expect222((fromEpoch || nova_null).year) || nova_null).toBe(2017);
	(Nest.expect223((fromEpoch || nova_null).month) || nova_null).toBe(3);
	(Nest.expect224((fromEpoch || nova_null).dayOfMonth) || nova_null).toBe(23);
	
};

TimeStability.prototype.newYearEpochTime = function (out) {
	var newYearMillis;
	var newYear;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing newYearEpochTime "));
	newYearMillis = 1483228800000;
	newYear = novaConstructors.newDateTime1(newYearMillis);
	(Nest.expect225((newYear || nova_null).millis) || nova_null).toBe(newYearMillis);
	(Nest.expect226((newYear || nova_null).year) || nova_null).toBe(2017);
	(Nest.expect227((newYear || nova_null).month) || nova_null).toBe(1);
	(Nest.expect228((newYear || nova_null).dayOfMonth) || nova_null).toBe(1);
	
};

TimeStability.prototype.newYearEveEpochTime = function (out) {
	var newYearEveMillis;
	var newYearEve;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing newYearEveEpochTime "));
	newYearEveMillis = 1483142400000;
	newYearEve = novaConstructors.newDateTime1(newYearEveMillis);
	(Nest.expect229((newYearEve || nova_null).millis) || nova_null).toBe(newYearEveMillis);
	(Nest.expect230((newYearEve || nova_null).year) || nova_null).toBe(2016);
	(Nest.expect231((newYearEve || nova_null).month) || nova_null).toBe(12);
	(Nest.expect232((newYearEve || nova_null).dayOfMonth) || nova_null).toBe(31);
	
};

TimeStability.prototype.leapYearEpochTime = function (out) {
	var leapYear2016Millis;
	var leapYear2016;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing leapYearEpochTime "));
	leapYear2016Millis = 1456722000000;
	leapYear2016 = novaConstructors.newDateTime1(leapYear2016Millis);
	(Nest.expect233((leapYear2016 || nova_null).millis) || nova_null).toBe(leapYear2016Millis);
	(Nest.expect234((leapYear2016 || nova_null).year) || nova_null).toBe(2016);
	(Nest.expect235((leapYear2016 || nova_null).month) || nova_null).toBe(2);
	(Nest.expect236((leapYear2016 || nova_null).dayOfMonth) || nova_null).toBe(29);
	
};

TimeStability.prototype.runTests = function (onResult, out) {
	var testTimer;
	var leapYearTimer;
	var invalidDateTimeYearTimer;
	var invalidDateTimeMonthTimer;
	var invalidDateTimeDayTimer;
	var basicEpochTimeTimer;
	var newYearEpochTimeTimer;
	var newYearEveEpochTimeTimer;
	var leapYearEpochTimeTimer;
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing TimeStability"));
	testTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.test(out);
		(testTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, testTimer, TimeStability._testTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.1982428144455144);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(testTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, testTimer, TimeStability._testTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	leapYearTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.leapYear(out);
		(leapYearTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, leapYearTimer, TimeStability._leapYearTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8057833492225075);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(leapYearTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, leapYearTimer, TimeStability._leapYearTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	invalidDateTimeYearTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.invalidDateTimeYear(out);
		(invalidDateTimeYearTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, invalidDateTimeYearTimer, TimeStability._invalidDateTimeYearTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.8988866035801297);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(invalidDateTimeYearTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, invalidDateTimeYearTimer, TimeStability._invalidDateTimeYearTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	invalidDateTimeMonthTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.invalidDateTimeMonth(out);
		(invalidDateTimeMonthTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, invalidDateTimeMonthTimer, TimeStability._invalidDateTimeMonthTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.2390909425136073);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(invalidDateTimeMonthTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, invalidDateTimeMonthTimer, TimeStability._invalidDateTimeMonthTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	invalidDateTimeDayTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.invalidDateTimeDay(out);
		(invalidDateTimeDayTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, invalidDateTimeDayTimer, TimeStability._invalidDateTimeDayTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.28372943943928697);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(invalidDateTimeDayTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, invalidDateTimeDayTimer, TimeStability._invalidDateTimeDayTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	basicEpochTimeTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.basicEpochTime(out);
		(basicEpochTimeTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, basicEpochTimeTimer, TimeStability._basicEpochTimeTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.6124303089850555);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(basicEpochTimeTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, basicEpochTimeTimer, TimeStability._basicEpochTimeTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	newYearEpochTimeTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.newYearEpochTime(out);
		(newYearEpochTimeTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, newYearEpochTimeTimer, TimeStability._newYearEpochTimeTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.3139753871485723);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(newYearEpochTimeTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, newYearEpochTimeTimer, TimeStability._newYearEpochTimeTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	newYearEveEpochTimeTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.newYearEveEpochTime(out);
		(newYearEveEpochTimeTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, newYearEveEpochTimeTimer, TimeStability._newYearEveEpochTimeTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.6858430089298324);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(newYearEveEpochTimeTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, newYearEveEpochTimeTimer, TimeStability._newYearEveEpochTimeTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	leapYearEpochTimeTimer = novaConstructors.newTimer().start();
	try {
		var testResult;
		this.leapYearEpochTime(out);
		(leapYearEpochTimeTimer || nova_null).stop();
		(out || nova_null).write(novaConstructors.newString2("- Success\n"));
		testResult = novaConstructors.newTestResult(true, leapYearEpochTimeTimer, TimeStability._leapYearEpochTimeTestCase);
		onResult(testResult);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.6295737043011067);
			console.error(e);
			process.exit(1);
		} else {
			var testResult;
			(leapYearEpochTimeTimer || nova_null).stop();
			(out || nova_null).write(novaConstructors.newString2("- Failure: ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2("\n"))));
			testResult = novaConstructors.newTestResult(false, leapYearEpochTimeTimer, TimeStability._leapYearEpochTimeTestCase);
			onResult(testResult);
		}
	 }
	finally {
	}
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

TimeStability.init = function () {
	return this;
	
};

TimeStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/TimeStability"), false);
	
};

TimeStability.prototype.mutator__js_class = function () {
	
};

TimeStability.prototype.super = function () {
	
};

novaConstructors.newTimeStability = function () {
	var __value = new TimeStability()
	NovaObject.call(__value);
	TimeStability.prototype.super.apply(__value, [].slice.call(arguments));
	return TimeStability.init.call(__value);
	
};

var ToStringStability = function () {
	this._js_class = null;
	
	
};

ToStringStability.prototype = Object.create(NovaObject.prototype);
ToStringStability.prototype.constructor = ToStringStability;


ToStringStability.prototype.destroy = function () {
	
};

ToStringStability.prototype.testToString = function () {
	var d;
	var b;
	var i;
	var l;
	d = 5.232;
	this.checkToString1(novaConstructors.newString2("Double"), d, novaConstructors.newString2("5.232"));
	b = 127;
	this.checkToString1(novaConstructors.newString2("Byte"), b, novaConstructors.newString2("127"));
	i = 2147483647;
	this.checkToString1(novaConstructors.newString2("Int"), i, novaConstructors.newString2("2147483647"));
	l = -9223372036854775808;
	this.checkToString1(novaConstructors.newString2("Long"), l, novaConstructors.newString2("-9223372036854775808"));
	
};

ToStringStability.prototype.checkToString0 = function (type, number, expected) {
	return (Nest.expect3(((number || nova_null).toString() || nova_null).equals0(expected)) || nova_null).toBe(true, ((type) || nova_null).plus0(novaConstructors.newString2(".toString failed. expected ").plus0(((expected) || nova_null).plus0(novaConstructors.newString2(" but received ").plus0((((number) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" ").plus0(NovaInt.toString((number.toString().compareTo0(expected))).plus0(novaConstructors.newString2("")))))))));
	
};

ToStringStability.prototype.runTests = function (onResult, out) {
	onResult = typeof onResult === 'undefined' ? (_1) => {
		
	} : onResult;
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(Nest.out || nova_null).writeHeader1(novaConstructors.newString2("Testing ToStringStability"));
	(out || nova_null).write(novaConstructors.newString2("\n"));
	
};

ToStringStability.init = function () {
	return this;
	
};

ToStringStability.prototype.checkToString1 = function (type, number, expected) {
	return (Nest.expect240(NovaDouble.toString(number).equals0(expected)) || nova_null).toBe(true, ((type) || nova_null).plus0(novaConstructors.newString2(".toString failed. expected ").plus0(((expected) || nova_null).plus0(novaConstructors.newString2(" but received ").plus0((((NovaDouble.toString(number).plus0(novaConstructors.newString2(" ").plus0(NovaInt.toString((NovaDouble.toString(number).compareTo0(expected))).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" ").plus0(NovaInt.toString((NovaDouble.toString(number).compareTo0(expected))).plus0(novaConstructors.newString2("")))))))));
	
};

ToStringStability.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/ToStringStability"), false);
	
};

ToStringStability.prototype.mutator__js_class = function () {
	
};

ToStringStability.prototype.accessor_model = function () {
	return ToStringStability._runTestsTestRunner;
	
};

ToStringStability.prototype.mutator_model = function () {
	
};

ToStringStability.prototype.super = function () {
	
};

novaConstructors.newToStringStability = function () {
	var __value = new ToStringStability()
	NovaObject.call(__value);
	ToStringStability.prototype.super.apply(__value, [].slice.call(arguments));
	return ToStringStability.init.call(__value);
	
};

var UnstableException = function () {
	
	
};

UnstableException.prototype = Object.create(Exception.prototype);
UnstableException.prototype.constructor = UnstableException;


UnstableException.prototype.destroy = function () {
	
};

UnstableException.init = function (message) {
	return Exception.init.call(this, message);
	return this;
	
};

UnstableException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("stabilitytest/UnstableException"), false);
	
};

UnstableException.prototype.mutator__js_class = function () {
	
};

UnstableException.prototype.super = function () {
	
};

novaConstructors.newUnstableException = function (message) {
	var __value = new UnstableException()
	Exception.call(__value);
	UnstableException.prototype.super.apply(__value, [].slice.call(arguments));
	return UnstableException.init.call(__value, message);
	
};

var NestException = function () {
	
	
};

NestException.prototype = Object.create(Exception.prototype);
NestException.prototype.constructor = NestException;


NestException.prototype.destroy = function () {
	
};

NestException.init = function (message) {
	return Exception.init.call(this, message);
	return this;
	
};

NestException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/NestException"), false);
	
};

NestException.prototype.mutator__js_class = function () {
	
};

NestException.prototype.super = function () {
	
};

novaConstructors.newNestException = function (message) {
	var __value = new NestException()
	Exception.call(__value);
	NestException.prototype.super.apply(__value, [].slice.call(arguments));
	return NestException.init.call(__value, message);
	
};

var InvalidAssertionException = function () {
	
	
};

InvalidAssertionException.prototype = Object.create(NestException.prototype);
InvalidAssertionException.prototype.constructor = InvalidAssertionException;


InvalidAssertionException.prototype.destroy = function () {
	
};

InvalidAssertionException.init = function (message) {
	return NestException.init.call(this, message);
	return this;
	
};

InvalidAssertionException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/InvalidAssertionException"), false);
	
};

InvalidAssertionException.prototype.mutator__js_class = function () {
	
};

InvalidAssertionException.prototype.super = function () {
	
};

novaConstructors.newInvalidAssertionException = function (message) {
	var __value = new InvalidAssertionException()
	NestException.call(__value);
	InvalidAssertionException.prototype.super.apply(__value, [].slice.call(arguments));
	return InvalidAssertionException.init.call(__value, message);
	
};

var Nest = function () {
	this.data = null;
	
	
};

Nest.prototype = Object.create(NovaObject.prototype);
Nest.prototype.constructor = Nest;


Nest.prototype.destroy = function () {
	
};

Nest.init = function (data) {
	this.data = data;
	return this;
	
};

Nest.prototype.toBe = function (other, message) {
	message = typeof message === 'undefined' ? null : message;
	if (other != this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((this.data) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" != ").plus0((((other) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest.prototype.toNotBe = function (other, message) {
	message = typeof message === 'undefined' ? null : message;
	if (other === this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((this.data) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" == ").plus0((((other) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest.prototype.toBeWithinToleranceOf = function (target, tolerance, message) {
	tolerance = typeof tolerance === 'undefined' ? 0.0001 : tolerance;
	message = typeof message === 'undefined' ? null : message;
	if (!NovaDouble.withinTolerance(((this.data) || nova_null).value, target, tolerance)) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((this.data) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" not within tolerance of ").plus0(NovaDouble.toString((target)).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest.prototype.toThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Did not throw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = this.data;
	if (!Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest.prototype.toNotThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Threw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = this.data;
	if (Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest.fail = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("Failure") : message;
	throw novaConstructors.newInvalidAssertionException(message);
	
};

Nest.expect0 = function (obj) {
	return novaConstructors.newNest(obj);
	
};

Nest.expect1 = function (func) {
	return novaConstructors.newNest(func);
	
};

Nest.test = function (description, testCode) {
	testCode();
	
};

Nest.expect2 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect3 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect4 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect5 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect6 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect7 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect8 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect9 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect10 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect11 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect12 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect13 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect14 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect15 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect16 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect17 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect18 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect19 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect20 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect21 = function (obj) {
	return novaConstructors.newNest1Char(obj);
	
};

Nest.expect22 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect23 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect24 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect25 = function (obj) {
	return novaConstructors.newNest1Char(obj);
	
};

Nest.expect26 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect27 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect28 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect29 = function (obj) {
	return novaConstructors.newNest1Char(obj);
	
};

Nest.expect30 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect31 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect32 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect33 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect34 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect35 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect36 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect37 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect38 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect39 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect40 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect41 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect42 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect43 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect44 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect45 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect46 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect47 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect48 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect49 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect50 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect51 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect52 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect53 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect54 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect55 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect56 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect57 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect58 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect59 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect60 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect61 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect62 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect63 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect64 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect65 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect66 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect67 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect68 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect69 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect70 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect71 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect72 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect73 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect74 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect75 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect76 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect77 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect78 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect79 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect80 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect81 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect82 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect83 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect84 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect85 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect86 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect87 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect88 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect89 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect90 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect91 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect92 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect93 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect94 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect95 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect96 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect97 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect98 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect99 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect100 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect101 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect102 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect103 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect104 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect105 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect106 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect107 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect108 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect109 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect110 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect111 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect112 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect113 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect114 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect115 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect116 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect117 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect118 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect119 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect120 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect121 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect122 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect123 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect124 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect125 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect126 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect127 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect128 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect129 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect130 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect131 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect132 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect133 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect134 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect135 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect136 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect137 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect138 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect139 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect140 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect141 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect142 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect143 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect144 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect145 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect146 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect147 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect148 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect149 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect150 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect151 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect152 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect153 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect154 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect155 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect156 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect157 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect158 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect159 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect160 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect161 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect162 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect163 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect164 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect165 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect166 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect167 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect168 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect169 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect170 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect171 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect172 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect173 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect174 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect175 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect176 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect177 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect178 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect179 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect180 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect181 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect182 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect183 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect184 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect185 = function (obj) {
	return novaConstructors.newNest1Byte(obj);
	
};

Nest.expect186 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect187 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect188 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect189 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect190 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect191 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect192 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect193 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect194 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect195 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect196 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect197 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect198 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect199 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect200 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect201 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect202 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect203 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect204 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect205 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect206 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect207 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect208 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect209 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect210 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect211 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect212 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect213 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect214 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect215 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect216 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect217 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect218 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect219 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect220 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.expect221 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect222 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect223 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect224 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect225 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect226 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect227 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect228 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect229 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect230 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect231 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect232 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect233 = function (obj) {
	return novaConstructors.newNest1Long(obj);
	
};

Nest.expect234 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect235 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect236 = function (obj) {
	return novaConstructors.newNest1Int(obj);
	
};

Nest.expect237 = function (obj) {
	return novaConstructors.newNest1Byte(obj);
	
};

Nest.expect238 = function (obj) {
	return novaConstructors.newNest1Float(obj);
	
};

Nest.expect239 = function (obj) {
	return novaConstructors.newNest1Float(obj);
	
};

Nest.expect240 = function (obj) {
	return novaConstructors.newNest1Bool(obj);
	
};

Nest.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/Nest"), false);
	
};

Nest.prototype.mutator__js_class = function () {
	
};

Nest.prototype.super = function () {
	
};

novaConstructors.newNest = function (data) {
	var __value = new Nest()
	NovaObject.call(__value);
	Nest.prototype.super.apply(__value, [].slice.call(arguments));
	return Nest.init.call(__value, data);
	
};

var Nest1Bool = function () {
	this.data = 0;
	
	
};

Nest1Bool.prototype = Object.create(NovaObject.prototype);
Nest1Bool.prototype.constructor = Nest1Bool;


Nest1Bool.prototype.destroy = function () {
	
};

Nest1Bool.init = function (data) {
	this.data = data;
	this.data = data;
	return this;
	
};

Nest1Bool.prototype.toBe = function (other, message) {
	return true;
	message = typeof message === 'undefined' ? null : message;
	if (other != this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((Bool.toString(this.data).plus0(novaConstructors.newString2(" != ").plus0((((Bool.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" != ").plus0((((Bool.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Bool.prototype.toNotBe = function (other, message) {
	return true;
	message = typeof message === 'undefined' ? null : message;
	if (other === this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((Bool.toString(this.data).plus0(novaConstructors.newString2(" == ").plus0((((Bool.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" == ").plus0((((Bool.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Bool.prototype.toThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Did not throw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = novaConstructors.newBool(this.data);
	if (!Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest1Bool.prototype.toNotThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Threw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = novaConstructors.newBool(this.data);
	if (Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest1Bool.fail = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("Failure") : message;
	throw novaConstructors.newInvalidAssertionException(message);
	
};

Nest1Bool.expect0 = function (obj) {
	return novaConstructors.newNest(obj);
	
};

Nest1Bool.expect1 = function (func) {
	return novaConstructors.newNest(func);
	return novaConstructors.newNest(func);
	
};

Nest1Bool.test = function (description, testCode) {
	testCode();
	
};

Nest1Bool.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/Nest"), false);
	
};

Nest1Bool.prototype.super = function () {
	Nest1Bool.out = novaConstructors.newFancyOutputStream();
	Nest1Bool.out = novaConstructors.newFancyOutputStream();
	
};

novaConstructors.newNest1Bool = function (data) {
	var __value = new Nest1Bool()
	NovaObject.call(__value);
	Nest1Bool.prototype.super.apply(__value, [].slice.call(arguments));
	return Nest1Bool.init.call(__value, data);
	
};

var Nest1Int = function () {
	this.data = 0;
	
	
};

Nest1Int.prototype = Object.create(NovaObject.prototype);
Nest1Int.prototype.constructor = Nest1Int;


Nest1Int.prototype.destroy = function () {
	
};

Nest1Int.init = function (data) {
	this.data = data;
	this.data = data;
	return this;
	
};

Nest1Int.prototype.toBe = function (other, message) {
	message = typeof message === 'undefined' ? null : message;
	if (other != this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((NovaInt.toString(this.data).plus0(novaConstructors.newString2(" != ").plus0((((NovaInt.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" != ").plus0((((NovaInt.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Int.prototype.toNotBe = function (other, message) {
	message = typeof message === 'undefined' ? null : message;
	if (other === this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((NovaInt.toString(this.data).plus0(novaConstructors.newString2(" == ").plus0((((NovaInt.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" == ").plus0((((NovaInt.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Int.prototype.toBeWithinToleranceOf = function (target, tolerance, message) {
	tolerance = typeof tolerance === 'undefined' ? 0.0001 : tolerance;
	message = typeof message === 'undefined' ? null : message;
	if (!NovaDouble.withinTolerance((this.data), target, tolerance)) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((NovaInt.toString(this.data).plus0(novaConstructors.newString2(" not within tolerance of ").plus0(NovaDouble.toString((target)).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" not within tolerance of ").plus0(NovaDouble.toString((target)).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Int.prototype.toThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Did not throw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = novaConstructors.newInt(this.data);
	if (!Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest1Int.prototype.toNotThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Threw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = novaConstructors.newInt(this.data);
	if (Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest1Int.fail = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("Failure") : message;
	throw novaConstructors.newInvalidAssertionException(message);
	
};

Nest1Int.expect0 = function (obj) {
	return novaConstructors.newNest(obj);
	
};

Nest1Int.expect1 = function (func) {
	return novaConstructors.newNest(func);
	
};

Nest1Int.test = function (description, testCode) {
	testCode();
	
};

Nest1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/Nest"), false);
	
};

Nest1Int.prototype.super = function () {
	Nest1Int.out = novaConstructors.newFancyOutputStream();
	
};

novaConstructors.newNest1Int = function (data) {
	var __value = new Nest1Int()
	NovaObject.call(__value);
	Nest1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return Nest1Int.init.call(__value, data);
	
};

var Nest1Long = function () {
	this.data = 0;
	
	
};

Nest1Long.prototype = Object.create(NovaObject.prototype);
Nest1Long.prototype.constructor = Nest1Long;


Nest1Long.prototype.destroy = function () {
	
};

Nest1Long.init = function (data) {
	this.data = data;
	this.data = data;
	return this;
	
};

Nest1Long.prototype.toBe = function (other, message) {
	message = typeof message === 'undefined' ? null : message;
	if (other != this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((NovaLong.toString(this.data).plus0(novaConstructors.newString2(" != ").plus0((((NovaLong.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" != ").plus0((((NovaLong.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Long.prototype.toNotBe = function (other, message) {
	message = typeof message === 'undefined' ? null : message;
	if (other === this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((NovaLong.toString(this.data).plus0(novaConstructors.newString2(" == ").plus0((((NovaLong.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" == ").plus0((((NovaLong.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Long.prototype.toBeWithinToleranceOf = function (target, tolerance, message) {
	tolerance = typeof tolerance === 'undefined' ? 0.0001 : tolerance;
	message = typeof message === 'undefined' ? null : message;
	if (!NovaDouble.withinTolerance((this.data), target, tolerance)) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((NovaLong.toString(this.data).plus0(novaConstructors.newString2(" not within tolerance of ").plus0(NovaDouble.toString((target)).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" not within tolerance of ").plus0(NovaDouble.toString((target)).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Long.prototype.toThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Did not throw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = novaConstructors.newLong(this.data);
	if (!Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest1Long.prototype.toNotThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Threw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = novaConstructors.newLong(this.data);
	if (Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest1Long.fail = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("Failure") : message;
	throw novaConstructors.newInvalidAssertionException(message);
	
};

Nest1Long.expect0 = function (obj) {
	return novaConstructors.newNest(obj);
	
};

Nest1Long.expect1 = function (func) {
	return novaConstructors.newNest(func);
	
};

Nest1Long.test = function (description, testCode) {
	testCode();
	
};

Nest1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/Nest"), false);
	
};

Nest1Long.prototype.super = function () {
	Nest1Long.out = novaConstructors.newFancyOutputStream();
	
};

novaConstructors.newNest1Long = function (data) {
	var __value = new Nest1Long()
	NovaObject.call(__value);
	Nest1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return Nest1Long.init.call(__value, data);
	
};

var Nest1Char = function () {
	this.data = 0;
	
	
};

Nest1Char.prototype = Object.create(NovaObject.prototype);
Nest1Char.prototype.constructor = Nest1Char;


Nest1Char.prototype.destroy = function () {
	
};

Nest1Char.init = function (data) {
	this.data = data;
	this.data = data;
	return this;
	
};

Nest1Char.prototype.toBe = function (other, message) {
	message = typeof message === 'undefined' ? null : message;
	if (other != this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((Char.toString(this.data).plus0(novaConstructors.newString2(" != ").plus0((((Char.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" != ").plus0((((Char.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Char.prototype.toNotBe = function (other, message) {
	message = typeof message === 'undefined' ? null : message;
	if (other === this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((Char.toString(this.data).plus0(novaConstructors.newString2(" == ").plus0((((Char.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" == ").plus0((((Char.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Char.prototype.toBeWithinToleranceOf = function (target, tolerance, message) {
	tolerance = typeof tolerance === 'undefined' ? 0.0001 : tolerance;
	message = typeof message === 'undefined' ? null : message;
	if (!NovaDouble.withinTolerance((this.data), target, tolerance)) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((Char.toString(this.data).plus0(novaConstructors.newString2(" not within tolerance of ").plus0(NovaDouble.toString((target)).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" not within tolerance of ").plus0(NovaDouble.toString((target)).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Char.prototype.toThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Did not throw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = novaConstructors.newChar(this.data);
	if (!Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest1Char.prototype.toNotThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Threw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = novaConstructors.newChar(this.data);
	if (Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest1Char.fail = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("Failure") : message;
	throw novaConstructors.newInvalidAssertionException(message);
	
};

Nest1Char.expect0 = function (obj) {
	return novaConstructors.newNest(obj);
	
};

Nest1Char.expect1 = function (func) {
	return novaConstructors.newNest(func);
	
};

Nest1Char.test = function (description, testCode) {
	testCode();
	
};

Nest1Char.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/Nest"), false);
	
};

Nest1Char.prototype.super = function () {
	Nest1Char.out = novaConstructors.newFancyOutputStream();
	
};

novaConstructors.newNest1Char = function (data) {
	var __value = new Nest1Char()
	NovaObject.call(__value);
	Nest1Char.prototype.super.apply(__value, [].slice.call(arguments));
	return Nest1Char.init.call(__value, data);
	
};

var Nest1Byte = function () {
	this.data = 0;
	
	
};

Nest1Byte.prototype = Object.create(NovaObject.prototype);
Nest1Byte.prototype.constructor = Nest1Byte;


Nest1Byte.prototype.destroy = function () {
	
};

Nest1Byte.init = function (data) {
	this.data = data;
	this.data = data;
	return this;
	
};

Nest1Byte.prototype.toBe = function (other, message) {
	message = typeof message === 'undefined' ? null : message;
	if (other != this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((NovaByte.toString(this.data).plus0(novaConstructors.newString2(" != ").plus0((((NovaByte.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" != ").plus0((((NovaByte.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Byte.prototype.toNotBe = function (other, message) {
	message = typeof message === 'undefined' ? null : message;
	if (other === this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((NovaByte.toString(this.data).plus0(novaConstructors.newString2(" == ").plus0((((NovaByte.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" == ").plus0((((NovaByte.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Byte.prototype.toBeWithinToleranceOf = function (target, tolerance, message) {
	tolerance = typeof tolerance === 'undefined' ? 0.0001 : tolerance;
	message = typeof message === 'undefined' ? null : message;
	if (!NovaDouble.withinTolerance((this.data), target, tolerance)) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((NovaByte.toString(this.data).plus0(novaConstructors.newString2(" not within tolerance of ").plus0(NovaDouble.toString((target)).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" not within tolerance of ").plus0(NovaDouble.toString((target)).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Byte.prototype.toThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Did not throw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = novaConstructors.newByte(this.data);
	if (!Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest1Byte.prototype.toNotThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Threw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = novaConstructors.newByte(this.data);
	if (Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest1Byte.fail = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("Failure") : message;
	throw novaConstructors.newInvalidAssertionException(message);
	
};

Nest1Byte.expect0 = function (obj) {
	return novaConstructors.newNest(obj);
	
};

Nest1Byte.expect1 = function (func) {
	return novaConstructors.newNest(func);
	
};

Nest1Byte.test = function (description, testCode) {
	testCode();
	
};

Nest1Byte.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/Nest"), false);
	
};

Nest1Byte.prototype.super = function () {
	Nest1Byte.out = novaConstructors.newFancyOutputStream();
	
};

novaConstructors.newNest1Byte = function (data) {
	var __value = new Nest1Byte()
	NovaObject.call(__value);
	Nest1Byte.prototype.super.apply(__value, [].slice.call(arguments));
	return Nest1Byte.init.call(__value, data);
	
};

var Nest1Float = function () {
	this.data = 0;
	
	
};

Nest1Float.prototype = Object.create(NovaObject.prototype);
Nest1Float.prototype.constructor = Nest1Float;


Nest1Float.prototype.destroy = function () {
	
};

Nest1Float.init = function (data) {
	this.data = data;
	this.data = data;
	return this;
	
};

Nest1Float.prototype.toBe = function (other, message) {
	message = typeof message === 'undefined' ? null : message;
	if (other != this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((NovaFloat.toString(this.data).plus0(novaConstructors.newString2(" != ").plus0((((NovaFloat.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" != ").plus0((((NovaFloat.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Float.prototype.toNotBe = function (other, message) {
	message = typeof message === 'undefined' ? null : message;
	if (other === this.data) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((NovaFloat.toString(this.data).plus0(novaConstructors.newString2(" == ").plus0((((NovaFloat.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" == ").plus0((((NovaFloat.toString(other).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Float.prototype.toBeWithinToleranceOf = function (target, tolerance, message) {
	tolerance = typeof tolerance === 'undefined' ? 0.0001 : tolerance;
	message = typeof message === 'undefined' ? null : message;
	if (!NovaDouble.withinTolerance((this.data), target, tolerance)) {
		var nova_local_0;
		message = (nova_local_0 = message) != null ? nova_local_0 : (((NovaFloat.toString(this.data).plus0(novaConstructors.newString2(" not within tolerance of ").plus0(NovaDouble.toString((target)).plus0(novaConstructors.newString2(""))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" not within tolerance of ").plus0(NovaDouble.toString((target)).plus0(novaConstructors.newString2(""))));
		throw novaConstructors.newInvalidAssertionException(message);
		return false;
	}
	return true;
	
};

Nest1Float.prototype.toThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Did not throw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = novaConstructors.newFloat(this.data);
	if (!Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest1Float.prototype.toNotThrow = function (exceptionType, message, soft) {
	var func;
	message = typeof message === 'undefined' ? novaConstructors.newString2("Threw exception type ").plus0((((exceptionType) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))) : message;
	soft = typeof soft === 'undefined' ? false : soft;
	func = novaConstructors.newFloat(this.data);
	if (Exception.catchType(func, exceptionType, soft)) {
		throw novaConstructors.newInvalidAssertionException(message);
	}
	
};

Nest1Float.fail = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("Failure") : message;
	throw novaConstructors.newInvalidAssertionException(message);
	
};

Nest1Float.expect0 = function (obj) {
	return novaConstructors.newNest(obj);
	
};

Nest1Float.expect1 = function (func) {
	return novaConstructors.newNest(func);
	
};

Nest1Float.test = function (description, testCode) {
	testCode();
	
};

Nest1Float.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/Nest"), false);
	
};

Nest1Float.prototype.super = function () {
	Nest1Float.out = novaConstructors.newFancyOutputStream();
	
};

novaConstructors.newNest1Float = function (data) {
	var __value = new Nest1Float()
	NovaObject.call(__value);
	Nest1Float.prototype.super.apply(__value, [].slice.call(arguments));
	return Nest1Float.init.call(__value, data);
	
};

var EqualsOperator = function () {
	
	
};

EqualsOperator.prototype.constructor = EqualsOperator;


EqualsOperator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/operators/EqualsOperator"), false);
	
};

EqualsOperator.prototype.mutator__js_class = function () {
	
};

var TestCase = function () {
	this.functionName = null;
	this.description = null;
	this.id = 0;
	this._js_class = null;
	
	
};

TestCase.prototype = Object.create(NovaObject.prototype);
TestCase.prototype.constructor = TestCase;


TestCase.prototype.destroy = function () {
	
};

TestCase.init = function (functionName, description) {
	description = typeof description === 'undefined' ? null : description;
	this.functionName = functionName;
	this.description = description;
	return this;
	
};

TestCase.prototype.equals0 = function (other) {
	return this.id === (other || nova_null).id;
	
};

TestCase.prototype.toString = function () {
	return novaConstructors.newString2("\"").plus0(((this.accessor_header()) || nova_null).plus0(novaConstructors.newString2("\"")));
	
};

TestCase.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/TestCase"), false);
	
};

TestCase.prototype.mutator__js_class = function () {
	
};

TestCase.prototype.accessor_header = function () {
	var nova_local_0;
	return (nova_local_0 = this.description) != null ? nova_local_0 : this.functionName;
	
};

TestCase.prototype.mutator_header = function () {
	
};

TestCase.prototype.accessor_hashCodeLong = function () {
	return this.id;
	
};

TestCase.prototype.mutator_hashCodeLong = function () {
	
};

TestCase.prototype.super = function () {
	this.id = ++TestCase.staticId;
	
};

novaConstructors.newTestCase = function (functionName, description) {
	var __value = new TestCase()
	NovaObject.call(__value);
	TestCase.prototype.super.apply(__value, [].slice.call(arguments));
	return TestCase.init.call(__value, functionName, description);
	
};

var TestResult = function () {
	this.success = 0;
	this.timer = null;
	this.testCase = null;
	
	
};

TestResult.prototype = Object.create(NovaObject.prototype);
TestResult.prototype.constructor = TestResult;


TestResult.prototype.destroy = function () {
	
};

TestResult.init = function (success, timer, testCase) {
	this.success = success;
	this.timer = timer;
	this.testCase = testCase;
	return this;
	
};

TestResult.prototype.toString = function () {
	return ((((this.testCase) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" => ")) || nova_null).plus0((this.success ? novaConstructors.newString2("Success") : novaConstructors.newString2("Failure")));
	
};

TestResult.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/TestResult"), false);
	
};

TestResult.prototype.mutator__js_class = function () {
	
};

TestResult.prototype.super = function () {
	
};

novaConstructors.newTestResult = function (success, timer, testCase) {
	var __value = new TestResult()
	NovaObject.call(__value);
	TestResult.prototype.super.apply(__value, [].slice.call(arguments));
	return TestResult.init.call(__value, success, timer, testCase);
	
};

var TestRunnerModel = function () {
	this.testCases = null;
	this.description = null;
	
	
};

TestRunnerModel.prototype = Object.create(NovaObject.prototype);
TestRunnerModel.prototype.constructor = TestRunnerModel;


TestRunnerModel.prototype.destroy = function () {
	
};

TestRunnerModel.init = function (testCases, description) {
	description = typeof description === 'undefined' ? null : description;
	this.mutator_testCases(testCases);
	this.description = description;
	return this;
	
};

TestRunnerModel.prototype.toString = function () {
	return novaConstructors.newString2("TestRunnerModel").plus0(((this.description) != null ? novaConstructors.newString2(" \"").plus0((this.description || nova_null).plus0(Char.toString('"'))) : novaConstructors.newString2("")));
	
};

TestRunnerModel.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/TestRunnerModel"), false);
	
};

TestRunnerModel.prototype.mutator__js_class = function () {
	
};

TestRunnerModel.prototype.accessor_testCases = function () {
	return this.testCases;
	
};

TestRunnerModel.prototype.mutator_testCases = function (value) {
	this.testCases = value;
	return value;
	
};

TestRunnerModel.prototype.super = function () {
	
};

novaConstructors.newTestRunnerModel = function (testCases, description) {
	var __value = new TestRunnerModel()
	NovaObject.call(__value);
	TestRunnerModel.prototype.super.apply(__value, [].slice.call(arguments));
	return TestRunnerModel.init.call(__value, testCases, description);
	
};

var TestSuite = function () {
	this.testRunners = null;
	
	
};

TestSuite.prototype = Object.create(NovaObject.prototype);
TestSuite.prototype.constructor = TestSuite;


TestSuite.prototype.destroy = function () {
	
};

TestSuite.init = function (testRunners) {
	this.testRunners = testRunners;
	return this;
	
};

TestSuite.prototype.toString = function () {
	return novaConstructors.newString2("TestSuite").plus0(((this.testRunners) != null ? novaConstructors.newString2(" ").plus0((this.testRunners || nova_null).toString()) : novaConstructors.newString2("")));
	
};

TestSuite.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/TestSuite"), false);
	
};

TestSuite.prototype.mutator__js_class = function () {
	
};

TestSuite.prototype.super = function () {
	
};

novaConstructors.newTestSuite = function (testRunners) {
	var __value = new TestSuite()
	NovaObject.call(__value);
	TestSuite.prototype.super.apply(__value, [].slice.call(arguments));
	return TestSuite.init.call(__value, testRunners);
	
};

var TestSuiteRunner = function () {
	
	
};

TestSuiteRunner.prototype.constructor = TestSuiteRunner;


TestSuiteRunner.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/TestSuiteRunner"), false);
	
};

TestSuiteRunner.prototype.mutator__js_class = function () {
	
};

var TestSuiteRunnerModel = function () {
	this.testRunners = null;
	this.testSuites = null;
	
	
};

TestSuiteRunnerModel.prototype = Object.create(TestRunnerModel.prototype);
TestSuiteRunnerModel.prototype.constructor = TestSuiteRunnerModel;


TestSuiteRunnerModel.prototype.destroy = function () {
	
};

TestSuiteRunnerModel.init = function (testSuites) {
	this.testSuites = testSuites;
	return TestRunnerModel.init.call(this, null, null);
	return this;
	
};

TestSuiteRunnerModel.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/TestSuiteRunnerModel"), false);
	
};

TestSuiteRunnerModel.prototype.mutator__js_class = function () {
	
};

TestSuiteRunnerModel.prototype.accessor_testCases = function () {
	var self = this;
	
	return (this.accessor_testRunners() || nova_null).reduce((_1, _2, _3, _4) => {
			return (_1 || nova_null).plus0((_2 || nova_null).accessor_testCases());
			
		}, novaConstructors.newArray0(0));
	
};

TestSuiteRunnerModel.prototype.mutator_testCases = function () {
	
};

TestSuiteRunnerModel.prototype.accessor_testRunners = function () {
	var self = this;
	
	return (this.testSuites || nova_null).reduce((_1, _2, _3, _4) => {
			return (_1 || nova_null).plus0((_2 || nova_null).testRunners);
			
		}, novaConstructors.newArray0(0));
	
};

TestSuiteRunnerModel.prototype.mutator_testRunners = function () {
	
};

TestSuiteRunnerModel.prototype.super = function () {
	
};

novaConstructors.newTestSuiteRunnerModel = function (testSuites) {
	var __value = new TestSuiteRunnerModel()
	TestRunnerModel.call(__value);
	TestSuiteRunnerModel.prototype.super.apply(__value, [].slice.call(arguments));
	return TestSuiteRunnerModel.init.call(__value, testSuites);
	
};

var UIComponent = function () {
	this.parent = null;
	this.x = 0;
	this.y = 0;
	this.absoluteY = 0;
	
	
};

UIComponent.prototype = Object.create(NovaObject.prototype);
UIComponent.prototype.constructor = UIComponent;


UIComponent.prototype.destroy = function () {
	
};

UIComponent.init = function (x, y) {
	this.x = x;
	this.y = y;
	return this;
	
};

UIComponent.prototype.onAdded = function () {
	
};

UIComponent.prototype.onRemoved = function () {
	
};

UIComponent.prototype.draw = function () {
	
};

UIComponent.prototype.paint = function () {
	this.draw();
	
};

UIComponent.prototype.repaint = function () {
	(this.accessor_window() || nova_null).repaint();
	
};

UIComponent.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/UIComponent"), false);
	
};

UIComponent.prototype.mutator__js_class = function () {
	
};

UIComponent.prototype.accessor_window = function () {
	var nova_local_0;
	return (nova_local_0 = this.parent) != null ? (nova_local_0.accessor_window()) : null;
	
};

UIComponent.prototype.mutator_window = function () {
	
};

UIComponent.prototype.accessor_absoluteX = function () {
	return this.x + ((this.parent) != null ? (this.parent || nova_null).x : 0);
	
};

UIComponent.prototype.mutator_absoluteX = function () {
	
};

UIComponent.prototype.accessor_absoluteY = function () {
	return this.y + ((this.parent) != null ? (this.parent || nova_null).y : 0);
	
};

UIComponent.prototype.mutator_absoluteY = function () {
	
};

UIComponent.prototype.super = function () {
	
};

novaConstructors.newUIComponent = function (x, y) {
	var __value = new UIComponent()
	NovaObject.call(__value);
	UIComponent.prototype.super.apply(__value, [].slice.call(arguments));
	return UIComponent.init.call(__value, x, y);
	
};

var UIParent = function () {
	this._js_class = null;
	
	
};

UIParent.prototype = Object.create(UIComponent.prototype);
UIParent.prototype.constructor = UIParent;


UIParent.prototype.paint = function () {
	var self = this;
	
	this.draw();
	(this.accessor_children() || nova_null).forEach0((_1, _2, _3) => {
			(_1 || nova_null).paint();
			
	});
	
};

UIParent.prototype.onAdded = function () {
	var self = this;
	
	this.super_onAdded();
	(this.accessor_children() || nova_null).forEach0((_1, _2, _3) => {
			(_1 || nova_null).onAdded();
			
	});
	
};

UIParent.prototype.addChild = function (component) {
	if (!(this.accessor_children() || nova_null).contains0(component)) {
		(this.accessor_children() || nova_null).add0(component);
		(component || nova_null).parent = this;
	}
	
};

UIParent.prototype.accessor_children = function () {
	return null;
	
};

UIParent.prototype.mutator_children = function (value) {
	return value;
	
};

UIParent.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/UIParent"), false);
	
};

UIParent.prototype.mutator__js_class = function () {
	
};

var Panel = function () {
	this.width = 0;
	this.height = 0;
	this.backgroundColor = null;
	this.children = null;
	
	
};

Panel.prototype = Object.create(UIComponent.prototype);
Panel.prototype.constructor = Panel;


Panel.prototype.destroy = function () {
	
};

Panel.init = function (x, y, width, height) {
	width = typeof width === 'undefined' ? 0 : width;
	height = typeof height === 'undefined' ? 0 : height;
	this.width = width;
	this.height = height;
	return UIComponent.init.call(this, x, y);
	return this;
	
};

Panel.prototype.onAdded = function () {
	
};

Panel.prototype.draw = function () {
	if ((this.backgroundColor) != null) {
	}
	
};

Panel.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/Panel"), false);
	
};

Panel.prototype.mutator__js_class = function () {
	
};

Panel.prototype.accessor_children = function () {
	return this.children;
	
};

Panel.prototype.mutator_children = function (value) {
	this.children = value;
	return value;
	
};

Panel.prototype.super = function () {
	this.mutator_children(novaConstructors.newArray());
	
};

novaConstructors.newPanel = function (x, y, width, height) {
	var __value = new Panel()
	UIComponent.call(__value);
	Panel.prototype.super.apply(__value, [].slice.call(arguments));
	return Panel.init.call(__value, x, y, width, height);
	
};

var ResultBar = function () {
	this.successPanel = null;
	this.failurePanel = null;
	this.borderSize = 0;
	this.testCount = 0;
	this.successCount = 0;
	this._js_class = null;
	
	
};

ResultBar.prototype = Object.create(Panel.prototype);
ResultBar.prototype.constructor = ResultBar;


ResultBar.prototype.destroy = function () {
	
};

ResultBar.init = function (x, y, width, height, borderSize) {
	x = typeof x === 'undefined' ? 0 : x;
	y = typeof y === 'undefined' ? 0 : y;
	width = typeof width === 'undefined' ? 150 : width;
	height = typeof height === 'undefined' ? 25 : height;
	borderSize = typeof borderSize === 'undefined' ? 3 : borderSize;
	this.borderSize = borderSize;
	return Panel.init.call(this, x, y, width, height);
	this.backgroundColor = novaConstructors.newColor0(200);
	this.failurePanel = novaConstructors.newPanel(borderSize, borderSize, width - borderSize * 2, height - borderSize * 2);
	(this.failurePanel || nova_null).backgroundColor = Color.RED;
	this.addChild(this.failurePanel);
	this.successPanel = novaConstructors.newPanel(borderSize, borderSize, width - borderSize * 2, height - borderSize * 2);
	(this.successPanel || nova_null).backgroundColor = Color.GREEN;
	this.addChild(this.successPanel);
	return this;
	
};

ResultBar.prototype.refreshWidth = function () {
	(this.successPanel || nova_null).width = NovaMath.max0(0, (((this.testCount != 0 ? /*Int*//*Double*/this.successCount / this.testCount : 1) * this.width) - this.borderSize * 2));
	(this.successPanel || nova_null).repaint();
	
};

ResultBar.prototype.mutator_testCount = function (value) {
	this.testCount = value;
	this.refreshWidth();
	return value;
	
};

ResultBar.prototype.mutator_successCount = function (value) {
	this.successCount = value;
	this.refreshWidth();
	return value;
	
};

ResultBar.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/ui/ResultBar"), false);
	
};

ResultBar.prototype.mutator__js_class = function () {
	
};

ResultBar.prototype.accessor_failureCount = function () {
	return this.testCount - this.successCount;
	
};

ResultBar.prototype.mutator_failureCount = function () {
	
};

ResultBar.prototype.super = function () {
	
};

novaConstructors.newResultBar = function (x, y, width, height, borderSize) {
	var __value = new ResultBar()
	Panel.call(__value);
	ResultBar.prototype.super.apply(__value, [].slice.call(arguments));
	return ResultBar.init.call(__value, x, y, width, height, borderSize);
	
};

var Window = function () {
	this.x = 0;
	this.y = 0;
	this.width = 0;
	this.height = 0;
	this.clientHeight = 0;
	this.frame = null;
	this.title = null;
	this.thread = null;
	
	
};

Window.prototype = Object.create(NovaObject.prototype);
Window.prototype.constructor = Window;


Window.prototype.destroy = function () {
	
};

Window.init = function (title, x, y, width, height) {
	title = typeof title === 'undefined' ? null : title;
	x = typeof x === 'undefined' ? 0 : x;
	y = typeof y === 'undefined' ? 0 : y;
	width = typeof width === 'undefined' ? 0 : width;
	height = typeof height === 'undefined' ? 0 : height;
	this.title = title;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.frame = novaConstructors.newFrame(this);
	(this.frame || nova_null).width = this.accessor_clientWidth();
	(this.frame || nova_null).height = this.accessor_clientHeight();
	this.thread = novaConstructors.newWindowThread(this);
	(this.thread || nova_null).start();
	return this;
	
};

Window.prototype.show = function () {
	(this.thread || nova_null).show();
	return this;
	
};

Window.prototype.refreshPosition = function () {
	(this.frame || nova_null).width = this.accessor_clientWidth();
	(this.frame || nova_null).height = this.accessor_clientHeight();
	
};

Window.prototype.center = function () {
	this.x = ~~(Screen.accessor_width() / 2 - ~~(this.width / 2));
	this.y = ~~(Screen.accessor_height() / 2 - ~~(this.height / 2));
	this.refreshPosition();
	return this;
	
};

Window.prototype.repaint = function () {
	
};

Window.prototype.accessor_clientWidth = function () {
	return 0;
	
};

Window.prototype.accessor_clientHeight = function () {
	return 0;
	
};

Window.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/Window"), false);
	
};

Window.prototype.mutator__js_class = function () {
	
};

Window.prototype.super = function () {
	
};

novaConstructors.newWindow = function (title, x, y, width, height) {
	var __value = new Window()
	NovaObject.call(__value);
	Window.prototype.super.apply(__value, [].slice.call(arguments));
	return Window.init.call(__value, title, x, y, width, height);
	
};

var ResultWindow = function () {
	
	
};

ResultWindow.prototype = Object.create(Window.prototype);
ResultWindow.prototype.constructor = ResultWindow;


ResultWindow.prototype.destroy = function () {
	
};

ResultWindow.init = function (runner, out) {
	var self = this;
	
	var bars;
	var maxLabelWidth;
	out = typeof out === 'undefined' ? OutputStream.EMPTY : out;
	return Window.init.call(this, novaConstructors.newString2("Results"), 0, 0, 800, 500);
	NovaConsole.log(novaConstructors.newString2("Test case count: ").plus0(NovaInt.toString((runner.accessor_testCases().accessor_count())).plus0(novaConstructors.newString2(""))));
	bars = novaConstructors.newHashMap0();
	maxLabelWidth = 0;
	((runner || nova_null).accessor_testCases() || nova_null).forEach0((_js_case, i, _3) => {
			var y;
			var resultBar;
			var label;
			y = 20 + (30 * i);
			resultBar = novaConstructors.newResultBar(10, y);
			(resultBar || nova_null).mutator_testCount(1);
			(resultBar || nova_null).mutator_successCount(0);
			label = novaConstructors.newLabel((_js_case || nova_null).accessor_header(), 10 + (resultBar || nova_null).width + 10, y + 5);
			(self.frame || nova_null).addChild(resultBar);
			(self.frame || nova_null).addChild(label);
			(bars || nova_null).set(_js_case, novaConstructors.newTuple2(label, resultBar));
			
	});
	(runner || nova_null).runTests((result) => {
			var bar;
			if ((bar = (bars || nova_null).get((result || nova_null).testCase)) != null) {
				((bar || nova_null).accessor_item2() || nova_null).mutator_successCount(1);
			}
			
	}, out);
	this.center();
	return this;
	
};

ResultWindow.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/ui/ResultWindow"), false);
	
};

ResultWindow.prototype.mutator__js_class = function () {
	
};

ResultWindow.prototype.super = function () {
	
};

novaConstructors.newResultWindow = function (runner, out) {
	var __value = new ResultWindow()
	Window.call(__value);
	ResultWindow.prototype.super.apply(__value, [].slice.call(arguments));
	return ResultWindow.init.call(__value, runner, out);
	
};

var EmbeddedNestTest = function () {
	
	
};

EmbeddedNestTest.prototype = Object.create(NovaObject.prototype);
EmbeddedNestTest.prototype.constructor = EmbeddedNestTest;


EmbeddedNestTest.prototype.destroy = function () {
	
};

EmbeddedNestTest.prototype.embeddedFunction = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing embeddedFunction "));
	
};

EmbeddedNestTest.prototype.lambdaFunction = function (out) {
	var self = this;
	
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing lambdaFunction "));
	Nest.test(novaConstructors.newString2("something"), () => {
			(Nest.expect1(() => {
						
			}) || nova_null).toThrow(new novaConstructors.newClass(novaConstructors.newString2("novex/nest/NestException"), false));
			
	});
	
};

EmbeddedNestTest.init = function () {
	return this;
	
};

EmbeddedNestTest.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/EmbeddedNestTest"), false);
	
};

EmbeddedNestTest.prototype.mutator__js_class = function () {
	
};

EmbeddedNestTest.prototype.super = function () {
	
};

novaConstructors.newEmbeddedNestTest = function () {
	var __value = new EmbeddedNestTest()
	NovaObject.call(__value);
	EmbeddedNestTest.prototype.super.apply(__value, [].slice.call(arguments));
	return EmbeddedNestTest.init.call(__value);
	
};

var TypeNestTest = function () {
	
	
};

TypeNestTest.prototype = Object.create(NovaObject.prototype);
TypeNestTest.prototype.constructor = TypeNestTest;


TypeNestTest.prototype.destroy = function () {
	
};

TypeNestTest.prototype.integer = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing integer "));
	(Nest.expect237(5) || nova_null).toBe(5);
	
};

TypeNestTest.prototype.real = function (out) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	(out || nova_null).write(novaConstructors.newString2("Testing real "));
	(Nest.expect238(5.0) || nova_null).toBe(5.0);
	(Nest.expect239(5.0 * 2) || nova_null).toBeWithinToleranceOf(10);
	
};

TypeNestTest.init = function () {
	return this;
	
};

TypeNestTest.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("novex/nest/TypeNestTest"), false);
	
};

TypeNestTest.prototype.mutator__js_class = function () {
	
};

TypeNestTest.prototype.super = function () {
	
};

novaConstructors.newTypeNestTest = function () {
	var __value = new TypeNestTest()
	NovaObject.call(__value);
	TypeNestTest.prototype.super.apply(__value, [].slice.call(arguments));
	return TypeNestTest.init.call(__value);
	
};

var MultiplyOperator = function () {
	
	
};

MultiplyOperator.prototype.constructor = MultiplyOperator;


MultiplyOperator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/operators/MultiplyOperator"), false);
	
};

MultiplyOperator.prototype.mutator__js_class = function () {
	
};

var PlusOperator = function () {
	
	
};

PlusOperator.prototype.constructor = PlusOperator;


PlusOperator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/operators/PlusOperator"), false);
	
};

PlusOperator.prototype.mutator__js_class = function () {
	
};

var Comparable = function () {
	
	
};

Comparable.prototype.constructor = Comparable;


Comparable.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/Comparable"), false);
	
};

Comparable.prototype.mutator__js_class = function () {
	
};

var NovaString = function () {
	this.count = 0;
	this.chars = null;
	this.last = 0;
	this.hashCodeLong = 0;
	
	
};

NovaString.prototype = Object.create(NovaObject.prototype);
NovaString.prototype.constructor = NovaString;


NovaString.prototype.destroy = function () {
	
};

NovaString.init0 = function (c) {
	var chars;
	chars = [c];
	return NovaString.init2.call(this, chars);
	return this;
	
};

NovaString.init1 = function (chars, count) {
	this.count = count;
	this.chars = novaConstructors.newStringCharArray2(chars, count);
	return this;
	
};

NovaString.init2 = function (chars) {
	this.count = this.calculateSize(chars);
	this.chars = novaConstructors.newStringCharArray2(chars, this.count);
	return this;
	
};

NovaString.init3 = function (chars) {
	this.count = (chars || nova_null).accessor_count();
	this.chars = novaConstructors.newStringCharArray0(chars);
	return this;
	
};

NovaString.init4 = function (chars) {
	this.count = (chars || nova_null).count;
	this.chars = chars;
	return this;
	
};

NovaString.prototype.calculateSize = function (chars) {
	return chars.length;
	
};

NovaString.prototype.concat = function (str) {
	var buf;
	buf = (this.chars || nova_null).data + ((str || nova_null).chars || nova_null).data;
	return novaConstructors.newString2(buf);
	
};

NovaString.prototype.plus0 = function (another) {
	return this.concat(another);
	
};

NovaString.prototype.multiply0 = function (times) {
	return this.repeat(((times) || nova_null).value);
	
};

NovaString.prototype.repeat = function (times) {
	var self = this;
	
	return (novaConstructors.newArray0(times).map0((_1, _2, _3) => {
				return this;
				
	}) || nova_null).join();
	
};

NovaString.prototype.equals0 = function (other) {
	return (other) != null && this.count === (other || nova_null).count && this.compareTo0(other) === 0;
	
};

NovaString.prototype.replace0 = function (pattern, replace) {
	var self = this;
	
	var output;
	var offset;
	output = this;
	offset = 0;
	(Regex.getMatches1((pattern || nova_null).pattern, this) || nova_null).forEach0((match, _2, _3) => {
			output = ((output || nova_null).substring(0, (match || nova_null).start + offset) || nova_null).plus0((replace || nova_null).plus0((output || nova_null).substring((match || nova_null).end + offset)));
			offset += (replace || nova_null).count - (match || nova_null).accessor_count();
			
	});
	return output;
	
};

NovaString.prototype.replace1 = function (search, replace) {
	var output;
	var index;
	output = this;
	index = 0;
	while ((index = (output || nova_null).indexOf2(search)) >= 0) {
		output = ((output || nova_null).substring(0, index) || nova_null).plus0((replace || nova_null).plus0((output || nova_null).substring(index + (search || nova_null).count)));
	}
	return output;
	
};

NovaString.prototype.startsWith0 = function (search) {
	return this.indexOf1(search) === 0;
	
};

NovaString.prototype.startsWith1 = function (search) {
	return this.indexOf2(search) === 0;
	
};

NovaString.prototype.startsWith2 = function (search) {
	return this.indexOf0(search) === 0;
	
};

NovaString.prototype.contains0 = function (search) {
	return this.indexOf1(search) >= 0;
	
};

NovaString.prototype.contains1 = function (search) {
	return this.indexOf2(search) >= 0;
	
};

NovaString.prototype.contains2 = function (search) {
	return this.indexOf0(search) >= 0;
	
};

NovaString.prototype.endsWith0 = function (search) {
	return this.count > 0 && this.indexOf1(search) === this.count - 1;
	
};

NovaString.prototype.endsWith1 = function (search) {
	return this.count > 0 && this.indexOf2(search) === this.count - (search || nova_null).count;
	
};

NovaString.prototype.endsWith2 = function (search) {
	return this.count > 0 && this.indexOf0(search) === this.count - ((search || nova_null).pattern || nova_null).count;
	
};

NovaString.prototype.matches = function (pattern) {
	var matches;
	matches = Regex.getMatches0(pattern, this);
	return (matches || nova_null).accessor_count() === 1 && ((matches || nova_null).get(0) || nova_null).start === 0 && ((matches || nova_null).get(0) || nova_null).end === this.count;
	
};

NovaString.prototype.indexOf0 = function (search, start, direction, defaultReturnValue) {
	var first;
	start = typeof start === 'undefined' ? 0 : start;
	direction = typeof direction === 'undefined' ? 1 : direction;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	first = (Regex.getMatches0(search, this) || nova_null).accessor_first();
	if ((first) != null) {
		return (first || nova_null).start;
	}
	return defaultReturnValue;
	
};

NovaString.prototype.indexOf1 = function (search, start, direction, defaultReturnValue) {
	start = typeof start === 'undefined' ? 0 : start;
	direction = typeof direction === 'undefined' ? 1 : direction;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	return this.indexOf2(Char.toString((search)).plus0(novaConstructors.newString2("")), start, direction, defaultReturnValue);
	
};

NovaString.prototype.indexOf2 = function (search, start, direction, defaultReturnValue) {
	var i;
	start = typeof start === 'undefined' ? 0 : start;
	direction = typeof direction === 'undefined' ? 1 : direction;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = start;
	while (i < this.count && i + (search || nova_null).count <= this.count && i >= 0) {
		var found;
		var j;
		found = true;
		j = 0;
		while (j < (search || nova_null).count && i + j < this.count && found) {
			if (((search || nova_null).chars || nova_null).get(j) != (this.chars || nova_null).get(i + j)) {
				found = false;
			}
			j++;
		}
		if (found) {
			return i;
		}
		i += direction;
	}
	return defaultReturnValue;
	
};

NovaString.prototype.lastIndexOf0 = function (search, start, defaultReturnValue) {
	start = typeof start === 'undefined' ? this.count - 1 : start;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	return this.lastIndexOf1(Char.toString((search)).plus0(novaConstructors.newString2("")), start, defaultReturnValue);
	
};

NovaString.prototype.lastIndexOf1 = function (search, start, defaultReturnValue) {
	start = typeof start === 'undefined' ? this.count - 1 : start;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	return this.indexOf2(search, start, -1, defaultReturnValue);
	
};

NovaString.prototype.validateSubstringBounds = function (start, end, throwException) {
	throwException = typeof throwException === 'undefined' ? false : throwException;
	if (end - start <= 0) {
		if (end - start < 0) {
			if (throwException) {
				throw novaConstructors.newException(novaConstructors.newString2("Substring bounds of [").plus0(NovaInt.toString((start)).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString((end)).plus0(novaConstructors.newString2("] are invalid"))))));
			}
			return false;
		}
	}
	return true;
	
};

NovaString.prototype.substring = function (start, end) {
	start = typeof start === 'undefined' ? 0 : start;
	end = typeof end === 'undefined' ? this.count : end;
	if (!this.validateSubstringBounds(start, end, true)) {
		return null;
	} else if (start === end) {
	}
	else if (start === 0 && end === this.count) {
	}
	return novaConstructors.newSubstring(this, start, end);
	
};

NovaString.prototype.trimStart = function (count) {
	return this.substring(count);
	
};

NovaString.prototype.trimEnd = function (count) {
	return this.substring(undefined, this.count - count);
	
};

NovaString.prototype.trimEnds = function (count, trimWhitespace) {
	trimWhitespace = typeof trimWhitespace === 'undefined' ? false : trimWhitespace;
	return trimWhitespace ? (this.substring(count, this.count - count) || nova_null).trim() : this.substring(count, this.count - count);
	
};

NovaString.prototype.trim = function (start, end, charsToTrim) {
	start = typeof start === 'undefined' ? 0 : start;
	end = typeof end === 'undefined' ? this.count - 1 : end;
	charsToTrim = typeof charsToTrim === 'undefined' ? NovaString.WHITESPACE : charsToTrim;
	while (start <= end && (charsToTrim || nova_null).contains((this.chars || nova_null).get(start))) {
		start++;
	}
	while (end >= start && (charsToTrim || nova_null).contains((this.chars || nova_null).get(end))) {
		end--;
	}
	return start > end ? novaConstructors.newString2("") : this.substring(start, end + 1);
	
};

NovaString.prototype.toLowerCase = function () {
	return this.transform(Char.toLowerCase);
	
};

NovaString.prototype.toUpperCase = function () {
	return this.transform(Char.toUpperCase);
	
};

NovaString.prototype.capitalize = function () {
	return this.count > 0 ? Char.toString(Char.toUpperCase((this.chars || nova_null).get(0))).plus0(this.substring(1)) : this;
	
};

NovaString.prototype.transform = function (transform) {
	var newData;
	newData = [];
	var i;
	i = 0;
	for (; i < this.count; i++) {
		newData[i] = transform((this.chars || nova_null).get(i), i);
	}
	return novaConstructors.newString2(newData);
	
};

NovaString.prototype.getStringBetween = function (before, after, start) {
	var s;
	var e;
	start = typeof start === 'undefined' ? 0 : start;
	return (s = this.indexOf2(before, start)) >= 0 && (e = this.indexOf2(after, s + 1)) > 0 ? this.substring(s + (before || nova_null).count, e) : null;
	
};

NovaString.prototype.reverse = function (symmetrical) {
	var reversed;
	symmetrical = typeof symmetrical === 'undefined' ? false : symmetrical;
	reversed = (this.chars || nova_null).reverse();
	if (symmetrical) {
		var i;
		i = 0;
		for (; i < (reversed || nova_null).count; i++) {
			var c;
			switch ((c = (reversed || nova_null).get(i))) {
				case '(':
				(reversed || nova_null).set(i, ')');
			
			break;
		case ')':
		(reversed || nova_null).set(i, '(');
		
		break;
		case '<':
		(reversed || nova_null).set(i, '>');
		
		break;
		case '>':
		(reversed || nova_null).set(i, '<');
		
		break;
		case '{':
		(reversed || nova_null).set(i, '}');
	
	break;
case '}':
(reversed || nova_null).set(i, '{');

break;
case '[':
(reversed || nova_null).set(i, ']');

break;
case ']':
(reversed || nova_null).set(i, '[');

break;
case '/':
(reversed || nova_null).set(i, '\\');

break;
case '\\':
(reversed || nova_null).set(i, '/');

break;}}}
return novaConstructors.newString4(reversed);
};

NovaString.prototype.surroundWith = function (str, symmetrical) {
	symmetrical = typeof symmetrical === 'undefined' ? false : symmetrical;
	return ((str) || nova_null).plus0(novaConstructors.newString2("").plus0(((this) || nova_null).plus0(novaConstructors.newString2("").plus0(((symmetrical ? (str || nova_null).reverse() : str) || nova_null).plus0(novaConstructors.newString2(""))))));
	
};

NovaString.prototype.compareTo0 = function (other) {
	var min;
	min = NovaMath.min1(this.count, (other || nova_null).count);
	var i;
	i = 0;
	for (; i < min; i++) {
		if ((this.chars || nova_null).get(i).charCodeAt(0) - ((other || nova_null).chars || nova_null).get(i) != 0) {
			return (this.chars || nova_null).get(i).charCodeAt(0) - ((other || nova_null).chars || nova_null).get(i).charCodeAt(0);
		}
	}
	return this.count - (other || nova_null).count;
	
};

NovaString.prototype.split = function (regex) {
	var self = this;
	
	var nativeStrs;
	var count;
	nativeStrs = (this.chars || nova_null).data.split(new RegExp((((regex || nova_null).pattern || nova_null).chars || nova_null).data));
	count = nativeStrs.length;
	return novaConstructors.newArray0(count).map0((_1, _2, _3) => {
			var buf;
			var length;
			var array;
			buf = nativeStrs[_2];
			length = buf.length;
			array = novaConstructors.newStringCharArray2(buf, length);
			return novaConstructors.newString4(array);
			
	});
	
};

NovaString.prototype.getGroupedChars = function (chars, start, end, opposite) {
	var i;
	start = typeof start === 'undefined' ? 0 : start;
	end = typeof end === 'undefined' ? this.count : end;
	opposite = typeof opposite === 'undefined' ? false : opposite;
	i = start;
	while (start < end && (chars || nova_null).contains((this.chars || nova_null).get(i)) != opposite) {
		i++;
	}
	return this.substring(start, i);
	
};

NovaString.prototype.toString = function () {
	return this;
	
};

NovaString.prototype.get = function (index) {
	return (this.chars || nova_null).get(index);
	
};

NovaString.prototype.set = function (index, value) {
	
};

NovaString.generated22 = function () {
	var temp;
	temp = [];
	temp[0] = ' ';
	temp[1] = '\t';
	temp[2] = '\n';
	temp[3] = '\r';
	return novaConstructors.newArray1Char1(temp, 4);
	
};

NovaString.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/String"), false);
	
};

NovaString.prototype.mutator__js_class = function () {
	
};

NovaString.prototype.accessor_first = function () {
	return (this.chars || nova_null).accessor_first();
	
};

NovaString.prototype.mutator_first = function () {
	
};

NovaString.prototype.accessor_last = function () {
	return (this.chars || nova_null).accessor_last();
	
};

NovaString.prototype.mutator_last = function () {
	
};

NovaString.prototype.accessor_title = function () {
	return this.capitalize();
	
};

NovaString.prototype.mutator_title = function () {
	
};

NovaString.prototype.accessor_hashCodeLong = function () {
	return (this.chars || nova_null).accessor_hashCodeLong();
	
};

NovaString.prototype.mutator_hashCodeLong = function () {
	
};

NovaString.prototype.super = function () {
	
};

novaConstructors.newString0 = function (c) {
	var __value = new NovaString()
	NovaObject.call(__value);
	NovaString.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaString.init0.call(__value, c);
	
};

novaConstructors.newString1 = function (chars, count) {
	var __value = new NovaString()
	NovaObject.call(__value);
	NovaString.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaString.init1.call(__value, chars, count);
	
};

novaConstructors.newString2 = function (chars) {
	var __value = new NovaString()
	NovaObject.call(__value);
	NovaString.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaString.init2.call(__value, chars);
	
};

novaConstructors.newString3 = function (chars) {
	var __value = new NovaString()
	NovaObject.call(__value);
	NovaString.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaString.init3.call(__value, chars);
	
};

novaConstructors.newString4 = function (chars) {
	var __value = new NovaString()
	NovaObject.call(__value);
	NovaString.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaString.init4.call(__value, chars);
	
};

var Substring = function () {
	this.source = null;
	this.start = 0;
	this.hashCodeLong = 0;
	
	
};

Substring.prototype = Object.create(NovaString.prototype);
Substring.prototype.constructor = Substring;


Substring.prototype.destroy = function () {
	
};

Substring.init = function (source, start, end) {
	var buf;
	this.source = source;
	this.start = start;
	this.count = end - start;
	buf = ((source || nova_null).chars || nova_null).data.substr(this.start, this.count);
	this.chars = novaConstructors.newStringCharArray2(buf, this.count);
	return this;
	
};

Substring.prototype.substring = function (start, end) {
	start = typeof start === 'undefined' ? 0 : start;
	end = typeof end === 'undefined' ? this.count : end;
	if (!this.validateSubstringBounds(start, end, true)) {
		return null;
	} else if (start === end) {
	}
	else if (start === 0 && end === this.count) {
	}
	return novaConstructors.newSubstring(this.source, this.start + start, this.start + end);
	
};

Substring.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/Substring"), false);
	
};

Substring.prototype.mutator__js_class = function () {
	
};

Substring.prototype.accessor_end = function () {
	return this.start + this.count;
	
};

Substring.prototype.mutator_end = function () {
	
};

Substring.prototype.accessor_hashCodeLong = function () {
	return (this.chars || nova_null).accessor_hashCodeLong();
	
};

Substring.prototype.mutator_hashCodeLong = function () {
	
};

Substring.prototype.super = function () {
	
};

novaConstructors.newSubstring = function (source, start, end) {
	var __value = new Substring()
	NovaString.call(__value);
	Substring.prototype.super.apply(__value, [].slice.call(arguments));
	return Substring.init.call(__value, source, start, end);
	
};

var System = function () {
	
	
};

System.prototype = Object.create(NovaObject.prototype);
System.prototype.constructor = System;


System.prototype.destroy = function () {
	
};

System.exit0 = function (code) {
	process.exit(code);
	
};

System.exit1 = function (code, message) {
	System.exit2(code, message, false);
	
};

System.exit2 = function (code, message, log) {
	if (log) {
		var f;
		f = novaConstructors.newFileWriter2(novaConstructors.newString2("Log").plus0(NovaLong.toString(Time.accessor_currentTimeMillis()).plus0(novaConstructors.newString2(".txt"))));
		if ((f || nova_null).create()) {
			(f || nova_null).writeLine(message);
		}
	}
	NovaConsole.writeLine1(message);
	System.exit0(code);
	
};

System.execute0 = function (command) {
	return null;
	
};

System.runMain = function (argc, argvs, mainFunc, initialize, callStaticBlocks) {
	var self = this;
	
	var args;
	initialize = typeof initialize === 'undefined' ? () => {
		
	} : initialize;
	callStaticBlocks = typeof callStaticBlocks === 'undefined' ? () => {
		
	} : callStaticBlocks;
	
	initialize();
	try {
		callStaticBlocks();
		args = novaConstructors.newArray0(argc);
		var i;
		i = 0;
		for (; i < argc; i++) {
			var allocated;
			(args || nova_null).set0(i, novaConstructors.newString2(allocated));
		}
		mainFunc(args);
	} catch (e)  {
		if (!(e instanceof Exception)) {
			console.log(0.33356931074375584);
			console.error(e);
			process.exit(1);
		} else {
			var message;
			message = ((e.accessor__js_class().location) || nova_null).plus0(novaConstructors.newString2(" in main Thread"));
			if ((e.message) != null) {
				message = (message || nova_null).concat(novaConstructors.newString2(": ").plus0(((e.message) || nova_null).plus0(novaConstructors.newString2(""))));
			}
			NovaConsole.log(message);
			NovaConsole.waitForEnter();
		}
	 }
	finally {
	}
	(Thread.ACTIVE_THREADS || nova_null).forEach0((_1, _2, _3) => {
			(_1 || nova_null).join();
			
	});
	
	GC.collect();
	return 0;
	
};

System.execute1 = function (arguments) {
	
};

System.jsStringArrayToNovaArray = function (value) {
	var self = this;
	
	var count;
	count = 0;
	count = value.length;
	return novaConstructors.newArray0(count).map0((x, i, _3) => {
			var str;
			str = novaConstructors.newString2("");
			((str || nova_null).chars || nova_null).data = value[i];
			return str;
			
	});
	
};

System.jsCreateInstance = function (className, overloadId) {
	var instance;
	var constructorName;
	overloadId = typeof overloadId === 'undefined' ? -1 : overloadId;
	instance = null;
	constructorName = novaConstructors.newString2("new").plus0(((className) || nova_null).plus0(novaConstructors.newString2("")));
	if (overloadId >= 0) {
		constructorName = (constructorName || nova_null).concat(NovaInt.toString(overloadId));
	}
	instance = novaConstructors[((constructorName || nova_null).chars || nova_null).data]();
	return instance;
	
};

System.init = function () {
	return this;
	
};

System.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/System"), false);
	
};

System.prototype.mutator__js_class = function () {
	
};

System.prototype.super = function () {
	
};

novaConstructors.newSystem = function () {
	var __value = new System()
	NovaObject.call(__value);
	System.prototype.super.apply(__value, [].slice.call(arguments));
	return System.init.call(__value);
	
};

var ImageTracker = function () {
	
	
};

ImageTracker.prototype = Object.create(NovaObject.prototype);
ImageTracker.prototype.constructor = ImageTracker;


ImageTracker.prototype.destroy = function () {
	
};

ImageTracker.init = function () {
	return this;
	
};

ImageTracker.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/ar/ImageTracker"), false);
	
};

ImageTracker.prototype.mutator__js_class = function () {
	
};

ImageTracker.prototype.super = function () {
	
};

novaConstructors.newImageTracker = function () {
	var __value = new ImageTracker()
	NovaObject.call(__value);
	ImageTracker.prototype.super.apply(__value, [].slice.call(arguments));
	return ImageTracker.init.call(__value);
	
};

var TrackPoint = function () {
	
	
};

TrackPoint.prototype = Object.create(NovaObject.prototype);
TrackPoint.prototype.constructor = TrackPoint;


TrackPoint.prototype.destroy = function () {
	
};

TrackPoint.init = function () {
	return this;
	
};

TrackPoint.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/ar/TrackPoint"), false);
	
};

TrackPoint.prototype.mutator__js_class = function () {
	
};

TrackPoint.prototype.super = function () {
	
};

novaConstructors.newTrackPoint = function () {
	var __value = new TrackPoint()
	NovaObject.call(__value);
	TrackPoint.prototype.super.apply(__value, [].slice.call(arguments));
	return TrackPoint.init.call(__value);
	
};

var DBConnector = function () {
	this.mysql = null;
	this.result = null;
	this.error = null;
	
	
};

DBConnector.prototype = Object.create(NovaObject.prototype);
DBConnector.prototype.constructor = DBConnector;


DBConnector.prototype.destroy = function () {
	
};

DBConnector.init = function () {
	this.error = novaConstructors.newString2("");
	return this;
	
};

DBConnector.prototype.connect0 = function (host, user, password) {
	this.mysql = nova_db_connect1(((host || nova_null).chars || nova_null).data, ((user || nova_null).chars || nova_null).data, ((password || nova_null).chars || nova_null).data);
	this.updateError();
	
};

DBConnector.prototype.connect1 = function (host, user, password, database) {
	this.mysql = nova_db_connect2(((host || nova_null).chars || nova_null).data, ((user || nova_null).chars || nova_null).data, ((password || nova_null).chars || nova_null).data, ((database || nova_null).chars || nova_null).data);
	this.updateError();
	
};

DBConnector.prototype.connect2 = function (host, user, password, database, port, unixSocket, clientFlag) {
	this.mysql = nova_db_connect3(((host || nova_null).chars || nova_null).data, ((user || nova_null).chars || nova_null).data, ((password || nova_null).chars || nova_null).data, ((database || nova_null).chars || nova_null).data, port, ((unixSocket || nova_null).chars || nova_null).data, clientFlag);
	this.updateError();
	
};

DBConnector.prototype.updateError = function () {
	this.error = novaConstructors.newString2(nova_db_error(this.mysql));
	
};

DBConnector.prototype.changeUser = function (username, password, database) {
	nova_user_select(this.mysql, ((username || nova_null).chars || nova_null).data, ((password || nova_null).chars || nova_null).data, ((database || nova_null).chars || nova_null).data);
	this.updateError();
	
};

DBConnector.prototype.query = function (query) {
	var arrays;
	this.result = nova_exec_query(this.mysql, ((query || nova_null).chars || nova_null).data);
	if (this.result === 0) {
		this.updateError();
		return null;
	}
	arrays = nova_get_results(this.mysql, this.result);
	if (arrays != 0) {
		var numRows;
		var numCols;
		var rows;
		var r;
		numRows = nova_num_rows(this.mysql);
		numCols = nova_num_cols(this.result);
		rows = novaConstructors.newArray0(numRows);
		var i;
		i = 0;
		for (; i < numRows; i++) {
			(rows || nova_null).set0(i, novaConstructors.newArray0(numCols));
			var j;
			j = 0;
			for (; j < numCols; j++) {
				((rows || nova_null).get(i) || nova_null).set0(j, novaConstructors.newString2(arrays[i][j]));
			}
		}
		r = novaConstructors.newResultSet(rows, numCols);
		this.updateError();
		return r;
	}
	this.updateError();
	return null;
	
};

DBConnector.prototype.close = function () {
	nova_db_close(this.mysql);
	this.updateError();
	
};

DBConnector.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/database/DBConnector"), false);
	
};

DBConnector.prototype.mutator__js_class = function () {
	
};

DBConnector.prototype.super = function () {
	
};

novaConstructors.newDBConnector = function () {
	var __value = new DBConnector()
	NovaObject.call(__value);
	DBConnector.prototype.super.apply(__value, [].slice.call(arguments));
	return DBConnector.init.call(__value);
	
};

var ResultSet = function () {
	this.rows = null;
	this.numCols = 0;
	
	
};

ResultSet.prototype = Object.create(NovaObject.prototype);
ResultSet.prototype.constructor = ResultSet;


ResultSet.prototype.destroy = function () {
	
};

ResultSet.init = function (rows, numCols) {
	this.rows = rows;
	this.numCols = numCols;
	return this;
	
};

ResultSet.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/database/ResultSet"), false);
	
};

ResultSet.prototype.mutator__js_class = function () {
	
};

ResultSet.prototype.accessor_numRows = function () {
	return (this.rows || nova_null).accessor_count();
	
};

ResultSet.prototype.mutator_numRows = function () {
	
};

ResultSet.prototype.super = function () {
	
};

novaConstructors.newResultSet = function (rows, numCols) {
	var __value = new ResultSet()
	NovaObject.call(__value);
	ResultSet.prototype.super.apply(__value, [].slice.call(arguments));
	return ResultSet.init.call(__value, rows, numCols);
	
};

var NovaNode = function () {
	this.children = null;
	this.data = null;
	
	
};

NovaNode.prototype = Object.create(NovaObject.prototype);
NovaNode.prototype.constructor = NovaNode;


NovaNode.prototype.destroy = function () {
	
};

NovaNode.init = function (data, numChildren) {
	data = typeof data === 'undefined' ? null : data;
	numChildren = typeof numChildren === 'undefined' ? 5 : numChildren;
	this.data = data;
	this.children = novaConstructors.newArray0(numChildren);
	return this;
	
};

NovaNode.prototype.preorder0 = function () {
	return this.preorder1(novaConstructors.newArray());
	
};

NovaNode.prototype.inorder0 = function () {
	return this.inorder1(novaConstructors.newArray());
	
};

NovaNode.prototype.postorder0 = function () {
	return this.postorder1(novaConstructors.newArray());
	
};

NovaNode.prototype.levelorder0 = function () {
	return this.levelorder1(novaConstructors.newArray());
	
};

NovaNode.prototype.preorder1 = function (array) {
	var self = this;
	
	(array || nova_null).add0(this.data);
	((this.children || nova_null).filter0((_1, _2, _3) => {
				return _1 != null;
				
	}) || nova_null).forEach0((_1, _2, _3) => {
			(_1 || nova_null).preorder1(array);
			
	});
	return array;
	
};

NovaNode.prototype.inorder1 = function (array) {
	var self = this;
	
	var half;
	half = (this.children || nova_null).accessor_count() - ~~((this.children || nova_null).accessor_count() / 2);
	(((this.children || nova_null).take(half) || nova_null).filter0((_1, _2, _3) => {
				return _1 != null;
				
	}) || nova_null).forEach0((_1, _2, _3) => {
			(_1 || nova_null).inorder1(array);
			
	});
	(array || nova_null).add0(this.data);
	(((this.children || nova_null).skip(half) || nova_null).filter0((_1, _2, _3) => {
				return _1 != null;
				
	}) || nova_null).forEach0((_1, _2, _3) => {
			(_1 || nova_null).inorder1(array);
			
	});
	return array;
	
};

NovaNode.prototype.postorder1 = function (array) {
	var self = this;
	
	((this.children || nova_null).filter0((_1, _2, _3) => {
				return _1 != null;
				
	}) || nova_null).forEach0((_1, _2, _3) => {
			(_1 || nova_null).postorder1(array);
			
	});
	(array || nova_null).add0(this.data);
	return array;
	
};

NovaNode.prototype.levelorder1 = function (array) {
	var self = this;
	
	var queue;
	queue = novaConstructors.newQueue0(this.generated53());
	while (!(queue || nova_null).accessor_empty()) {
		var current;
		current = (queue || nova_null).dequeue();
		(array || nova_null).add0((current || nova_null).data);
		(((current || nova_null).children || nova_null).filter0((_1, _2, _3) => {
					return _1 != null;
					
		}) || nova_null).forEach0((_1, _2, _3) => {
				(queue || nova_null).enqueue(_1);
				
		});
	}
	return array;
	
};

NovaNode.prototype.toString = function () {
	return (((this.data) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""));
	
};

NovaNode.prototype.get = function (index) {
	return (this.children || nova_null).get(index);
	
};

NovaNode.prototype.set = function (index, value) {
	(this.children || nova_null).set0(index, value);
	return value;
	
};

NovaNode.prototype.generated53 = function () {
	var temp;
	temp = [];
	temp[0] = this;
	return novaConstructors.newArray1(temp, 1);
	
};

NovaNode.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/Node"), false);
	
};

NovaNode.prototype.mutator__js_class = function () {
	
};

NovaNode.prototype.super = function () {
	
};

novaConstructors.newNode = function (data, numChildren) {
	var __value = new NovaNode()
	NovaObject.call(__value);
	NovaNode.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaNode.init.call(__value, data, numChildren);
	
};

var BinaryNode = function () {
	this.right = null;
	
	
};

BinaryNode.prototype = Object.create(NovaNode.prototype);
BinaryNode.prototype.constructor = BinaryNode;


BinaryNode.prototype.destroy = function () {
	
};

BinaryNode.init0 = function (data) {
	data = typeof data === 'undefined' ? null : data;
	return BinaryNode.init1.call(this, data, 2);
	return this;
	
};

BinaryNode.init1 = function (data, size) {
	return NovaNode.init.call(this, data, size);
	return this;
	
};

BinaryNode.prototype.getNode = function (index) {
	return (this.children || nova_null).accessor_count() > index ? (this.children || nova_null).get(index) : null;
	
};

BinaryNode.prototype.setNode = function (index, data) {
	if ((this.children || nova_null).accessor_count() <= index) {
		(this.children || nova_null).add1(index, data);
	} else {
		(this.children || nova_null).set0(index, data);
	}
	
};

BinaryNode.prototype.addChild = function (data) {
	if ((this.data || nova_null).compareTo0(data) >= 0) {
		if ((this.accessor_left()) != null) {
			(this.accessor_left() || nova_null).addChild(data);
		} else {
			this.mutator_left(novaConstructors.newBinaryNode0(data));
		}
	} else {
		if ((this.accessor_right()) != null) {
			(this.accessor_right() || nova_null).addChild(data);
		} else {
			this.mutator_right(novaConstructors.newBinaryNode0(data));
		}
	}
	
};

BinaryNode.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/BinaryNode"), false);
	
};

BinaryNode.prototype.mutator__js_class = function () {
	
};

BinaryNode.prototype.accessor_left = function () {
	return this.get(0);
	
};

BinaryNode.prototype.mutator_left = function (value) {
	this.set(0, value);
	return value;
	
};

BinaryNode.prototype.accessor_right = function () {
	return this.get(1);
	
};

BinaryNode.prototype.mutator_right = function (value) {
	this.set(1, value);
	return value;
	
};

BinaryNode.prototype.super = function () {
	
};

novaConstructors.newBinaryNode0 = function (data) {
	var __value = new BinaryNode()
	NovaNode.call(__value);
	BinaryNode.prototype.super.apply(__value, [].slice.call(arguments));
	return BinaryNode.init0.call(__value, data);
	
};

novaConstructors.newBinaryNode1 = function (data, size) {
	var __value = new BinaryNode()
	NovaNode.call(__value);
	BinaryNode.prototype.super.apply(__value, [].slice.call(arguments));
	return BinaryNode.init1.call(__value, data, size);
	
};

var Tree = function () {
	this.root = null;
	
	
};

Tree.prototype = Object.create(NovaObject.prototype);
Tree.prototype.constructor = Tree;


Tree.prototype.destroy = function () {
	
};

Tree.init = function (root) {
	root = typeof root === 'undefined' ? null : root;
	this.root = root;
	return this;
	
};

Tree.prototype.preorder = function () {
	return (this.root || nova_null).preorder0();
	
};

Tree.prototype.inorder = function () {
	return (this.root || nova_null).inorder0();
	
};

Tree.prototype.postorder = function () {
	return (this.root || nova_null).postorder0();
	
};

Tree.prototype.levelorder = function () {
	return (this.root || nova_null).levelorder0();
	
};

Tree.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/Tree"), false);
	
};

Tree.prototype.mutator__js_class = function () {
	
};

Tree.prototype.super = function () {
	
};

novaConstructors.newTree = function (root) {
	var __value = new Tree()
	NovaObject.call(__value);
	Tree.prototype.super.apply(__value, [].slice.call(arguments));
	return Tree.init.call(__value, root);
	
};

var BinaryTree = function () {
	this._js_class = null;
	
	
};

BinaryTree.prototype = Object.create(Tree.prototype);
BinaryTree.prototype.constructor = BinaryTree;


BinaryTree.prototype.destroy = function () {
	
};

BinaryTree.init = function (data) {
	this.addNodes(data);
	return this;
	
};

BinaryTree.prototype.addNode = function (data) {
	if ((this.accessor_root()) != null) {
		(this.accessor_root() || nova_null).addChild(data);
	} else {
		this.mutator_root(novaConstructors.newBinaryNode0(data));
	}
	return this;
	
};

BinaryTree.prototype.addNodes = function (data) {
	(data || nova_null).forEach0((function (context) { return function (data) { var self = context; return self.addNode.call(self, data); } })(this));
	return this;
	
};

BinaryTree.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/BinaryTree"), false);
	
};

BinaryTree.prototype.mutator__js_class = function () {
	
};

BinaryTree.prototype.accessor_root = function () {
	return this.root;
	
};

BinaryTree.prototype.mutator_root = function (value) {
	this.root = value;
	return value;
	
};

BinaryTree.prototype.super = function () {
	
};

novaConstructors.newBinaryTree = function (data) {
	var __value = new BinaryTree()
	Tree.call(__value);
	BinaryTree.prototype.super.apply(__value, [].slice.call(arguments));
	return BinaryTree.init.call(__value, data);
	
};

var Bounds = function () {
	this.valid = 0;
	this.optional = 0;
	this.start = 0;
	this.end = 0;
	
	
};

Bounds.prototype = Object.create(NovaObject.prototype);
Bounds.prototype.constructor = Bounds;


Bounds.prototype.destroy = function () {
	
};

Bounds.init = function (start, end) {
	start = typeof start === 'undefined' ? 0 : start;
	end = typeof end === 'undefined' ? 0 : end;
	this.start = start;
	this.end = end;
	return this;
	
};

Bounds.prototype.extractString = function (source) {
	return this.accessor_valid() ? (source || nova_null).substring(this.start, this.end) : null;
	
};

Bounds.prototype.extractPreString = function (source) {
	return this.accessor_valid() ? (source || nova_null).substring(0, this.start) : null;
	
};

Bounds.prototype.extractPostString = function (source) {
	return this.accessor_valid() ? (source || nova_null).substring(this.end) : null;
	
};

Bounds.prototype.trimString = function (source) {
	return this.accessor_valid() ? (this.extractPreString(source) || nova_null).plus0(this.extractPostString(source)) : null;
	
};

Bounds.prototype.invalidate = function () {
	return this.start = this.end = -1;
	
};

Bounds.prototype.equals = function (bounds) {
	return (bounds) != null && (bounds || nova_null).start === this.start && (bounds || nova_null).end === this.end;
	
};

Bounds.prototype.toString = function () {
	return novaConstructors.newString2("[").plus0(NovaInt.toString(this.start).plus0(novaConstructors.newString2(", ").plus0(NovaInt.toString(this.end).plus0(novaConstructors.newString2("]")))));
	
};

Bounds.prototype.cloneTo = function (bounds) {
	(bounds || nova_null).start = this.start;
	(bounds || nova_null).end = this.end;
	return bounds;
	
};

Bounds.prototype.clone = function () {
	return novaConstructors.newBounds(this.start, this.end);
	
};

Bounds.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/Bounds"), false);
	
};

Bounds.prototype.mutator__js_class = function () {
	
};

Bounds.prototype.accessor_size = function () {
	return this.end - this.start;
	
};

Bounds.prototype.mutator_size = function () {
	
};

Bounds.prototype.accessor_valid = function () {
	return this.start >= 0 && this.end > 0;
	
};

Bounds.prototype.mutator_valid = function () {
	
};

Bounds.prototype.accessor_endless = function () {
	return this.end < 0;
	
};

Bounds.prototype.mutator_endless = function () {
	
};

Bounds.prototype.accessor_optional = function () {
	return this.start === 0;
	
};

Bounds.prototype.mutator_optional = function () {
	
};

Bounds.prototype.super = function () {
	
};

novaConstructors.newBounds = function (start, end) {
	var __value = new Bounds()
	NovaObject.call(__value);
	Bounds.prototype.super.apply(__value, [].slice.call(arguments));
	return Bounds.init.call(__value, start, end);
	
};

var List = function () {
	this.iterator = null;
	this.last = null;
	
	
};

List.prototype.constructor = List;


List.prototype.toArray = function () {
	var array;
	var nova_local_0;
	array = novaConstructors.newArray();
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(value);
	}
	return array;
	
};

List.prototype.contains0 = function (value) {
	var self = this;
	
	return this.any0((_1, _2, _3) => {
			return _1 === value;
			
	});
	
};

List.prototype.containsAny = function (values) {
	var self = this;
	
	return this.any0((_1, _2, _3) => {
			return (values || nova_null).contains0(_1);
			
	});
	
};

List.prototype.forEach0 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		func(value, i++, this);
	}
	return this;
	
};

List.prototype.map0 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

List.prototype.any0 = function (anyFunc) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (anyFunc(element, i++, this)) {
			return true;
		}
	}
	return false;
	
};

List.prototype.all0 = function (allFunc, stopOnContradiction) {
	var i;
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	i = 0;
	contradiction = false;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (!allFunc(element, i++, this)) {
			if (stopOnContradiction) {
				return false;
			}
			contradiction = true;
		}
	}
	return !contradiction;
	
};

List.prototype.filter0 = function (filterFunc) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(value, i++, this)) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List.prototype.filterNot = function (filterFunc) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (!filterFunc(value, i++, this)) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List.prototype.filterNull = function () {
	var self = this;
	
	return this.filter0((_1, _2, _3) => {
			return _1 != null;
			
	});
	
};

List.prototype.filterEmpty = function () {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if ((value) != null && ((value) || nova_null).count > 0) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List.prototype.take = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= howMany) {
			return list;
		}
		(list || nova_null).add0(value);
	}
	return list;
	
};

List.prototype.takeLast = function (howMany) {
	var list;
	var startIndex;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray();
	startIndex = NovaMath.max1(0, this.accessor_count() - howMany);
	if (startIndex === this.accessor_count()) {
		return list;
	}
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= startIndex) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List.prototype.skipLast = function (howMany) {
	return this.take(this.accessor_count() - howMany);
	
};

List.prototype.skip = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= howMany) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List.prototype.firstOr = function (_js_default, func) {
	var nova_local_0;
	func = typeof func === 'undefined' ? (_1) => {
		return true;
		
	} : func;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return _js_default;
	
};

List.prototype.firstOrThrow = function (e, func) {
	var nova_local_0;
	func = typeof func === 'undefined' ? (_1) => {
		return true;
		
	} : func;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	throw e;
	
};

List.prototype.firstWhere0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return null;
	
};

List.prototype.firstNonNull = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var value;
		element = (nova_local_0 || nova_null).accessor_next();
		value = func(element);
		if ((value) != null) {
			return value;
		}
	}
	return null;
	
};

List.prototype.zip0 = function (other, zipper) {
	var i1;
	var i2;
	var array;
	i1 = this.accessor_iterator();
	i2 = (other || nova_null).accessor_iterator();
	array = novaConstructors.newArray();
	while ((i1 || nova_null).accessor_hasNext() && (i2 || nova_null).accessor_hasNext()) {
		(array || nova_null).add0(zipper((i1 || nova_null).accessor_next(), (i2 || nova_null).accessor_next()));
	}
	return array;
	
};

List.prototype.sum0 = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

List.prototype.sum1 = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

List.prototype.min = function (func) {
	var min;
	var i;
	var nova_local_0;
	min = NovaLong.MAX_VALUE;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		min = NovaMath.min0(min, func(element, i++, this));
	}
	return min;
	
};

List.prototype.max = function (func) {
	var max;
	var i;
	var nova_local_0;
	max = NovaLong.MAX_VALUE;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		max = NovaMath.max0(max, func(element, i++, this));
	}
	return max;
	
};

List.prototype.reduce = function (func, initialValue) {
	var value;
	var i;
	var nova_local_0;
	value = initialValue;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		value = func(value, element, i++, this);
	}
	return value;
	
};

List.prototype.join = function (delimiter) {
	var self = this;
	
	delimiter = typeof delimiter === 'undefined' ? novaConstructors.newString2("") : delimiter;
	return this.reduce((str, e, i, _4) => {
			return (str || nova_null).plus0(((i > 0 ? delimiter : novaConstructors.newString2("")) || nova_null).plus0((e || nova_null).toString()));
			
		}, novaConstructors.newString2(""));
	
};

List.prototype.stitch = function (delimiter) {
	var self = this;
	
	delimiter = typeof delimiter === 'undefined' ? novaConstructors.newString2("") : delimiter;
	return this.reduce((str, e, _3, _4) => {
			return (str || nova_null).plus0((delimiter || nova_null).plus0((e || nova_null).toString()));
			
		}, novaConstructors.newString2(""));
	
};

List.prototype.toEnglish = function (conjunction, oxford) {
	oxford = typeof oxford === 'undefined' ? true : oxford;
	return this.accessor_count() > 1 ? ((this.take(this.accessor_count() - 1) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(((oxford && this.accessor_count() > 2 ? novaConstructors.newString2(", ") : novaConstructors.newString2(" ")) || nova_null).plus0((((conjunction) || nova_null).plus0(novaConstructors.newString2(" ")) || nova_null).plus0(((this.skip(this.accessor_count() - 1) || nova_null).accessor_first() || nova_null).toString()))) : (((this.accessor_first()) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""));
	
};

List.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0((this.join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

List.prototype.zip1 = function (other, zipper) {
	var i1;
	var i2;
	var array;
	i1 = this.accessor_iterator();
	i2 = (other || nova_null).accessor_iterator();
	array = novaConstructors.newArray1Int();
	while ((i1 || nova_null).accessor_hasNext() && (i2 || nova_null).accessor_hasNext()) {
		(array || nova_null).add0(zipper((i1 || nova_null).accessor_next(), (i2 || nova_null).accessor_next()));
	}
	return array;
	
};

List.prototype.accessor_count = function () {
	return 0;
	
};

List.prototype.mutator_count = function (value) {
	return value;
	
};

List.prototype.accessor_iterator = function () {
	return null;
	
};

List.prototype.mutator_iterator = function (value) {
	return value;
	
};

List.prototype.accessor_first = function () {
	return null;
	
};

List.prototype.mutator_first = function (value) {
	return value;
	
};

List.prototype.accessor_last = function () {
	return null;
	
};

List.prototype.mutator_last = function (value) {
	return value;
	
};

List.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/List"), false);
	
};

List.prototype.mutator__js_class = function () {
	
};

var HashMap = function () {
	this.buckets = null;
	this.bucketSize = 0;
	this.count = 0;
	this._js_class = null;
	this.first = null;
	this.last = null;
	
	
};

HashMap.prototype = Object.create(NovaObject.prototype);
HashMap.prototype.constructor = HashMap;


HashMap.prototype.destroy = function () {
	
};

HashMap.init0 = function (bucketCount, bucketSize) {
	var self = this;
	
	bucketCount = typeof bucketCount === 'undefined' ? 5 : bucketCount;
	bucketSize = typeof bucketSize === 'undefined' ? 5 : bucketSize;
	this.bucketSize = bucketSize;
	this.buckets = novaConstructors.newArray0(bucketCount).map0((_1, _2, _3) => {
			return novaConstructors.newArray0(bucketSize);
			
	});
	return this;
	
};

HashMap.init1 = function (source, bucketCount, bucketSize) {
	var self = this;
	
	bucketCount = typeof bucketCount === 'undefined' ? 5 : bucketCount;
	bucketSize = typeof bucketSize === 'undefined' ? 5 : bucketSize;
	this.bucketSize = bucketSize;
	return HashMap.init0.call(this, bucketCount, bucketSize);
	(source || nova_null).forEach0((pair, _2, _3) => {
			self.add((pair || nova_null).key, (pair || nova_null).value);
			
	});
	return this;
	
};

HashMap.prototype.add = function (key, value) {
	return this.set(key, value);
	
};

HashMap.prototype.toArray = function () {
	var self = this;
	
	return this.map0((_1, _2, _3) => {
			return _1;
			
	});
	
};

HashMap.prototype.contains0 = function (value) {
	var pair;
	if ((value.key) === null) {
		return false;
	}
	pair = this.getPair((value || nova_null).key);
	return (pair) != null && (pair || nova_null).value === (value || nova_null).value;
	
};

HashMap.prototype.any0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair)) {
				return true;
			}
		}
	}
	return false;
	
};

HashMap.prototype.all0 = function (func, stopOnContradiction) {
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	contradiction = false;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && !func(pair)) {
				if (stopOnContradiction) {
					return false;
				}
				contradiction = true;
			}
		}
	}
	return !contradiction;
	
};

HashMap.prototype.map0 = function (func) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				(array || nova_null).add0(func(pair, i++, this));
			}
		}
	}
	return array;
	
};

HashMap.prototype.filter0 = function (func) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair, i++, this)) {
				(array || nova_null).add0(pair);
			}
		}
	}
	return array;
	
};

HashMap.prototype.join = function (delimiter) {
	var i;
	var output;
	var nova_local_0;
	i = 0;
	output = novaConstructors.newString2("");
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				if (i > 0) {
					output = (output || nova_null).plus0(delimiter);
				}
				output = (output || nova_null).plus0((pair || nova_null).toString());
			}
		}
	}
	return output;
	
};

HashMap.prototype.skip = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).skip(num);
	
};

HashMap.prototype.take = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).take(num);
	
};

HashMap.prototype.reverse = function () {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).reverse();
	
};

HashMap.prototype.firstWhere0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair)) {
				return pair;
			}
		}
	}
	return null;
	
};

HashMap.prototype.forEach0 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				func(pair, i++, this);
			}
		}
	}
	return this;
	
};

HashMap.prototype.getBucket = function (key) {
	return (this.buckets || nova_null).get(((key || nova_null).accessor_hashCodeLong() & ((this.buckets || nova_null).accessor_count() - 1)));
	
};

HashMap.prototype.getPair = function (key) {
	var self = this;
	
	return ((this.getBucket(key) || nova_null).filter0((x, _2, _3) => {
				return (x) != null && ((x || nova_null).key || nova_null).equals0(key);
				
	}) || nova_null).accessor_first();
	
};

HashMap.prototype.remove = function (key) {
	var bucket;
	var i;
	var nova_local_0;
	if ((key) === null) {
		return null;
	}
	bucket = this.getBucket(key);
	i = 0;
	nova_local_0 = ((bucket) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		pair = (nova_local_0 || nova_null).accessor_next();
		if ((pair) != null && ((pair || nova_null).key || nova_null).equals0(key)) {
			(bucket || nova_null).remove0(i);
			this.count--;
			return (pair || nova_null).value;
		}
		i++;
	}
	return null;
	
};

HashMap.prototype.containsKey = function (key) {
	return (key) != null && (this.getPair(key)) != null;
	
};

HashMap.prototype.clone = function () {
	return novaConstructors.newHashMap1(this);
	
};

HashMap.prototype.toImmutable = function () {
	return novaConstructors.newImmutableHashMap0(this);
	
};

HashMap.prototype.toString = function () {
	var self = this;
	
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0(((this.map0((p, _2, _3) => {
								return (((p || nova_null).key || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(": ").plus0(((p || nova_null).value || nova_null).toString()));
								
					}) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

HashMap.prototype.get = function (key) {
	var nova_local_0;
	return (key) != null ? (nova_local_0 = this.getPair(key)) != null ? (nova_local_0.value) : null : null;
	
};

HashMap.prototype.set = function (key, value) {
	if ((key) === null) {
		return null;
	}
	this.remove(key);
	(this.getBucket(key) || nova_null).add0(novaConstructors.newPair(key, value));
	this.count++;
	return value;
	
};

HashMap.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/HashMap"), false);
	
};

HashMap.prototype.mutator__js_class = function () {
	
};

HashMap.prototype.accessor_iterator = function () {
	return novaConstructors.newHashMapIterator(this);
	
};

HashMap.prototype.mutator_iterator = function () {
	
};

HashMap.prototype.accessor_first = function () {
	return this.first;
	
};

HashMap.prototype.mutator_first = function (value) {
	this.first = value;
	return value;
	
};

HashMap.prototype.accessor_last = function () {
	return this.last;
	
};

HashMap.prototype.mutator_last = function (value) {
	this.last = value;
	return value;
	
};

HashMap.prototype.super = function () {
	
};

novaConstructors.newHashMap0 = function (bucketCount, bucketSize) {
	var __value = new HashMap()
	NovaObject.call(__value);
	HashMap.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMap.init0.call(__value, bucketCount, bucketSize);
	
};

novaConstructors.newHashMap1 = function (source, bucketCount, bucketSize) {
	var __value = new HashMap()
	NovaObject.call(__value);
	HashMap.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMap.init1.call(__value, source, bucketCount, bucketSize);
	
};

var Iterator = function () {
	this.next = null;
	
	
};

Iterator.prototype.constructor = Iterator;


Iterator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Iterator"), false);
	
};

Iterator.prototype.mutator__js_class = function () {
	
};

Iterator.prototype.accessor_hasNext = function () {
	return false;
	
};

Iterator.prototype.mutator_hasNext = function () {
	
};

Iterator.prototype.accessor_next = function () {
	return null;
	
};

Iterator.prototype.mutator_next = function () {
	
};

var HashMapIterator = function () {
	this.bucketIndex = 0;
	this.index = 0;
	this.buckets = null;
	this.bucket = null;
	this.position = 0;
	this.next = null;
	this.map = null;
	
	
};

HashMapIterator.prototype = Object.create(NovaObject.prototype);
HashMapIterator.prototype.constructor = HashMapIterator;


HashMapIterator.prototype.destroy = function () {
	
};

HashMapIterator.init = function (map) {
	this.map = map;
	this.reset();
	this.buckets = (map || nova_null).buckets;
	this.bucket = (this.buckets || nova_null).get(0);
	return this;
	
};

HashMapIterator.prototype.reset = function () {
	this.position = 0;
	this.index = 0;
	this.bucketIndex = 0;
	return this;
	
};

HashMapIterator.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		var value;
		while ((value) === null) {
			var i;
			i = this.index;
			for (; i < (this.bucket || nova_null).accessor_count(); i++) {
				value = (this.bucket || nova_null).get(i);
				if ((value) != null) {
					this.index = i + 1;
					break;
				}
			}
			if ((value) === null) {
				this.bucket = (this.buckets || nova_null).get(++this.bucketIndex);
				this.index = 0;
			}
		}
		this.position++;
		return value;
	}
	throw novaConstructors.newNoSuchElementException();
	
};

HashMapIterator.prototype.mutator_next = function () {
	
};

HashMapIterator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/HashMap.HashMapIterator"), false);
	
};

HashMapIterator.prototype.mutator__js_class = function () {
	
};

HashMapIterator.prototype.accessor_hasNext = function () {
	return this.position < (this.map || nova_null).count;
	
};

HashMapIterator.prototype.mutator_hasNext = function () {
	
};

HashMapIterator.prototype.super = function () {
	
};

novaConstructors.newHashMapIterator = function (map) {
	var __value = new HashMapIterator()
	NovaObject.call(__value);
	HashMapIterator.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMapIterator.init.call(__value, map);
	
};

var HashMap1Long = function () {
	this.buckets = null;
	this.bucketSize = 0;
	this.count = 0;
	this._js_class = null;
	this.first = null;
	this.last = null;
	
	
};

HashMap1Long.prototype = Object.create(NovaObject.prototype);
HashMap1Long.prototype.constructor = HashMap1Long;


HashMap1Long.prototype.destroy = function () {
	
};

HashMap1Long.init0 = function (bucketCount, bucketSize) {
	var self = this;
	
	bucketCount = typeof bucketCount === 'undefined' ? 5 : bucketCount;
	bucketSize = typeof bucketSize === 'undefined' ? 5 : bucketSize;
	this.bucketSize = bucketSize;
	this.buckets = novaConstructors.newArray0(bucketCount).map0((_1, _2, _3) => {
			return novaConstructors.newArray0(bucketSize);
			
	});
	return this;
	
};

HashMap1Long.init1 = function (source, bucketCount, bucketSize) {
	var self = this;
	
	bucketCount = typeof bucketCount === 'undefined' ? 5 : bucketCount;
	bucketSize = typeof bucketSize === 'undefined' ? 5 : bucketSize;
	this.bucketSize = bucketSize;
	return HashMap1Long.init0.call(this, bucketCount, bucketSize);
	(source || nova_null).forEach0((pair, _2, _3) => {
			self.add((pair || nova_null).key, (pair || nova_null).value);
			
	});
	return this;
	
};

HashMap1Long.prototype.add = function (key, value) {
	return this.set(key, value);
	
};

HashMap1Long.prototype.toArray = function () {
	var self = this;
	
	return this.map0((_1, _2, _3) => {
			return _1;
			
	});
	
};

HashMap1Long.prototype.contains0 = function (value) {
	var pair;
	if (false) {
		return false;
	}
	pair = this.getPair((value || nova_null).key);
	return (pair) != null && (pair || nova_null).value === (value || nova_null).value;
	
};

HashMap1Long.prototype.any0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair)) {
				return true;
			}
		}
	}
	return false;
	
};

HashMap1Long.prototype.all0 = function (func, stopOnContradiction) {
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	contradiction = false;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && !func(pair)) {
				if (stopOnContradiction) {
					return false;
				}
				contradiction = true;
			}
		}
	}
	return !contradiction;
	
};

HashMap1Long.prototype.map0 = function (func) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				(array || nova_null).add0(func(pair, i++, this));
			}
		}
	}
	return array;
	
};

HashMap1Long.prototype.filter0 = function (func) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair, i++, this)) {
				(array || nova_null).add0(pair);
			}
		}
	}
	return array;
	
};

HashMap1Long.prototype.join = function (delimiter) {
	var i;
	var output;
	var nova_local_0;
	i = 0;
	output = novaConstructors.newString2("");
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				if (i > 0) {
					output = (output || nova_null).plus0(delimiter);
				}
				output = (output || nova_null).plus0((pair || nova_null).toString());
			}
		}
	}
	return output;
	
};

HashMap1Long.prototype.skip = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).skip(num);
	
};

HashMap1Long.prototype.take = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).take(num);
	
};

HashMap1Long.prototype.reverse = function () {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).reverse();
	
};

HashMap1Long.prototype.firstWhere0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair)) {
				return pair;
			}
		}
	}
	return null;
	
};

HashMap1Long.prototype.forEach0 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				func(pair, i++, this);
			}
		}
	}
	return this;
	
};

HashMap1Long.prototype.getBucket = function (key) {
	return (this.buckets || nova_null).get((NovaLong.hashCodeLong(key) & ((this.buckets || nova_null).accessor_count() - 1)));
	
};

HashMap1Long.prototype.getPair = function (key) {
	var self = this;
	
	return ((this.getBucket(key) || nova_null).filter0((x, _2, _3) => {
				return (x) != null && NovaLong.equals1((x || nova_null).key, key);
				
	}) || nova_null).accessor_first();
	
};

HashMap1Long.prototype.remove = function (key) {
	var bucket;
	var i;
	var nova_local_0;
	if (false) {
		return null;
	}
	bucket = this.getBucket(key);
	i = 0;
	nova_local_0 = ((bucket) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		pair = (nova_local_0 || nova_null).accessor_next();
		if ((pair) != null && NovaLong.equals1((pair || nova_null).key, key)) {
			(bucket || nova_null).remove0(i);
			this.count--;
			return (pair || nova_null).value;
		}
		i++;
	}
	return null;
	
};

HashMap1Long.prototype.containsKey = function (key) {
	return true;
	
};

HashMap1Long.prototype.clone = function () {
	return novaConstructors.newHashMap1Long1(this);
	
};

HashMap1Long.prototype.toImmutable = function () {
	return novaConstructors.newImmutableHashMap1Long0(this);
	
};

HashMap1Long.prototype.toString = function () {
	var self = this;
	
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0(((this.map0((p, _2, _3) => {
								return NovaLong.toString((p || nova_null).key).plus0(novaConstructors.newString2(": ").plus0(((p || nova_null).value || nova_null).toString()));
								
					}) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

HashMap1Long.prototype.get = function (key) {
	var nova_local_0;
	return true ? (nova_local_0 = this.getPair(key)) != null ? (nova_local_0.value) : null : null;
	
};

HashMap1Long.prototype.set = function (key, value) {
	if (false) {
		return null;
	}
	this.remove(key);
	(this.getBucket(key) || nova_null).add0(novaConstructors.newPair1Long(key, value));
	this.count++;
	return value;
	return value;
	
};

HashMap1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/HashMap"), false);
	
};

HashMap1Long.prototype.accessor_iterator = function () {
	return novaConstructors.newHashMapIterator1Long(this);
	
};

HashMap1Long.prototype.accessor_first = function () {
	return this.first;
	
};

HashMap1Long.prototype.mutator_first = function (value) {
	this.first = value;
	return value;
	return value;
	
};

HashMap1Long.prototype.accessor_last = function () {
	return this.last;
	
};

HashMap1Long.prototype.mutator_last = function (value) {
	this.last = value;
	return value;
	return value;
	
};

HashMap1Long.prototype.super = function () {
	
};

novaConstructors.newHashMap1Long0 = function (bucketCount, bucketSize) {
	var __value = new HashMap1Long()
	NovaObject.call(__value);
	HashMap1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMap1Long.init0.call(__value, bucketCount, bucketSize);
	
};

novaConstructors.newHashMap1Long1 = function (source, bucketCount, bucketSize) {
	var __value = new HashMap1Long()
	NovaObject.call(__value);
	HashMap1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMap1Long.init1.call(__value, source, bucketCount, bucketSize);
	
};

var HashMapIterator1Long = function () {
	this.bucketIndex = 0;
	this.index = 0;
	this.buckets = null;
	this.bucket = null;
	this.position = 0;
	this.next = null;
	this.map = null;
	
	
};

HashMapIterator1Long.prototype = Object.create(NovaObject.prototype);
HashMapIterator1Long.prototype.constructor = HashMapIterator1Long;


HashMapIterator1Long.prototype.destroy = function () {
	
};

HashMapIterator1Long.init = function (map) {
	this.map = map;
	this.reset();
	this.buckets = (map || nova_null).buckets;
	this.bucket = (this.buckets || nova_null).get(0);
	return this;
	
};

HashMapIterator1Long.prototype.reset = function () {
	this.position = 0;
	this.index = 0;
	this.bucketIndex = 0;
	return this;
	
};

HashMapIterator1Long.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		var value;
		while ((value) === null) {
			var i;
			i = this.index;
			for (; i < (this.bucket || nova_null).accessor_count(); i++) {
				value = (this.bucket || nova_null).get(i);
				if ((value) != null) {
					this.index = i + 1;
					break;
				}
			}
			if ((value) === null) {
				this.bucket = (this.buckets || nova_null).get(++this.bucketIndex);
				this.index = 0;
			}
		}
		this.position++;
		return value;
	}
	throw novaConstructors.newNoSuchElementException();
	
};

HashMapIterator1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/HashMap.HashMapIterator"), false);
	
};

HashMapIterator1Long.prototype.accessor_hasNext = function () {
	return this.position < (this.map || nova_null).count;
	
};

HashMapIterator1Long.prototype.super = function () {
	
};

novaConstructors.newHashMapIterator1Long = function (map) {
	var __value = new HashMapIterator1Long()
	NovaObject.call(__value);
	HashMapIterator1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMapIterator1Long.init.call(__value, map);
	
};

var HashMap1Int = function () {
	this.buckets = null;
	this.bucketSize = 0;
	this.count = 0;
	this.first = null;
	this.last = null;
	
	
};

HashMap1Int.prototype = Object.create(NovaObject.prototype);
HashMap1Int.prototype.constructor = HashMap1Int;


HashMap1Int.prototype.destroy = function () {
	
};

HashMap1Int.init0 = function (bucketCount, bucketSize) {
	var self = this;
	
	bucketCount = typeof bucketCount === 'undefined' ? 5 : bucketCount;
	bucketSize = typeof bucketSize === 'undefined' ? 5 : bucketSize;
	this.bucketSize = bucketSize;
	this.buckets = novaConstructors.newArray0(bucketCount).map0((_1, _2, _3) => {
			return novaConstructors.newArray0(bucketSize);
			
	});
	return this;
	
};

HashMap1Int.init1 = function (source, bucketCount, bucketSize) {
	var self = this;
	
	bucketCount = typeof bucketCount === 'undefined' ? 5 : bucketCount;
	bucketSize = typeof bucketSize === 'undefined' ? 5 : bucketSize;
	this.bucketSize = bucketSize;
	return HashMap1Int.init0.call(this, bucketCount, bucketSize);
	(source || nova_null).forEach0((pair, _2, _3) => {
			self.add((pair || nova_null).key, (pair || nova_null).value);
			
	});
	return this;
	
};

HashMap1Int.prototype.add = function (key, value) {
	return this.set(key, value);
	
};

HashMap1Int.prototype.toArray = function () {
	var self = this;
	
	return this.map0((_1, _2, _3) => {
			return _1;
			
	});
	
};

HashMap1Int.prototype.contains0 = function (value) {
	var pair;
	if (false) {
		return false;
	}
	pair = this.getPair((value || nova_null).key);
	return (pair) != null && (pair || nova_null).value === (value || nova_null).value;
	
};

HashMap1Int.prototype.any0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair)) {
				return true;
			}
		}
	}
	return false;
	
};

HashMap1Int.prototype.all0 = function (func, stopOnContradiction) {
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	contradiction = false;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && !func(pair)) {
				if (stopOnContradiction) {
					return false;
				}
				contradiction = true;
			}
		}
	}
	return !contradiction;
	
};

HashMap1Int.prototype.map0 = function (func) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				(array || nova_null).add0(func(pair, i++, this));
			}
		}
	}
	return array;
	
};

HashMap1Int.prototype.filter0 = function (func) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair, i++, this)) {
				(array || nova_null).add0(pair);
			}
		}
	}
	return array;
	
};

HashMap1Int.prototype.join = function (delimiter) {
	var i;
	var output;
	var nova_local_0;
	i = 0;
	output = novaConstructors.newString2("");
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				if (i > 0) {
					output = (output || nova_null).plus0(delimiter);
				}
				output = (output || nova_null).plus0((pair || nova_null).toString());
			}
		}
	}
	return output;
	
};

HashMap1Int.prototype.skip = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).skip(num);
	
};

HashMap1Int.prototype.take = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).take(num);
	
};

HashMap1Int.prototype.reverse = function () {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).reverse();
	
};

HashMap1Int.prototype.firstWhere0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair)) {
				return pair;
			}
		}
	}
	return null;
	
};

HashMap1Int.prototype.forEach0 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				func(pair, i++, this);
			}
		}
	}
	return this;
	
};

HashMap1Int.prototype.getBucket = function (key) {
	return (this.buckets || nova_null).get((NovaInt.hashCodeLong(key) & ((this.buckets || nova_null).accessor_count() - 1)));
	
};

HashMap1Int.prototype.getPair = function (key) {
	var self = this;
	
	return ((this.getBucket(key) || nova_null).filter0((x, _2, _3) => {
				return (x) != null && NovaInt.equals1((x || nova_null).key, key);
				
	}) || nova_null).accessor_first();
	
};

HashMap1Int.prototype.remove = function (key) {
	var bucket;
	var i;
	var nova_local_0;
	if (false) {
		return null;
	}
	bucket = this.getBucket(key);
	i = 0;
	nova_local_0 = ((bucket) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		pair = (nova_local_0 || nova_null).accessor_next();
		if ((pair) != null && NovaInt.equals1((pair || nova_null).key, key)) {
			(bucket || nova_null).remove0(i);
			this.count--;
			return (pair || nova_null).value;
		}
		i++;
	}
	return null;
	
};

HashMap1Int.prototype.containsKey = function (key) {
	return true;
	
};

HashMap1Int.prototype.clone = function () {
	return novaConstructors.newHashMap1Int1(this);
	
};

HashMap1Int.prototype.toImmutable = function () {
	return novaConstructors.newImmutableHashMap1Int0(this);
	
};

HashMap1Int.prototype.toString = function () {
	var self = this;
	
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0(((this.map0((p, _2, _3) => {
								return NovaInt.toString((p || nova_null).key).plus0(novaConstructors.newString2(": ").plus0(((p || nova_null).value || nova_null).toString()));
								
					}) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

HashMap1Int.prototype.get = function (key) {
	var nova_local_0;
	return true ? (nova_local_0 = this.getPair(key)) != null ? (nova_local_0.value) : null : null;
	
};

HashMap1Int.prototype.set = function (key, value) {
	if (false) {
		return null;
	}
	this.remove(key);
	(this.getBucket(key) || nova_null).add0(novaConstructors.newPair1Int(key, value));
	this.count++;
	return value;
	return value;
	
};

HashMap1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/HashMap"), false);
	
};

HashMap1Int.prototype.accessor_iterator = function () {
	return novaConstructors.newHashMapIterator1Int(this);
	
};

HashMap1Int.prototype.accessor_first = function () {
	return this.first;
	
};

HashMap1Int.prototype.mutator_first = function (value) {
	this.first = value;
	return value;
	return value;
	
};

HashMap1Int.prototype.accessor_last = function () {
	return this.last;
	
};

HashMap1Int.prototype.mutator_last = function (value) {
	this.last = value;
	return value;
	return value;
	
};

HashMap1Int.prototype.super = function () {
	
};

novaConstructors.newHashMap1Int0 = function (bucketCount, bucketSize) {
	var __value = new HashMap1Int()
	NovaObject.call(__value);
	HashMap1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMap1Int.init0.call(__value, bucketCount, bucketSize);
	
};

novaConstructors.newHashMap1Int1 = function (source, bucketCount, bucketSize) {
	var __value = new HashMap1Int()
	NovaObject.call(__value);
	HashMap1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMap1Int.init1.call(__value, source, bucketCount, bucketSize);
	
};

var HashMapIterator1Int = function () {
	this.bucketIndex = 0;
	this.index = 0;
	this.buckets = null;
	this.bucket = null;
	this.position = 0;
	this.next = null;
	this.map = null;
	
	
};

HashMapIterator1Int.prototype = Object.create(NovaObject.prototype);
HashMapIterator1Int.prototype.constructor = HashMapIterator1Int;


HashMapIterator1Int.prototype.destroy = function () {
	
};

HashMapIterator1Int.init = function (map) {
	this.map = map;
	this.reset();
	this.buckets = (map || nova_null).buckets;
	this.bucket = (this.buckets || nova_null).get(0);
	return this;
	
};

HashMapIterator1Int.prototype.reset = function () {
	this.position = 0;
	this.index = 0;
	this.bucketIndex = 0;
	return this;
	
};

HashMapIterator1Int.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		var value;
		while ((value) === null) {
			var i;
			i = this.index;
			for (; i < (this.bucket || nova_null).accessor_count(); i++) {
				value = (this.bucket || nova_null).get(i);
				if ((value) != null) {
					this.index = i + 1;
					break;
				}
			}
			if ((value) === null) {
				this.bucket = (this.buckets || nova_null).get(++this.bucketIndex);
				this.index = 0;
			}
		}
		this.position++;
		return value;
	}
	throw novaConstructors.newNoSuchElementException();
	
};

HashMapIterator1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/HashMap.HashMapIterator"), false);
	
};

HashMapIterator1Int.prototype.accessor_hasNext = function () {
	return this.position < (this.map || nova_null).count;
	
};

HashMapIterator1Int.prototype.super = function () {
	
};

novaConstructors.newHashMapIterator1Int = function (map) {
	var __value = new HashMapIterator1Int()
	NovaObject.call(__value);
	HashMapIterator1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMapIterator1Int.init.call(__value, map);
	
};

var HashMap1Int2Int = function () {
	this.buckets = null;
	this.bucketSize = 0;
	this.count = 0;
	this.first = null;
	this.last = null;
	
	
};

HashMap1Int2Int.prototype = Object.create(NovaObject.prototype);
HashMap1Int2Int.prototype.constructor = HashMap1Int2Int;


HashMap1Int2Int.prototype.destroy = function () {
	
};

HashMap1Int2Int.init0 = function (bucketCount, bucketSize) {
	var self = this;
	
	bucketCount = typeof bucketCount === 'undefined' ? 5 : bucketCount;
	bucketSize = typeof bucketSize === 'undefined' ? 5 : bucketSize;
	this.bucketSize = bucketSize;
	this.buckets = novaConstructors.newArray0(bucketCount).map0((_1, _2, _3) => {
			return novaConstructors.newArray0(bucketSize);
			
	});
	return this;
	
};

HashMap1Int2Int.init1 = function (source, bucketCount, bucketSize) {
	var self = this;
	
	bucketCount = typeof bucketCount === 'undefined' ? 5 : bucketCount;
	bucketSize = typeof bucketSize === 'undefined' ? 5 : bucketSize;
	this.bucketSize = bucketSize;
	return HashMap1Int2Int.init0.call(this, bucketCount, bucketSize);
	(source || nova_null).forEach0((pair, _2, _3) => {
			self.add((pair || nova_null).key, (pair || nova_null).value);
			
	});
	return this;
	
};

HashMap1Int2Int.prototype.add = function (key, value) {
	return this.set(key, value);
	
};

HashMap1Int2Int.prototype.toArray = function () {
	var self = this;
	
	return this.map0((_1, _2, _3) => {
			return _1;
			
	});
	
};

HashMap1Int2Int.prototype.contains0 = function (value) {
	var pair;
	if (false) {
		return false;
	}
	pair = this.getPair((value || nova_null).key);
	return (pair) != null && (pair || nova_null).value === (value || nova_null).value;
	
};

HashMap1Int2Int.prototype.any0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair)) {
				return true;
			}
		}
	}
	return false;
	
};

HashMap1Int2Int.prototype.all0 = function (func, stopOnContradiction) {
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	contradiction = false;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && !func(pair)) {
				if (stopOnContradiction) {
					return false;
				}
				contradiction = true;
			}
		}
	}
	return !contradiction;
	
};

HashMap1Int2Int.prototype.map0 = function (func) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				(array || nova_null).add0(func(pair, i++, this));
			}
		}
	}
	return array;
	
};

HashMap1Int2Int.prototype.filter0 = function (func) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair, i++, this)) {
				(array || nova_null).add0(pair);
			}
		}
	}
	return array;
	
};

HashMap1Int2Int.prototype.join = function (delimiter) {
	var i;
	var output;
	var nova_local_0;
	i = 0;
	output = novaConstructors.newString2("");
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				if (i > 0) {
					output = (output || nova_null).plus0(delimiter);
				}
				output = (output || nova_null).plus0((pair || nova_null).toString());
			}
		}
	}
	return output;
	
};

HashMap1Int2Int.prototype.skip = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).skip(num);
	
};

HashMap1Int2Int.prototype.take = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).take(num);
	
};

HashMap1Int2Int.prototype.reverse = function () {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).reverse();
	
};

HashMap1Int2Int.prototype.firstWhere0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair)) {
				return pair;
			}
		}
	}
	return null;
	
};

HashMap1Int2Int.prototype.forEach0 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				func(pair, i++, this);
			}
		}
	}
	return this;
	
};

HashMap1Int2Int.prototype.getBucket = function (key) {
	return (this.buckets || nova_null).get((NovaInt.hashCodeLong(key) & ((this.buckets || nova_null).accessor_count() - 1)));
	
};

HashMap1Int2Int.prototype.getPair = function (key) {
	var self = this;
	
	return ((this.getBucket(key) || nova_null).filter0((x, _2, _3) => {
				return (x) != null && NovaInt.equals1((x || nova_null).key, key);
				
	}) || nova_null).accessor_first();
	
};

HashMap1Int2Int.prototype.remove = function (key) {
	var bucket;
	var i;
	var nova_local_0;
	if (false) {
		return 0;
	}
	bucket = this.getBucket(key);
	i = 0;
	nova_local_0 = ((bucket) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		pair = (nova_local_0 || nova_null).accessor_next();
		if ((pair) != null && NovaInt.equals1((pair || nova_null).key, key)) {
			(bucket || nova_null).remove0(i);
			this.count--;
			return (pair || nova_null).value;
		}
		i++;
	}
	return 0;
	
};

HashMap1Int2Int.prototype.containsKey = function (key) {
	return true;
	
};

HashMap1Int2Int.prototype.clone = function () {
	return novaConstructors.newHashMap1Int2Int1(this);
	
};

HashMap1Int2Int.prototype.toImmutable = function () {
	return novaConstructors.newImmutableHashMap1Int2Int0(this);
	
};

HashMap1Int2Int.prototype.toString = function () {
	var self = this;
	
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0(((this.map0((p, _2, _3) => {
								return NovaInt.toString((p || nova_null).key).plus0(novaConstructors.newString2(": ").plus0(NovaInt.toString((p || nova_null).value)));
								
					}) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

HashMap1Int2Int.prototype.get = function (key) {
	var nova_local_0;
	return true ? (nova_local_0 = this.getPair(key)) != null ? (nova_local_0.value) : 0 : 0;
	
};

HashMap1Int2Int.prototype.set = function (key, value) {
	if (false) {
		return 0;
	}
	this.remove(key);
	(this.getBucket(key) || nova_null).add0(novaConstructors.newPair1Int2Int(key, value));
	this.count++;
	return value;
	return value;
	
};

HashMap1Int2Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/HashMap"), false);
	
};

HashMap1Int2Int.prototype.accessor_iterator = function () {
	return novaConstructors.newHashMapIterator1Int2Int(this);
	
};

HashMap1Int2Int.prototype.accessor_first = function () {
	return this.first;
	
};

HashMap1Int2Int.prototype.mutator_first = function (value) {
	this.first = value;
	return value;
	return value;
	
};

HashMap1Int2Int.prototype.accessor_last = function () {
	return this.last;
	
};

HashMap1Int2Int.prototype.mutator_last = function (value) {
	this.last = value;
	return value;
	return value;
	
};

HashMap1Int2Int.prototype.super = function () {
	
};

novaConstructors.newHashMap1Int2Int0 = function (bucketCount, bucketSize) {
	var __value = new HashMap1Int2Int()
	NovaObject.call(__value);
	HashMap1Int2Int.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMap1Int2Int.init0.call(__value, bucketCount, bucketSize);
	
};

novaConstructors.newHashMap1Int2Int1 = function (source, bucketCount, bucketSize) {
	var __value = new HashMap1Int2Int()
	NovaObject.call(__value);
	HashMap1Int2Int.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMap1Int2Int.init1.call(__value, source, bucketCount, bucketSize);
	
};

var HashMapIterator1Int2Int = function () {
	this.bucketIndex = 0;
	this.index = 0;
	this.buckets = null;
	this.bucket = null;
	this.position = 0;
	this.next = null;
	this.map = null;
	
	
};

HashMapIterator1Int2Int.prototype = Object.create(NovaObject.prototype);
HashMapIterator1Int2Int.prototype.constructor = HashMapIterator1Int2Int;


HashMapIterator1Int2Int.prototype.destroy = function () {
	
};

HashMapIterator1Int2Int.init = function (map) {
	this.map = map;
	this.reset();
	this.buckets = (map || nova_null).buckets;
	this.bucket = (this.buckets || nova_null).get(0);
	return this;
	
};

HashMapIterator1Int2Int.prototype.reset = function () {
	this.position = 0;
	this.index = 0;
	this.bucketIndex = 0;
	return this;
	
};

HashMapIterator1Int2Int.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		var value;
		while ((value) === null) {
			var i;
			i = this.index;
			for (; i < (this.bucket || nova_null).accessor_count(); i++) {
				value = (this.bucket || nova_null).get(i);
				if ((value) != null) {
					this.index = i + 1;
					break;
				}
			}
			if ((value) === null) {
				this.bucket = (this.buckets || nova_null).get(++this.bucketIndex);
				this.index = 0;
			}
		}
		this.position++;
		return value;
	}
	throw novaConstructors.newNoSuchElementException();
	
};

HashMapIterator1Int2Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/HashMap.HashMapIterator"), false);
	
};

HashMapIterator1Int2Int.prototype.accessor_hasNext = function () {
	return this.position < (this.map || nova_null).count;
	
};

HashMapIterator1Int2Int.prototype.super = function () {
	
};

novaConstructors.newHashMapIterator1Int2Int = function (map) {
	var __value = new HashMapIterator1Int2Int()
	NovaObject.call(__value);
	HashMapIterator1Int2Int.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMapIterator1Int2Int.init.call(__value, map);
	
};

var HashMap1Long2Int = function () {
	this.buckets = null;
	this.bucketSize = 0;
	this.count = 0;
	this.first = null;
	this.last = null;
	
	
};

HashMap1Long2Int.prototype = Object.create(NovaObject.prototype);
HashMap1Long2Int.prototype.constructor = HashMap1Long2Int;


HashMap1Long2Int.prototype.destroy = function () {
	
};

HashMap1Long2Int.init0 = function (bucketCount, bucketSize) {
	var self = this;
	
	bucketCount = typeof bucketCount === 'undefined' ? 5 : bucketCount;
	bucketSize = typeof bucketSize === 'undefined' ? 5 : bucketSize;
	this.bucketSize = bucketSize;
	this.buckets = novaConstructors.newArray0(bucketCount).map0((_1, _2, _3) => {
			return novaConstructors.newArray0(bucketSize);
			
	});
	return this;
	
};

HashMap1Long2Int.init1 = function (source, bucketCount, bucketSize) {
	var self = this;
	
	bucketCount = typeof bucketCount === 'undefined' ? 5 : bucketCount;
	bucketSize = typeof bucketSize === 'undefined' ? 5 : bucketSize;
	this.bucketSize = bucketSize;
	return HashMap1Long2Int.init0.call(this, bucketCount, bucketSize);
	(source || nova_null).forEach0((pair, _2, _3) => {
			self.add((pair || nova_null).key, (pair || nova_null).value);
			
	});
	return this;
	
};

HashMap1Long2Int.prototype.add = function (key, value) {
	return this.set(key, value);
	
};

HashMap1Long2Int.prototype.toArray = function () {
	var self = this;
	
	return this.map0((_1, _2, _3) => {
			return _1;
			
	});
	
};

HashMap1Long2Int.prototype.contains0 = function (value) {
	var pair;
	if (false) {
		return false;
	}
	pair = this.getPair((value || nova_null).key);
	return (pair) != null && (pair || nova_null).value === (value || nova_null).value;
	
};

HashMap1Long2Int.prototype.any0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair)) {
				return true;
			}
		}
	}
	return false;
	
};

HashMap1Long2Int.prototype.all0 = function (func, stopOnContradiction) {
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	contradiction = false;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && !func(pair)) {
				if (stopOnContradiction) {
					return false;
				}
				contradiction = true;
			}
		}
	}
	return !contradiction;
	
};

HashMap1Long2Int.prototype.map0 = function (func) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				(array || nova_null).add0(func(pair, i++, this));
			}
		}
	}
	return array;
	
};

HashMap1Long2Int.prototype.filter0 = function (func) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair, i++, this)) {
				(array || nova_null).add0(pair);
			}
		}
	}
	return array;
	
};

HashMap1Long2Int.prototype.join = function (delimiter) {
	var i;
	var output;
	var nova_local_0;
	i = 0;
	output = novaConstructors.newString2("");
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				if (i > 0) {
					output = (output || nova_null).plus0(delimiter);
				}
				output = (output || nova_null).plus0((pair || nova_null).toString());
			}
		}
	}
	return output;
	
};

HashMap1Long2Int.prototype.skip = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).skip(num);
	
};

HashMap1Long2Int.prototype.take = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).take(num);
	
};

HashMap1Long2Int.prototype.reverse = function () {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).reverse();
	
};

HashMap1Long2Int.prototype.firstWhere0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null && func(pair)) {
				return pair;
			}
		}
	}
	return null;
	
};

HashMap1Long2Int.prototype.forEach0 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			pair = (nova_local_1 || nova_null).accessor_next();
			if ((pair) != null) {
				func(pair, i++, this);
			}
		}
	}
	return this;
	
};

HashMap1Long2Int.prototype.getBucket = function (key) {
	return (this.buckets || nova_null).get((NovaLong.hashCodeLong(key) & ((this.buckets || nova_null).accessor_count() - 1)));
	
};

HashMap1Long2Int.prototype.getPair = function (key) {
	var self = this;
	
	return ((this.getBucket(key) || nova_null).filter0((x, _2, _3) => {
				return (x) != null && NovaLong.equals1((x || nova_null).key, key);
				
	}) || nova_null).accessor_first();
	
};

HashMap1Long2Int.prototype.remove = function (key) {
	var bucket;
	var i;
	var nova_local_0;
	if (false) {
		return 0;
	}
	bucket = this.getBucket(key);
	i = 0;
	nova_local_0 = ((bucket) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		pair = (nova_local_0 || nova_null).accessor_next();
		if ((pair) != null && NovaLong.equals1((pair || nova_null).key, key)) {
			(bucket || nova_null).remove0(i);
			this.count--;
			return (pair || nova_null).value;
		}
		i++;
	}
	return 0;
	
};

HashMap1Long2Int.prototype.containsKey = function (key) {
	return true;
	
};

HashMap1Long2Int.prototype.clone = function () {
	return novaConstructors.newHashMap1Long2Int1(this);
	
};

HashMap1Long2Int.prototype.toImmutable = function () {
	return novaConstructors.newImmutableHashMap1Long2Int0(this);
	
};

HashMap1Long2Int.prototype.toString = function () {
	var self = this;
	
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0(((this.map0((p, _2, _3) => {
								return NovaLong.toString((p || nova_null).key).plus0(novaConstructors.newString2(": ").plus0(NovaInt.toString((p || nova_null).value)));
								
					}) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

HashMap1Long2Int.prototype.get = function (key) {
	var nova_local_0;
	return true ? (nova_local_0 = this.getPair(key)) != null ? (nova_local_0.value) : 0 : 0;
	
};

HashMap1Long2Int.prototype.set = function (key, value) {
	if (false) {
		return 0;
	}
	this.remove(key);
	(this.getBucket(key) || nova_null).add0(novaConstructors.newPair1Long2Int(key, value));
	this.count++;
	return value;
	return value;
	
};

HashMap1Long2Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/HashMap"), false);
	
};

HashMap1Long2Int.prototype.accessor_iterator = function () {
	return novaConstructors.newHashMapIterator1Long2Int(this);
	
};

HashMap1Long2Int.prototype.accessor_first = function () {
	return this.first;
	
};

HashMap1Long2Int.prototype.mutator_first = function (value) {
	this.first = value;
	return value;
	return value;
	
};

HashMap1Long2Int.prototype.accessor_last = function () {
	return this.last;
	
};

HashMap1Long2Int.prototype.mutator_last = function (value) {
	this.last = value;
	return value;
	return value;
	
};

HashMap1Long2Int.prototype.super = function () {
	
};

novaConstructors.newHashMap1Long2Int0 = function (bucketCount, bucketSize) {
	var __value = new HashMap1Long2Int()
	NovaObject.call(__value);
	HashMap1Long2Int.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMap1Long2Int.init0.call(__value, bucketCount, bucketSize);
	
};

novaConstructors.newHashMap1Long2Int1 = function (source, bucketCount, bucketSize) {
	var __value = new HashMap1Long2Int()
	NovaObject.call(__value);
	HashMap1Long2Int.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMap1Long2Int.init1.call(__value, source, bucketCount, bucketSize);
	
};

var HashMapIterator1Long2Int = function () {
	this.bucketIndex = 0;
	this.index = 0;
	this.buckets = null;
	this.bucket = null;
	this.position = 0;
	this.next = null;
	this.map = null;
	
	
};

HashMapIterator1Long2Int.prototype = Object.create(NovaObject.prototype);
HashMapIterator1Long2Int.prototype.constructor = HashMapIterator1Long2Int;


HashMapIterator1Long2Int.prototype.destroy = function () {
	
};

HashMapIterator1Long2Int.init = function (map) {
	this.map = map;
	this.reset();
	this.buckets = (map || nova_null).buckets;
	this.bucket = (this.buckets || nova_null).get(0);
	return this;
	
};

HashMapIterator1Long2Int.prototype.reset = function () {
	this.position = 0;
	this.index = 0;
	this.bucketIndex = 0;
	return this;
	
};

HashMapIterator1Long2Int.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		var value;
		while ((value) === null) {
			var i;
			i = this.index;
			for (; i < (this.bucket || nova_null).accessor_count(); i++) {
				value = (this.bucket || nova_null).get(i);
				if ((value) != null) {
					this.index = i + 1;
					break;
				}
			}
			if ((value) === null) {
				this.bucket = (this.buckets || nova_null).get(++this.bucketIndex);
				this.index = 0;
			}
		}
		this.position++;
		return value;
	}
	throw novaConstructors.newNoSuchElementException();
	
};

HashMapIterator1Long2Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/HashMap.HashMapIterator"), false);
	
};

HashMapIterator1Long2Int.prototype.accessor_hasNext = function () {
	return this.position < (this.map || nova_null).count;
	
};

HashMapIterator1Long2Int.prototype.super = function () {
	
};

novaConstructors.newHashMapIterator1Long2Int = function (map) {
	var __value = new HashMapIterator1Long2Int()
	NovaObject.call(__value);
	HashMapIterator1Long2Int.prototype.super.apply(__value, [].slice.call(arguments));
	return HashMapIterator1Long2Int.init.call(__value, map);
	
};

var HashSet = function () {
	this.buckets = null;
	this.bucketSize = 0;
	this.size = 0;
	this.count = 0;
	this.iterator = null;
	this.first = null;
	this.last = null;
	
	
};

HashSet.prototype = Object.create(NovaObject.prototype);
HashSet.prototype.constructor = HashSet;


HashSet.prototype.destroy = function () {
	
};

HashSet.init = function (bucketCount, bucketSize) {
	var self = this;
	
	bucketCount = typeof bucketCount === 'undefined' ? 5 : bucketCount;
	bucketSize = typeof bucketSize === 'undefined' ? 5 : bucketSize;
	this.bucketSize = bucketSize;
	this.buckets = novaConstructors.newArray0(bucketCount).map0((_1, _2, _3) => {
			return novaConstructors.newArray0(bucketSize);
			
	});
	return this;
	
};

HashSet.prototype.toArray = function () {
	var self = this;
	
	return this.map0((_1, _2, _3) => {
			return _1;
			
	});
	
};

HashSet.prototype.any0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			v = (nova_local_1 || nova_null).accessor_next();
			if ((v) != null && func(v)) {
				return true;
			}
		}
	}
	return false;
	
};

HashSet.prototype.all0 = function (func, stopOnContradiction) {
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	contradiction = false;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			v = (nova_local_1 || nova_null).accessor_next();
			if ((v) != null && !func(v)) {
				if (stopOnContradiction) {
					return false;
				}
				contradiction = true;
			}
		}
	}
	return !contradiction;
	
};

HashSet.prototype.map0 = function (func) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			v = (nova_local_1 || nova_null).accessor_next();
			if ((v) != null) {
				(array || nova_null).add0(func(v, i++, this));
			}
		}
	}
	return array;
	
};

HashSet.prototype.filter0 = function (func) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			v = (nova_local_1 || nova_null).accessor_next();
			if ((v) != null && func(v, i++, this)) {
				(array || nova_null).add0(v);
			}
		}
	}
	return array;
	
};

HashSet.prototype.join = function (delimiter) {
	var i;
	var output;
	var nova_local_0;
	i = 0;
	output = novaConstructors.newString2("");
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			v = (nova_local_1 || nova_null).accessor_next();
			if ((v) != null) {
				if (i > 0) {
					output = (output || nova_null).plus0(delimiter);
				}
				output = (output || nova_null).plus0((v || nova_null).toString());
			}
		}
	}
	return output;
	
};

HashSet.prototype.skip = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).skip(num);
	
};

HashSet.prototype.take = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).take(num);
	
};

HashSet.prototype.reverse = function () {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).reverse();
	
};

HashSet.prototype.firstWhere0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			v = (nova_local_1 || nova_null).accessor_next();
			if ((v) != null && func(v)) {
				return v;
			}
		}
	}
	return null;
	
};

HashSet.prototype.forEach0 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this.buckets) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var nova_local_1;
		bucket = (nova_local_0 || nova_null).accessor_next();
		nova_local_1 = ((bucket) || nova_null).accessor_iterator();
		while ((nova_local_1 || nova_null).accessor_hasNext()) {
			v = (nova_local_1 || nova_null).accessor_next();
			if ((v) != null) {
				func(v, i++, this);
			}
		}
	}
	return this;
	
};

HashSet.prototype.getBucket = function (value) {
	return (this.buckets || nova_null).get(((value || nova_null).accessor_hashCodeLong() & ((this.buckets || nova_null).accessor_count() - 1)));
	
};

HashSet.prototype.add = function (value) {
	(this.getBucket(value) || nova_null).add0(value);
	return this;
	
};

HashSet.prototype.get = function (value) {
	var self = this;
	
	return (this.getBucket(value) || nova_null).firstWhere0((x) => {
			return (x) != null && (x || nova_null).equals0(value);
			
	});
	
};

HashSet.prototype.remove = function (value) {
	var bucket;
	var i;
	var nova_local_0;
	bucket = this.getBucket(value);
	i = 0;
	nova_local_0 = ((bucket) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		v = (nova_local_0 || nova_null).accessor_next();
		if ((v) != null && (v || nova_null).equals0(value)) {
			(bucket || nova_null).remove0(i);
			return v;
		}
		i++;
	}
	return null;
	
};

HashSet.prototype.contains0 = function (value) {
	return (value) != null && (this.get(value)) != null;
	
};

HashSet.prototype.toString = function () {
	return novaConstructors.newString2("HashSet [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	
};

HashSet.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/HashSet"), false);
	
};

HashSet.prototype.mutator__js_class = function () {
	
};

HashSet.prototype.accessor_count = function () {
	return this.count;
	
};

HashSet.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	
};

HashSet.prototype.accessor_iterator = function () {
	return this.iterator;
	
};

HashSet.prototype.mutator_iterator = function (value) {
	this.iterator = value;
	return value;
	
};

HashSet.prototype.accessor_first = function () {
	return this.first;
	
};

HashSet.prototype.mutator_first = function (value) {
	this.first = value;
	return value;
	
};

HashSet.prototype.accessor_last = function () {
	return this.last;
	
};

HashSet.prototype.mutator_last = function (value) {
	this.last = value;
	return value;
	
};

HashSet.prototype.super = function () {
	
};

novaConstructors.newHashSet = function (bucketCount, bucketSize) {
	var __value = new HashSet()
	NovaObject.call(__value);
	HashSet.prototype.super.apply(__value, [].slice.call(arguments));
	return HashSet.init.call(__value, bucketCount, bucketSize);
	
};

var ImmutableHashMap = function () {
	this.map = null;
	this._js_class = null;
	this.iterator = null;
	this.first = null;
	this.last = null;
	
	
};

ImmutableHashMap.prototype = Object.create(NovaObject.prototype);
ImmutableHashMap.prototype.constructor = ImmutableHashMap;


ImmutableHashMap.prototype.destroy = function () {
	
};

ImmutableHashMap.init0 = function (map) {
	return ImmutableHashMap.init1.call(this, map, true);
	return this;
	
};

ImmutableHashMap.init1 = function (map, clone) {
	this.map = clone ? (map || nova_null).clone() : map;
	return this;
	
};

ImmutableHashMap.prototype.toArray = function () {
	var self = this;
	
	return this.map0((_1, _2, _3) => {
			return _1;
			
	});
	
};

ImmutableHashMap.prototype.contains0 = function (value) {
	return (this.map || nova_null).contains0(value);
	
};

ImmutableHashMap.prototype.any0 = function (func) {
	return (this.map || nova_null).any0(func);
	
};

ImmutableHashMap.prototype.all0 = function (func, stopOnContradiction) {
	return (this.map || nova_null).all0(func, stopOnContradiction);
	
};

ImmutableHashMap.prototype.map0 = function (func) {
	return (this.map || nova_null).map0(func);
	
};

ImmutableHashMap.prototype.filter0 = function (func) {
	return (this.map || nova_null).filter0(func);
	
};

ImmutableHashMap.prototype.join = function (delimiter) {
	return (this.map || nova_null).join(delimiter);
	
};

ImmutableHashMap.prototype.skip = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).skip(num);
	
};

ImmutableHashMap.prototype.take = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).take(num);
	
};

ImmutableHashMap.prototype.reverse = function () {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).reverse();
	
};

ImmutableHashMap.prototype.firstWhere0 = function (func) {
	return (this.map || nova_null).firstWhere0(func);
	
};

ImmutableHashMap.prototype.forEach0 = function (func) {
	return (this.map || nova_null).forEach0(func);
	
};

ImmutableHashMap.prototype.containsKey = function (key) {
	return (this.map || nova_null).containsKey(key);
	
};

ImmutableHashMap.prototype.toString = function () {
	var self = this;
	
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0((((this.map || nova_null).map0((p, _2, _3) => {
								return (((p || nova_null).key || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(": ").plus0(((p || nova_null).value || nova_null).toString()));
								
					}) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

ImmutableHashMap.prototype.get = function (key) {
	return (this.map || nova_null).get(key);
	
};

ImmutableHashMap.prototype.set = function (key, value) {
	
};

ImmutableHashMap.prototype.map1 = function (func) {
	return (this.map || nova_null).map0(func);
	
};

ImmutableHashMap.prototype.map2 = function (func) {
	return (this.map || nova_null).map0(func);
	
};

ImmutableHashMap.prototype.map3 = function (func) {
	return (this.map || nova_null).map0(func);
	
};

ImmutableHashMap.prototype.map4 = function (func) {
	return (this.map || nova_null).map0(func);
	
};

ImmutableHashMap.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/ImmutableHashMap"), false);
	
};

ImmutableHashMap.prototype.mutator__js_class = function () {
	
};

ImmutableHashMap.prototype.accessor_count = function () {
	return (this.map || nova_null).count;
	
};

ImmutableHashMap.prototype.mutator_count = function () {
	
};

ImmutableHashMap.prototype.accessor_iterator = function () {
	return this.iterator;
	
};

ImmutableHashMap.prototype.mutator_iterator = function (value) {
	this.iterator = value;
	return value;
	
};

ImmutableHashMap.prototype.accessor_first = function () {
	return this.first;
	
};

ImmutableHashMap.prototype.mutator_first = function (value) {
	this.first = value;
	return value;
	
};

ImmutableHashMap.prototype.accessor_last = function () {
	return this.last;
	
};

ImmutableHashMap.prototype.mutator_last = function (value) {
	this.last = value;
	return value;
	
};

ImmutableHashMap.prototype.super = function () {
	
};

novaConstructors.newImmutableHashMap0 = function (map) {
	var __value = new ImmutableHashMap()
	NovaObject.call(__value);
	ImmutableHashMap.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableHashMap.init0.call(__value, map);
	
};

novaConstructors.newImmutableHashMap1 = function (map, clone) {
	var __value = new ImmutableHashMap()
	NovaObject.call(__value);
	ImmutableHashMap.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableHashMap.init1.call(__value, map, clone);
	
};

var ImmutableHashMap1Long = function () {
	this.map = null;
	this.iterator = null;
	this.first = null;
	this.last = null;
	
	
};

ImmutableHashMap1Long.prototype = Object.create(NovaObject.prototype);
ImmutableHashMap1Long.prototype.constructor = ImmutableHashMap1Long;


ImmutableHashMap1Long.prototype.destroy = function () {
	
};

ImmutableHashMap1Long.init0 = function (map) {
	return ImmutableHashMap1Long.init1.call(this, map, true);
	return this;
	
};

ImmutableHashMap1Long.init1 = function (map, clone) {
	this.map = clone ? (map || nova_null).clone() : map;
	return this;
	
};

ImmutableHashMap1Long.prototype.toArray = function () {
	var self = this;
	
	return this.map0((_1, _2, _3) => {
			return _1;
			
	});
	return this.map0((_1, _2, _3) => {
			return _1;
			
	});
	
};

ImmutableHashMap1Long.prototype.contains0 = function (value) {
	return (this.map || nova_null).contains0(value);
	return (this.map || nova_null).contains0(value);
	
};

ImmutableHashMap1Long.prototype.any0 = function (func) {
	return (this.map || nova_null).any0(func);
	return (this.map || nova_null).any0(func);
	
};

ImmutableHashMap1Long.prototype.all0 = function (func, stopOnContradiction) {
	return (this.map || nova_null).all0(func, stopOnContradiction);
	return (this.map || nova_null).all0(func, stopOnContradiction);
	
};

ImmutableHashMap1Long.prototype.map0 = function (func) {
	return (this.map || nova_null).map0(func);
	
};

ImmutableHashMap1Long.prototype.filter0 = function (func) {
	return (this.map || nova_null).filter0(func);
	return (this.map || nova_null).filter0(func);
	
};

ImmutableHashMap1Long.prototype.join = function (delimiter) {
	return (this.map || nova_null).join(delimiter);
	return (this.map || nova_null).join(delimiter);
	
};

ImmutableHashMap1Long.prototype.skip = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).skip(num);
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).skip(num);
	
};

ImmutableHashMap1Long.prototype.take = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).take(num);
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).take(num);
	
};

ImmutableHashMap1Long.prototype.reverse = function () {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).reverse();
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).reverse();
	
};

ImmutableHashMap1Long.prototype.firstWhere0 = function (func) {
	return (this.map || nova_null).firstWhere0(func);
	return (this.map || nova_null).firstWhere0(func);
	
};

ImmutableHashMap1Long.prototype.forEach0 = function (func) {
	return (this.map || nova_null).forEach0(func);
	return (this.map || nova_null).forEach0(func);
	
};

ImmutableHashMap1Long.prototype.containsKey = function (key) {
	return (this.map || nova_null).containsKey(key);
	return (this.map || nova_null).containsKey(key);
	
};

ImmutableHashMap1Long.prototype.toString = function () {
	var self = this;
	
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0((((this.map || nova_null).map0((p, _2, _3) => {
								return NovaLong.toString((p || nova_null).key).plus0(novaConstructors.newString2(": ").plus0(((p || nova_null).value || nova_null).toString()));
								
					}) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0((((this.map || nova_null).map0((p, _2, _3) => {
								return NovaLong.toString((p || nova_null).key).plus0(novaConstructors.newString2(": ").plus0(((p || nova_null).value || nova_null).toString()));
								
					}) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

ImmutableHashMap1Long.prototype.get = function (key) {
	return (this.map || nova_null).get(key);
	
};

ImmutableHashMap1Long.prototype.set = function (key, value) {
	
};

ImmutableHashMap1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/ImmutableHashMap"), false);
	
};

ImmutableHashMap1Long.prototype.accessor_count = function () {
	return (this.map || nova_null).count;
	
};

ImmutableHashMap1Long.prototype.accessor_iterator = function () {
	return this.iterator;
	
};

ImmutableHashMap1Long.prototype.mutator_iterator = function (value) {
	this.iterator = value;
	return value;
	return value;
	
};

ImmutableHashMap1Long.prototype.accessor_first = function () {
	return this.first;
	
};

ImmutableHashMap1Long.prototype.mutator_first = function (value) {
	this.first = value;
	return value;
	return value;
	
};

ImmutableHashMap1Long.prototype.accessor_last = function () {
	return this.last;
	
};

ImmutableHashMap1Long.prototype.mutator_last = function (value) {
	this.last = value;
	return value;
	return value;
	
};

ImmutableHashMap1Long.prototype.super = function () {
	
};

novaConstructors.newImmutableHashMap1Long0 = function (map) {
	var __value = new ImmutableHashMap1Long()
	NovaObject.call(__value);
	ImmutableHashMap1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableHashMap1Long.init0.call(__value, map);
	
};

novaConstructors.newImmutableHashMap1Long1 = function (map, clone) {
	var __value = new ImmutableHashMap1Long()
	NovaObject.call(__value);
	ImmutableHashMap1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableHashMap1Long.init1.call(__value, map, clone);
	
};

var ImmutableHashMap1Int = function () {
	this.map = null;
	this.iterator = null;
	this.first = null;
	this.last = null;
	
	
};

ImmutableHashMap1Int.prototype = Object.create(NovaObject.prototype);
ImmutableHashMap1Int.prototype.constructor = ImmutableHashMap1Int;


ImmutableHashMap1Int.prototype.destroy = function () {
	
};

ImmutableHashMap1Int.init0 = function (map) {
	return ImmutableHashMap1Int.init1.call(this, map, true);
	return this;
	
};

ImmutableHashMap1Int.init1 = function (map, clone) {
	this.map = clone ? (map || nova_null).clone() : map;
	return this;
	
};

ImmutableHashMap1Int.prototype.toArray = function () {
	var self = this;
	
	return this.map0((_1, _2, _3) => {
			return _1;
			
	});
	
};

ImmutableHashMap1Int.prototype.contains0 = function (value) {
	return (this.map || nova_null).contains0(value);
	
};

ImmutableHashMap1Int.prototype.any0 = function (func) {
	return (this.map || nova_null).any0(func);
	
};

ImmutableHashMap1Int.prototype.all0 = function (func, stopOnContradiction) {
	return (this.map || nova_null).all0(func, stopOnContradiction);
	
};

ImmutableHashMap1Int.prototype.map0 = function (func) {
	return (this.map || nova_null).map0(func);
	
};

ImmutableHashMap1Int.prototype.filter0 = function (func) {
	return (this.map || nova_null).filter0(func);
	
};

ImmutableHashMap1Int.prototype.join = function (delimiter) {
	return (this.map || nova_null).join(delimiter);
	
};

ImmutableHashMap1Int.prototype.skip = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).skip(num);
	
};

ImmutableHashMap1Int.prototype.take = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).take(num);
	
};

ImmutableHashMap1Int.prototype.reverse = function () {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).reverse();
	
};

ImmutableHashMap1Int.prototype.firstWhere0 = function (func) {
	return (this.map || nova_null).firstWhere0(func);
	
};

ImmutableHashMap1Int.prototype.forEach0 = function (func) {
	return (this.map || nova_null).forEach0(func);
	
};

ImmutableHashMap1Int.prototype.containsKey = function (key) {
	return (this.map || nova_null).containsKey(key);
	
};

ImmutableHashMap1Int.prototype.toString = function () {
	var self = this;
	
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0((((this.map || nova_null).map0((p, _2, _3) => {
								return NovaInt.toString((p || nova_null).key).plus0(novaConstructors.newString2(": ").plus0(((p || nova_null).value || nova_null).toString()));
								
					}) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

ImmutableHashMap1Int.prototype.get = function (key) {
	return (this.map || nova_null).get(key);
	
};

ImmutableHashMap1Int.prototype.set = function (key, value) {
	
};

ImmutableHashMap1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/ImmutableHashMap"), false);
	
};

ImmutableHashMap1Int.prototype.accessor_count = function () {
	return (this.map || nova_null).count;
	
};

ImmutableHashMap1Int.prototype.accessor_iterator = function () {
	return this.iterator;
	
};

ImmutableHashMap1Int.prototype.mutator_iterator = function (value) {
	this.iterator = value;
	return value;
	return value;
	
};

ImmutableHashMap1Int.prototype.accessor_first = function () {
	return this.first;
	
};

ImmutableHashMap1Int.prototype.mutator_first = function (value) {
	this.first = value;
	return value;
	return value;
	
};

ImmutableHashMap1Int.prototype.accessor_last = function () {
	return this.last;
	
};

ImmutableHashMap1Int.prototype.mutator_last = function (value) {
	this.last = value;
	return value;
	return value;
	
};

ImmutableHashMap1Int.prototype.super = function () {
	
};

novaConstructors.newImmutableHashMap1Int0 = function (map) {
	var __value = new ImmutableHashMap1Int()
	NovaObject.call(__value);
	ImmutableHashMap1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableHashMap1Int.init0.call(__value, map);
	
};

novaConstructors.newImmutableHashMap1Int1 = function (map, clone) {
	var __value = new ImmutableHashMap1Int()
	NovaObject.call(__value);
	ImmutableHashMap1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableHashMap1Int.init1.call(__value, map, clone);
	
};

var ImmutableHashMap1Int2Int = function () {
	this.map = null;
	this.iterator = null;
	this.first = null;
	this.last = null;
	
	
};

ImmutableHashMap1Int2Int.prototype = Object.create(NovaObject.prototype);
ImmutableHashMap1Int2Int.prototype.constructor = ImmutableHashMap1Int2Int;


ImmutableHashMap1Int2Int.prototype.destroy = function () {
	
};

ImmutableHashMap1Int2Int.init0 = function (map) {
	return ImmutableHashMap1Int2Int.init1.call(this, map, true);
	return this;
	
};

ImmutableHashMap1Int2Int.init1 = function (map, clone) {
	this.map = clone ? (map || nova_null).clone() : map;
	return this;
	
};

ImmutableHashMap1Int2Int.prototype.toArray = function () {
	var self = this;
	
	return this.map0((_1, _2, _3) => {
			return _1;
			
	});
	
};

ImmutableHashMap1Int2Int.prototype.contains0 = function (value) {
	return (this.map || nova_null).contains0(value);
	
};

ImmutableHashMap1Int2Int.prototype.any0 = function (func) {
	return (this.map || nova_null).any0(func);
	
};

ImmutableHashMap1Int2Int.prototype.all0 = function (func, stopOnContradiction) {
	return (this.map || nova_null).all0(func, stopOnContradiction);
	
};

ImmutableHashMap1Int2Int.prototype.map0 = function (func) {
	return (this.map || nova_null).map0(func);
	
};

ImmutableHashMap1Int2Int.prototype.filter0 = function (func) {
	return (this.map || nova_null).filter0(func);
	
};

ImmutableHashMap1Int2Int.prototype.join = function (delimiter) {
	return (this.map || nova_null).join(delimiter);
	
};

ImmutableHashMap1Int2Int.prototype.skip = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).skip(num);
	
};

ImmutableHashMap1Int2Int.prototype.take = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).take(num);
	
};

ImmutableHashMap1Int2Int.prototype.reverse = function () {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).reverse();
	
};

ImmutableHashMap1Int2Int.prototype.firstWhere0 = function (func) {
	return (this.map || nova_null).firstWhere0(func);
	
};

ImmutableHashMap1Int2Int.prototype.forEach0 = function (func) {
	return (this.map || nova_null).forEach0(func);
	
};

ImmutableHashMap1Int2Int.prototype.containsKey = function (key) {
	return (this.map || nova_null).containsKey(key);
	
};

ImmutableHashMap1Int2Int.prototype.toString = function () {
	var self = this;
	
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0((((this.map || nova_null).map0((p, _2, _3) => {
								return NovaInt.toString((p || nova_null).key).plus0(novaConstructors.newString2(": ").plus0(NovaInt.toString((p || nova_null).value)));
								
					}) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

ImmutableHashMap1Int2Int.prototype.get = function (key) {
	return (this.map || nova_null).get(key);
	
};

ImmutableHashMap1Int2Int.prototype.set = function (key, value) {
	
};

ImmutableHashMap1Int2Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/ImmutableHashMap"), false);
	
};

ImmutableHashMap1Int2Int.prototype.accessor_count = function () {
	return (this.map || nova_null).count;
	
};

ImmutableHashMap1Int2Int.prototype.accessor_iterator = function () {
	return this.iterator;
	
};

ImmutableHashMap1Int2Int.prototype.mutator_iterator = function (value) {
	this.iterator = value;
	return value;
	return value;
	
};

ImmutableHashMap1Int2Int.prototype.accessor_first = function () {
	return this.first;
	
};

ImmutableHashMap1Int2Int.prototype.mutator_first = function (value) {
	this.first = value;
	return value;
	return value;
	
};

ImmutableHashMap1Int2Int.prototype.accessor_last = function () {
	return this.last;
	
};

ImmutableHashMap1Int2Int.prototype.mutator_last = function (value) {
	this.last = value;
	return value;
	return value;
	
};

ImmutableHashMap1Int2Int.prototype.super = function () {
	
};

novaConstructors.newImmutableHashMap1Int2Int0 = function (map) {
	var __value = new ImmutableHashMap1Int2Int()
	NovaObject.call(__value);
	ImmutableHashMap1Int2Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableHashMap1Int2Int.init0.call(__value, map);
	
};

novaConstructors.newImmutableHashMap1Int2Int1 = function (map, clone) {
	var __value = new ImmutableHashMap1Int2Int()
	NovaObject.call(__value);
	ImmutableHashMap1Int2Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableHashMap1Int2Int.init1.call(__value, map, clone);
	
};

var ImmutableHashMap1Long2Int = function () {
	this.map = null;
	this.iterator = null;
	this.first = null;
	this.last = null;
	
	
};

ImmutableHashMap1Long2Int.prototype = Object.create(NovaObject.prototype);
ImmutableHashMap1Long2Int.prototype.constructor = ImmutableHashMap1Long2Int;


ImmutableHashMap1Long2Int.prototype.destroy = function () {
	
};

ImmutableHashMap1Long2Int.init0 = function (map) {
	return ImmutableHashMap1Long2Int.init1.call(this, map, true);
	return this;
	
};

ImmutableHashMap1Long2Int.init1 = function (map, clone) {
	this.map = clone ? (map || nova_null).clone() : map;
	return this;
	
};

ImmutableHashMap1Long2Int.prototype.toArray = function () {
	var self = this;
	
	return this.map0((_1, _2, _3) => {
			return _1;
			
	});
	
};

ImmutableHashMap1Long2Int.prototype.contains0 = function (value) {
	return (this.map || nova_null).contains0(value);
	
};

ImmutableHashMap1Long2Int.prototype.any0 = function (func) {
	return (this.map || nova_null).any0(func);
	
};

ImmutableHashMap1Long2Int.prototype.all0 = function (func, stopOnContradiction) {
	return (this.map || nova_null).all0(func, stopOnContradiction);
	
};

ImmutableHashMap1Long2Int.prototype.map0 = function (func) {
	return (this.map || nova_null).map0(func);
	
};

ImmutableHashMap1Long2Int.prototype.filter0 = function (func) {
	return (this.map || nova_null).filter0(func);
	
};

ImmutableHashMap1Long2Int.prototype.join = function (delimiter) {
	return (this.map || nova_null).join(delimiter);
	
};

ImmutableHashMap1Long2Int.prototype.skip = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).skip(num);
	
};

ImmutableHashMap1Long2Int.prototype.take = function (num) {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).take(num);
	
};

ImmutableHashMap1Long2Int.prototype.reverse = function () {
	var self = this;
	
	return (this.map0((_1, _2, _3) => {
				return _1;
				
	}) || nova_null).reverse();
	
};

ImmutableHashMap1Long2Int.prototype.firstWhere0 = function (func) {
	return (this.map || nova_null).firstWhere0(func);
	
};

ImmutableHashMap1Long2Int.prototype.forEach0 = function (func) {
	return (this.map || nova_null).forEach0(func);
	
};

ImmutableHashMap1Long2Int.prototype.containsKey = function (key) {
	return (this.map || nova_null).containsKey(key);
	
};

ImmutableHashMap1Long2Int.prototype.toString = function () {
	var self = this;
	
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0((((this.map || nova_null).map0((p, _2, _3) => {
								return NovaLong.toString((p || nova_null).key).plus0(novaConstructors.newString2(": ").plus0(NovaInt.toString((p || nova_null).value)));
								
					}) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

ImmutableHashMap1Long2Int.prototype.get = function (key) {
	return (this.map || nova_null).get(key);
	
};

ImmutableHashMap1Long2Int.prototype.set = function (key, value) {
	
};

ImmutableHashMap1Long2Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/ImmutableHashMap"), false);
	
};

ImmutableHashMap1Long2Int.prototype.accessor_count = function () {
	return (this.map || nova_null).count;
	
};

ImmutableHashMap1Long2Int.prototype.accessor_iterator = function () {
	return this.iterator;
	
};

ImmutableHashMap1Long2Int.prototype.mutator_iterator = function (value) {
	this.iterator = value;
	return value;
	return value;
	
};

ImmutableHashMap1Long2Int.prototype.accessor_first = function () {
	return this.first;
	
};

ImmutableHashMap1Long2Int.prototype.mutator_first = function (value) {
	this.first = value;
	return value;
	return value;
	
};

ImmutableHashMap1Long2Int.prototype.accessor_last = function () {
	return this.last;
	
};

ImmutableHashMap1Long2Int.prototype.mutator_last = function (value) {
	this.last = value;
	return value;
	return value;
	
};

ImmutableHashMap1Long2Int.prototype.super = function () {
	
};

novaConstructors.newImmutableHashMap1Long2Int0 = function (map) {
	var __value = new ImmutableHashMap1Long2Int()
	NovaObject.call(__value);
	ImmutableHashMap1Long2Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableHashMap1Long2Int.init0.call(__value, map);
	
};

novaConstructors.newImmutableHashMap1Long2Int1 = function (map, clone) {
	var __value = new ImmutableHashMap1Long2Int()
	NovaObject.call(__value);
	ImmutableHashMap1Long2Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableHashMap1Long2Int.init1.call(__value, map, clone);
	
};

var Pair = function () {
	this.key = null;
	this.value = null;
	
	
};

Pair.prototype = Object.create(NovaObject.prototype);
Pair.prototype.constructor = Pair;


Pair.prototype.destroy = function () {
	
};

Pair.init = function (key, value) {
	this.key = key;
	this.value = value;
	return this;
	
};

Pair.prototype.toString = function () {
	return novaConstructors.newString2("Pair (").plus0((((this.key) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(", ").plus0((((this.value) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(")")))));
	
};

Pair.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/Pair"), false);
	
};

Pair.prototype.mutator__js_class = function () {
	
};

Pair.prototype.super = function () {
	
};

novaConstructors.newPair = function (key, value) {
	var __value = new Pair()
	NovaObject.call(__value);
	Pair.prototype.super.apply(__value, [].slice.call(arguments));
	return Pair.init.call(__value, key, value);
	
};

var Pair1Int2Int = function () {
	this.key = 0;
	this.value = 0;
	
	
};

Pair1Int2Int.prototype = Object.create(NovaObject.prototype);
Pair1Int2Int.prototype.constructor = Pair1Int2Int;


Pair1Int2Int.prototype.destroy = function () {
	
};

Pair1Int2Int.init = function (key, value) {
	this.key = key;
	this.value = value;
	return this;
	
};

Pair1Int2Int.prototype.toString = function () {
	return novaConstructors.newString2("Pair (").plus0((((NovaInt.toString(this.key).plus0(novaConstructors.newString2(", ").plus0((((NovaInt.toString(this.value).plus0(novaConstructors.newString2(")"))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(")"))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(", ").plus0((((NovaInt.toString(this.value).plus0(novaConstructors.newString2(")"))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(")")))));
};

Pair1Int2Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/Pair"), false);
	
};

Pair1Int2Int.prototype.super = function () {
	
};

novaConstructors.newPair1Int2Int = function (key, value) {
	var __value = new Pair1Int2Int()
	NovaObject.call(__value);
	Pair1Int2Int.prototype.super.apply(__value, [].slice.call(arguments));
	return Pair1Int2Int.init.call(__value, key, value);
	
};

var Pair1Long = function () {
	this.key = 0;
	this.value = null;
	
	
};

Pair1Long.prototype = Object.create(NovaObject.prototype);
Pair1Long.prototype.constructor = Pair1Long;


Pair1Long.prototype.destroy = function () {
	
};

Pair1Long.init = function (key, value) {
	this.key = key;
	this.value = value;
	return this;
	
};

Pair1Long.prototype.toString = function () {
	return novaConstructors.newString2("Pair (").plus0((((NovaLong.toString(this.key).plus0(novaConstructors.newString2(", ").plus0((((this.value) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(")"))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(", ").plus0((((this.value) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(")")))));
};

Pair1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/Pair"), false);
	
};

Pair1Long.prototype.super = function () {
	
};

novaConstructors.newPair1Long = function (key, value) {
	var __value = new Pair1Long()
	NovaObject.call(__value);
	Pair1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return Pair1Long.init.call(__value, key, value);
	
};

var Pair1Int = function () {
	this.key = 0;
	this.value = null;
	
	
};

Pair1Int.prototype = Object.create(NovaObject.prototype);
Pair1Int.prototype.constructor = Pair1Int;


Pair1Int.prototype.destroy = function () {
	
};

Pair1Int.init = function (key, value) {
	this.key = key;
	this.value = value;
	return this;
	
};

Pair1Int.prototype.toString = function () {
	return novaConstructors.newString2("Pair (").plus0((((NovaInt.toString(this.key).plus0(novaConstructors.newString2(", ").plus0((((this.value) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(")"))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(", ").plus0((((this.value) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(")")))));
};

Pair1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/Pair"), false);
	
};

Pair1Int.prototype.super = function () {
	
};

novaConstructors.newPair1Int = function (key, value) {
	var __value = new Pair1Int()
	NovaObject.call(__value);
	Pair1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return Pair1Int.init.call(__value, key, value);
	
};

var Pair1Long2Int = function () {
	this.key = 0;
	this.value = 0;
	
	
};

Pair1Long2Int.prototype = Object.create(NovaObject.prototype);
Pair1Long2Int.prototype.constructor = Pair1Long2Int;


Pair1Long2Int.prototype.destroy = function () {
	
};

Pair1Long2Int.init = function (key, value) {
	this.key = key;
	this.value = value;
	return this;
	
};

Pair1Long2Int.prototype.toString = function () {
	return novaConstructors.newString2("Pair (").plus0((((NovaLong.toString(this.key).plus0(novaConstructors.newString2(", ").plus0((((NovaInt.toString(this.value).plus0(novaConstructors.newString2(")"))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(")"))))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(", ").plus0((((NovaInt.toString(this.value).plus0(novaConstructors.newString2(")"))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(")")))));
};

Pair1Long2Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/Pair"), false);
	
};

Pair1Long2Int.prototype.super = function () {
	
};

novaConstructors.newPair1Long2Int = function (key, value) {
	var __value = new Pair1Long2Int()
	NovaObject.call(__value);
	Pair1Long2Int.prototype.super.apply(__value, [].slice.call(arguments));
	return Pair1Long2Int.init.call(__value, key, value);
	
};

var ReversibleHashMap = function () {
	this.rev = null;
	
	
};

ReversibleHashMap.prototype = Object.create(HashMap.prototype);
ReversibleHashMap.prototype.constructor = ReversibleHashMap;


ReversibleHashMap.prototype.destroy = function () {
	
};

ReversibleHashMap.init = function () {
	this.rev = novaConstructors.newHashMap0();
	return this;
	
};

ReversibleHashMap.prototype.add = function (key, value) {
	return value;
	
};

ReversibleHashMap.prototype.getKey = function (value) {
	return (this.rev || nova_null).get(value);
	
};

ReversibleHashMap.prototype.getValue = function (key) {
	return this.get(key);
	
};

ReversibleHashMap.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/ReversibleHashMap"), false);
	
};

ReversibleHashMap.prototype.mutator__js_class = function () {
	
};

ReversibleHashMap.prototype.super = function () {
	
};

novaConstructors.newReversibleHashMap = function () {
	var __value = new ReversibleHashMap()
	HashMap.call(__value);
	ReversibleHashMap.prototype.super.apply(__value, [].slice.call(arguments));
	return ReversibleHashMap.init.call(__value);
	
};

var Tuple = function () {
	this.items = null;
	this.first = null;
	this._js_class = null;
	this.count = 0;
	
	
};

Tuple.prototype = Object.create(NovaObject.prototype);
Tuple.prototype.constructor = Tuple;


Tuple.prototype.destroy = function () {
	
};

Tuple.init = function (items) {
	this.items = items;
	return this;
	
};

Tuple.prototype.contains0 = function (value) {
	return (this.items || nova_null).contains0(value);
	
};

Tuple.prototype.toArray = function () {
	return (this.items || nova_null).toArray();
	
};

Tuple.prototype.forEach0 = function (func) {
	return (this.items || nova_null).forEach0(func);
	
};

Tuple.prototype.any0 = function (anyFunc) {
	return (this.items || nova_null).any0(anyFunc);
	
};

Tuple.prototype.all0 = function (allFunc, stopOnContradiction) {
	return (this.items || nova_null).all0(allFunc, stopOnContradiction);
	
};

Tuple.prototype.filter0 = function (filterFunc) {
	return (this.items || nova_null).filter0(filterFunc);
	
};

Tuple.prototype.take = function (howMany) {
	return (this.items || nova_null).take(howMany);
	
};

Tuple.prototype.skip = function (howMany) {
	return (this.items || nova_null).skip(howMany);
	
};

Tuple.prototype.firstWhere0 = function (func) {
	return (this.items || nova_null).firstWhere0(func);
	
};

Tuple.prototype.reverse = function () {
	return novaConstructors.newTuple((this.items || nova_null).reverse());
	
};

Tuple.prototype.map0 = function (mapFunc) {
	return (this.items || nova_null).map0(mapFunc);
	
};

Tuple.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/Tuple"), false);
	
};

Tuple.prototype.mutator__js_class = function () {
	
};

Tuple.prototype.accessor_iterator = function () {
	return novaConstructors.newArrayIterator(this.items);
	
};

Tuple.prototype.mutator_iterator = function () {
	
};

Tuple.prototype.accessor_first = function () {
	return (this.items || nova_null).accessor_first();
	
};

Tuple.prototype.mutator_first = function (value) {
	(this.items || nova_null).mutator_first(value);
	return value;
	
};

Tuple.prototype.accessor_last = function () {
	return (this.items || nova_null).accessor_last();
	
};

Tuple.prototype.mutator_last = function (value) {
	(this.items || nova_null).mutator_last(value);
	return value;
	
};

Tuple.prototype.accessor_count = function () {
	return this.count;
	
};

Tuple.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	
};

Tuple.prototype.super = function () {
	
};

novaConstructors.newTuple = function (items) {
	var __value = new Tuple()
	NovaObject.call(__value);
	Tuple.prototype.super.apply(__value, [].slice.call(arguments));
	return Tuple.init.call(__value, items);
	
};

var Tuple2 = function () {
	this.item2 = null;
	
	
};

Tuple2.prototype = Object.create(Tuple.prototype);
Tuple2.prototype.constructor = Tuple2;


Tuple2.prototype.destroy = function () {
	
};

Tuple2.init = function (item1, item2) {
	return Tuple.init.call(this, Tuple2.generated1(item1, item2));
	return this;
	
};

Tuple2.generated1 = function (value0, value1) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	return novaConstructors.newArray1(temp, 2);
	
};

Tuple2.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/Tuple2"), false);
	
};

Tuple2.prototype.mutator__js_class = function () {
	
};

Tuple2.prototype.accessor_item1 = function () {
	return (this.items || nova_null).get(0);
	
};

Tuple2.prototype.mutator_item1 = function (value) {
	(this.items || nova_null).set0(0, value);
	return value;
	
};

Tuple2.prototype.accessor_item2 = function () {
	return (this.items || nova_null).get(1);
	
};

Tuple2.prototype.mutator_item2 = function (value) {
	(this.items || nova_null).set0(1, value);
	return value;
	
};

Tuple2.prototype.super = function () {
	
};

novaConstructors.newTuple2 = function (item1, item2) {
	var __value = new Tuple2()
	Tuple.call(__value);
	Tuple2.prototype.super.apply(__value, [].slice.call(arguments));
	return Tuple2.init.call(__value, item1, item2);
	
};

var Tuple22Int = function () {
	this.item2 = 0;
	
	
};

Tuple22Int.prototype = Object.create(Tuple.prototype);
Tuple22Int.prototype.constructor = Tuple22Int;


Tuple22Int.prototype.destroy = function () {
	
};

Tuple22Int.init = function (item1, item2) {
	return Tuple.init.call(this, this.generated58(item1, item2));
	return this;
	
};

Tuple22Int.prototype.generated58 = function (value0, value1) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = novaConstructors.newInt(value1);
	return novaConstructors.newArray1(temp, 2);
	
};

Tuple22Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/Tuple2"), false);
	
};

Tuple22Int.prototype.accessor_item1 = function () {
	return (this.items || nova_null).get(0);
	
};

Tuple22Int.prototype.mutator_item1 = function (value) {
	(this.items || nova_null).set0(0, value);
	return value;
	return value;
	
};

Tuple22Int.prototype.accessor_item2 = function () {
	return (((this.items || nova_null).get(1)) || nova_null).value;
	
};

Tuple22Int.prototype.mutator_item2 = function (value) {
	(this.items || nova_null).set1(1, value);
	return value;
	return value;
	
};

Tuple22Int.prototype.super = function () {
	
};

novaConstructors.newTuple22Int = function (item1, item2) {
	var __value = new Tuple22Int()
	Tuple.call(__value);
	Tuple22Int.prototype.super.apply(__value, [].slice.call(arguments));
	return Tuple22Int.init.call(__value, item1, item2);
	
};

var PlusEqualsOperator = function () {
	
	
};

PlusEqualsOperator.prototype.constructor = PlusEqualsOperator;


PlusEqualsOperator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/operators/PlusEqualsOperator"), false);
	
};

PlusEqualsOperator.prototype.mutator__js_class = function () {
	
};

var OrderedList = function () {
	
	
};

OrderedList.prototype.constructor = OrderedList;


OrderedList.prototype.findIndex = function (condition, defaultReturnValue) {
	var i;
	var list;
	var nova_local_0;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = 0;
	list = this;
	nova_local_0 = ((list) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (condition(element, i++, this)) {
			return i;
		}
	}
	return defaultReturnValue;
	
};

OrderedList.prototype.indexOf = function (element, defaultReturnValue) {
	var i;
	var nova_local_0;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		e = (nova_local_0 || nova_null).accessor_next();
		if (element === e) {
			return i;
		}
		i++;
	}
	return defaultReturnValue;
	
};

OrderedList.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/OrderedList"), false);
	
};

OrderedList.prototype.mutator__js_class = function () {
	
};

var NovaArray = function () {
	this.capacity = 0;
	this.count = 0;
	this.position = 0;
	this.data = null;
	this.iterator = null;
	this.last = null;
	
	
};

NovaArray.prototype = Object.create(NovaObject.prototype);
NovaArray.prototype.constructor = NovaArray;


NovaArray.prototype.destroy = function () {
	
};

NovaArray.init = function () {
	return NovaArray.init0.call(this, 0);
	this.increaseSize1(10);
	return this;
	
};

NovaArray.init0 = function (count, initialCapacity) {
	initialCapacity = typeof initialCapacity === 'undefined' ? count : initialCapacity;
	this.position = 0;
	this.capacity = 0;
	this.increaseSize1(initialCapacity);
	this.mutator_count(count);
	this.data = [];
	return this;
	
};

NovaArray.init1 = function (data, count) {
	this.data = data;
	this.mutator_count(count);
	this.capacity = count;
	this.position = count;
	return this;
	
};

NovaArray.prototype.fillRemaining = function (value) {
	while (this.accessor_count() < this.capacity) {
		this.add0(value);
	}
	return this;
	
};

NovaArray.prototype.plus0 = function (other) {
	return (this.clone() || nova_null).plusEquals0(other);
	
};

NovaArray.prototype.plusEquals0 = function (other) {
	return this.addAll(other);
	
};

NovaArray.prototype.addAll = function (data) {
	var nova_local_0;
	nova_local_0 = ((data) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		d = (nova_local_0 || nova_null).accessor_next();
		this.add0(d);
	}
	return this;
	
};

NovaArray.prototype.addUnique = function (element) {
	if (!this.contains0(element)) {
		this.add0(element);
	}
	return this;
	
};

NovaArray.prototype.add0 = function (element) {
	if (this.position >= this.capacity) {
		this.increaseSize0();
	}
	this.data[this.position++] = element;
	this.mutator_count(NovaMath.max1(this.position, this.accessor_count()));
	return this;
	
};

NovaArray.prototype.add1 = function (index, element) {
	if (index >= this.capacity) {
		this.increaseSize1(index + 1);
	}
	this.add0(null);
	this.shiftRight(index, this.position);
	this.data[index] = element;
	if (index >= this.position - 1) {
		this.position = index + 1;
	}
	this.mutator_count(NovaMath.max1(this.position, this.accessor_count()));
	return this;
	
};

NovaArray.prototype.remove0 = function (index) {
	var element;
	element = this.data[index];
	this.shiftLeft(index + 1, this.position--);
	this.mutator_count(this.accessor_count() - 1);
	return element;
	
};

NovaArray.prototype.remove1 = function (element) {
	var index;
	index = this.indexOf(element);
	if (index >= 0) {
		this.shiftLeft(index + 1, this.position--);
		this.mutator_count(this.accessor_count() - 1);
		return element;
	}
	return null;
	
};

NovaArray.prototype.replace = function (element, other) {
	var index;
	index = this.indexOf(element);
	if (index >= 0) {
		this.set0(index, other);
		return other;
	}
	return null;
	
};

NovaArray.prototype.shiftRight = function (left, right) {
	var i;
	i = right - 1;
	while (i > left) {
		this.data[i] = this.data[i - 1];
		i--;
	}
	this.data[left] = null;
	return this;
	
};

NovaArray.prototype.shiftLeft = function (left, right) {
	var i;
	i = left;
	for (; i < right; i++) {
		this.data[i - 1] = this.data[i];
	}
	this.data[right - 1] = null;
	return this;
	
};

NovaArray.prototype.swap = function (index1, index2) {
	var temp;
	temp = this.data[index1];
	this.data[index1] = this.data[index2];
	this.data[index2] = temp;
	return this;
	
};

NovaArray.prototype.increaseSize0 = function () {
	this.increaseSize1(this.capacity + 3);
	return this;
	
};

NovaArray.prototype.increaseSize1 = function (count) {
	this.capacity = count;
	return this;
	
};

NovaArray.prototype.cloneData = function () {
	var d;
	d = [];
	return d;
	
};

NovaArray.prototype.clone = function () {
	return novaConstructors.newArray1(this.cloneData(), this.accessor_count());
	
};

NovaArray.prototype.toArray = function () {
	return this.clone();
	
};

NovaArray.prototype.map0 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

NovaArray.prototype.forEach0 = function (func) {
	var i;
	i = 0;
	for (; i < this.accessor_count(); i++) {
		func(this.data[i], i, this);
	}
	return this;
	
};

NovaArray.prototype.filter0 = function (filterFunc) {
	var filtered;
	var i;
	var nova_local_0;
	filtered = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(element, i++, this)) {
			(filtered || nova_null).add0(element);
		}
	}
	return filtered;
	
};

NovaArray.prototype.take = function (howMany) {
	var list;
	howMany = howMany > this.accessor_count() ? this.accessor_count() : howMany;
	list = novaConstructors.newArray();
	var i;
	i = 0;
	for (; i < howMany; i++) {
		(list || nova_null).add0(this.data[i]);
	}
	return list;
	
};

NovaArray.prototype.skip = function (howMany) {
	var list;
	list = novaConstructors.newArray();
	var i;
	i = howMany;
	for (; i < this.accessor_count(); i++) {
		(list || nova_null).add0(this.data[i]);
	}
	return list;
	
};

NovaArray.prototype.sumSize = function () {
	var sum;
	var nova_local_0;
	sum = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		sum += ((value) || nova_null).count;
	}
	return sum;
	
};

NovaArray.prototype.reverse = function () {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).data[this.count - ++i] = element;
	}
	return array;
	
};

NovaArray.prototype.mergeSort0 = function (comparator) {
	var sorted;
	sorted = this.clone();
	if (this.accessor_count() > 1) {
		var mid;
		var lefthalf;
		var righthalf;
		var l;
		var r;
		var i;
		mid = ~~(this.accessor_count() / 2);
		lefthalf = (this.take(mid) || nova_null).mergeSort0(comparator);
		righthalf = (this.skip(mid) || nova_null).mergeSort0(comparator);
		l = 0;
		r = 0;
		i = 0;
		while (l < (lefthalf || nova_null).accessor_count() && r < (righthalf || nova_null).accessor_count()) {
			if (comparator((lefthalf || nova_null).get(l), (righthalf || nova_null).get(r)) < 1) {
				(sorted || nova_null).set0(i++, (lefthalf || nova_null).get(l++));
			} else {
				(sorted || nova_null).set0(i++, (righthalf || nova_null).get(r++));
			}
		}
		while (l < (lefthalf || nova_null).accessor_count()) {
			(sorted || nova_null).set0(i++, (lefthalf || nova_null).get(l++));
		}
		while (r < (righthalf || nova_null).accessor_count()) {
			(sorted || nova_null).set0(i++, (righthalf || nova_null).get(r++));
		}
	}
	return sorted;
	
};

NovaArray.prototype.quickSort0 = function (comparator) {
	return NovaArray.quickSortHelper(this.clone(), 0, this.accessor_count() - 1, comparator);
	
};

NovaArray.quickSortHelper = function (list, first, last, comparator) {
	if (first < last) {
		var mid;
		mid = NovaArray.partition(list, first, last, comparator);
		NovaArray.quickSortHelper(list, first, mid - 1, comparator);
		NovaArray.quickSortHelper(list, mid + 1, last, comparator);
	}
	return list;
	
};

NovaArray.partition = function (list, first, last, comparator) {
	var pivot;
	var l;
	var r;
	pivot = (list || nova_null).get(first);
	l = first + 1;
	r = last;
	while (l <= r) {
		while (l <= r && comparator((list || nova_null).get(l), pivot) <= 0) {
			l++;
		}
		while (l <= r && comparator((list || nova_null).get(r), pivot) >= 0) {
			r--;
		}
		if (l <= r) {
			(list || nova_null).swap(l, r);
		}
	}
	(list || nova_null).swap(first, r);
	return r;
	
};

NovaArray.prototype.mergeSort1 = function () {
	var self = this;
	
	return this.mergeSort0((_1, _2) => {
			return ((_1) || nova_null).compareTo0(_2);
			
	});
	
};

NovaArray.prototype.quickSort1 = function () {
	var self = this;
	
	return this.quickSort0((_1, _2) => {
			return ((_1) || nova_null).compareTo0(_2);
			
	});
	
};

NovaArray.prototype.sort0 = function () {
	return this.mergeSort1();
	
};

NovaArray.prototype.sort1 = function (comparator) {
	return this.mergeSort0(comparator);
	
};

NovaArray.prototype.toImmutable = function () {
	return novaConstructors.newImmutableArray0(this);
	
};

NovaArray.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).accessor_name() || nova_null).plus0(novaConstructors.newString2(" [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]"))));
	
};

NovaArray.prototype.get = function (index) {
	return this.data[index];
	
};

NovaArray.prototype.set0 = function (index, value) {
	this.data[index] = value;
	return value;
	
};

NovaArray.prototype.set1 = function (index, value) {
	this.data[index] = novaConstructors.newInt(value);
	return novaConstructors.newInt(value);
	return novaConstructors.newInt(value);
	
};

NovaArray.prototype.mutator_first = function (value) {
	if (this.accessor_count() > 0) {
		this.set0(0, value);
	} else {
		this.add0(value);
	}
	return value;
	
};

NovaArray.prototype.mutator_last = function (value) {
	if (this.accessor_count() > 0) {
		this.set0(this.accessor_count() - 1, value);
	} else {
		this.add0(value);
	}
	return value;
	
};

NovaArray.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Array"), false);
	
};

NovaArray.prototype.mutator__js_class = function () {
	
};

NovaArray.prototype.accessor_count = function () {
	return this.count;
	
};

NovaArray.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	
};

NovaArray.prototype.accessor_empty = function () {
	return this.accessor_count() <= 0;
	
};

NovaArray.prototype.mutator_empty = function () {
	
};

NovaArray.prototype.accessor_iterator = function () {
	return novaConstructors.newArrayIterator(this);
	
};

NovaArray.prototype.mutator_iterator = function () {
	
};

NovaArray.prototype.accessor_first = function () {
	return this.accessor_count() > 0 ? this.get(0) : null;
	
};

NovaArray.prototype.accessor_last = function () {
	return this.accessor_count() > 0 ? this.get(this.accessor_count() - 1) : null;
	
};

NovaArray.prototype.super = function () {
	
};

novaConstructors.newArray = function () {
	var __value = new NovaArray()
	NovaObject.call(__value);
	NovaArray.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaArray.init.call(__value);
	
};

novaConstructors.newArray0 = function (count, initialCapacity) {
	var __value = new NovaArray()
	NovaObject.call(__value);
	NovaArray.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaArray.init0.call(__value, count, initialCapacity);
	
};

novaConstructors.newArray1 = function (data, count) {
	var __value = new NovaArray()
	NovaObject.call(__value);
	NovaArray.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaArray.init1.call(__value, data, count);
	
};

var OrderedList1Double = function () {
	
	
};

OrderedList1Double.prototype.constructor = OrderedList1Double;


OrderedList1Double.prototype.findIndex = function (condition, defaultReturnValue) {
	var i;
	var list;
	var nova_local_0;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = 0;
	list = this;
	nova_local_0 = ((list) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (condition(element, i++, this)) {
			return i;
		}
	}
	return defaultReturnValue;
	
};

OrderedList1Double.prototype.indexOf = function (element, defaultReturnValue) {
	var i;
	var nova_local_0;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		e = (nova_local_0 || nova_null).accessor_next();
		if (element === e) {
			return i;
		}
		i++;
	}
	return defaultReturnValue;
	
};

OrderedList1Double.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/OrderedList"), false);
	
};

var List1Double = function () {
	this.iterator = null;
	this.last = 0;
	
	
};

List1Double.prototype.constructor = List1Double;


List1Double.prototype.toArray = function () {
	var array;
	var nova_local_0;
	array = novaConstructors.newArray1Double();
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(value);
	}
	return array;
	
};

List1Double.prototype.contains = function (value) {
	var self = this;
	
	return this.any((_1, _2, _3) => {
			return _1 === value;
			
	});
	
};

List1Double.prototype.containsAny = function (values) {
	var self = this;
	
	return this.any((_1, _2, _3) => {
			return (values || nova_null).contains(_1);
			
	});
	
};

List1Double.prototype.forEach1 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		func(value, i++, this);
	}
	return this;
	
};

List1Double.prototype.map4 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

List1Double.prototype.any = function (anyFunc) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (anyFunc(element, i++, this)) {
			return true;
		}
	}
	return false;
	
};

List1Double.prototype.all = function (allFunc, stopOnContradiction) {
	var i;
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	i = 0;
	contradiction = false;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (!allFunc(element, i++, this)) {
			if (stopOnContradiction) {
				return false;
			}
			contradiction = true;
		}
	}
	return !contradiction;
	
};

List1Double.prototype.filter1 = function (filterFunc) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Double();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(value, i++, this)) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Double.prototype.filterNot = function (filterFunc) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Double();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (!filterFunc(value, i++, this)) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Double.prototype.filterNull = function () {
	var self = this;
	
	return this.filter1((_1, _2, _3) => {
			return true;
			
	});
	
};

List1Double.prototype.take = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Double();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= howMany) {
			return list;
		}
		(list || nova_null).add0(value);
	}
	return list;
	
};

List1Double.prototype.takeLast = function (howMany) {
	var list;
	var startIndex;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Double();
	startIndex = NovaMath.max1(0, this.accessor_count() - howMany);
	if (startIndex === this.accessor_count()) {
		return list;
	}
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= startIndex) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Double.prototype.skipLast = function (howMany) {
	return this.take(this.accessor_count() - howMany);
	
};

List1Double.prototype.skip = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Double();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= howMany) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Double.prototype.firstOr = function (_js_default, func) {
	var nova_local_0;
	func = typeof func === 'undefined' ? (_1) => {
		return true;
		
	} : func;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return _js_default;
	
};

List1Double.prototype.firstOrThrow = function (e, func) {
	var nova_local_0;
	func = typeof func === 'undefined' ? (_1) => {
		return true;
		
	} : func;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	throw e;
	
};

List1Double.prototype.firstWhere = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return 0;
	
};

List1Double.prototype.firstNonNull = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var value;
		element = (nova_local_0 || nova_null).accessor_next();
		value = func(element);
		if ((value) != null) {
			return value;
		}
	}
	return null;
	
};

List1Double.prototype.zip = function (other, zipper) {
	var i1;
	var i2;
	var array;
	i1 = this.accessor_iterator();
	i2 = (other || nova_null).accessor_iterator();
	array = novaConstructors.newArray();
	while ((i1 || nova_null).accessor_hasNext() && (i2 || nova_null).accessor_hasNext()) {
		(array || nova_null).add0(zipper((i1 || nova_null).accessor_next(), (i2 || nova_null).accessor_next()));
	}
	return array;
	
};

List1Double.prototype.sum = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

List1Double.prototype.sum2 = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

List1Double.prototype.min = function (func) {
	var min;
	var i;
	var nova_local_0;
	min = NovaLong.MAX_VALUE;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		min = NovaMath.min0(min, func(element, i++, this));
	}
	return min;
	
};

List1Double.prototype.max = function (func) {
	var max;
	var i;
	var nova_local_0;
	max = NovaLong.MAX_VALUE;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		max = NovaMath.max0(max, func(element, i++, this));
	}
	return max;
	
};

List1Double.prototype.reduce = function (func, initialValue) {
	var value;
	var i;
	var nova_local_0;
	value = initialValue;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		value = func(value, element, i++, this);
	}
	return value;
	
};

List1Double.prototype.join = function (delimiter) {
	var self = this;
	
	delimiter = typeof delimiter === 'undefined' ? novaConstructors.newString2("") : delimiter;
	return this.reduce((str, e, i, _4) => {
			return (str || nova_null).plus0(((i > 0 ? delimiter : novaConstructors.newString2("")) || nova_null).plus0(NovaDouble.toString(e)));
			
		}, novaConstructors.newString2(""));
	
};

List1Double.prototype.stitch = function (delimiter) {
	var self = this;
	
	delimiter = typeof delimiter === 'undefined' ? novaConstructors.newString2("") : delimiter;
	return this.reduce((str, e, _3, _4) => {
			return (str || nova_null).plus0((delimiter || nova_null).plus0(NovaDouble.toString(e)));
			
		}, novaConstructors.newString2(""));
	
};

List1Double.prototype.toEnglish = function (conjunction, oxford) {
	oxford = typeof oxford === 'undefined' ? true : oxford;
	return this.accessor_count() > 1 ? ((this.take(this.accessor_count() - 1) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(((oxford && this.accessor_count() > 2 ? novaConstructors.newString2(", ") : novaConstructors.newString2(" ")) || nova_null).plus0((((conjunction) || nova_null).plus0(novaConstructors.newString2(" ")) || nova_null).plus0(NovaDouble.toString((this.skip(this.accessor_count() - 1) || nova_null).accessor_first())))) : (((NovaDouble.toString(this.accessor_first()).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""));
	
};

List1Double.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0((this.join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

List1Double.prototype.accessor_count = function () {
	return 0;
	
};

List1Double.prototype.mutator_count = function (value) {
	return value;
	return value;
	
};

List1Double.prototype.accessor_iterator = function () {
	return null;
	
};

List1Double.prototype.mutator_iterator = function (value) {
	return value;
	return value;
	
};

List1Double.prototype.accessor_first = function () {
	return 0;
	
};

List1Double.prototype.mutator_first = function (value) {
	return value;
	return value;
	
};

List1Double.prototype.accessor_last = function () {
	return 0;
	
};

List1Double.prototype.mutator_last = function (value) {
	return value;
	return value;
	
};

List1Double.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/List"), false);
	
};

var Array1Double = function () {
	this.capacity = 0;
	this.count = 0;
	this.position = 0;
	this.data = null;
	this.iterator = null;
	this.last = 0;
	
	
};

Array1Double.prototype = Object.create(NovaObject.prototype);
Array1Double.prototype.constructor = Array1Double;


Array1Double.prototype.destroy = function () {
	
};

Array1Double.init = function () {
	return Array1Double.init0.call(this, 0);
	this.increaseSize1(10);
	return this;
	
};

Array1Double.init0 = function (count, initialCapacity) {
	initialCapacity = typeof initialCapacity === 'undefined' ? count : initialCapacity;
	this.position = 0;
	this.capacity = 0;
	this.increaseSize1(initialCapacity);
	this.mutator_count(count);
	this.data = [];
	return this;
	
};

Array1Double.init1 = function (data, count) {
	this.data = data;
	this.mutator_count(count);
	this.capacity = count;
	this.position = count;
	return this;
	
};

Array1Double.prototype.fillRemaining = function (value) {
	while (this.accessor_count() < this.capacity) {
		this.add0(value);
	}
	return this;
	
};

Array1Double.prototype.plus0 = function (other) {
	return (this.clone() || nova_null).plusEquals0(other);
	
};

Array1Double.prototype.plusEquals0 = function (other) {
	return this.addAll(other);
	
};

Array1Double.prototype.addAll = function (data) {
	var nova_local_0;
	nova_local_0 = ((data) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		d = (nova_local_0 || nova_null).accessor_next();
		this.add0(d);
	}
	return this;
	
};

Array1Double.prototype.addUnique = function (element) {
	if (!this.contains(element)) {
		this.add0(element);
	}
	return this;
	
};

Array1Double.prototype.add0 = function (element) {
	if (this.position >= this.capacity) {
		this.increaseSize0();
	}
	this.data[this.position++] = element;
	this.mutator_count(NovaMath.max1(this.position, this.accessor_count()));
	return this;
	
};

Array1Double.prototype.add1 = function (index, element) {
	if (index >= this.capacity) {
		this.increaseSize1(index + 1);
	}
	this.add0(0);
	this.shiftRight(index, this.position);
	this.data[index] = element;
	if (index >= this.position - 1) {
		this.position = index + 1;
	}
	this.mutator_count(NovaMath.max1(this.position, this.accessor_count()));
	return this;
	
};

Array1Double.prototype.remove0 = function (index) {
	var element;
	element = this.data[index];
	this.shiftLeft(index + 1, this.position--);
	this.mutator_count(this.accessor_count() - 1);
	return element;
	
};

Array1Double.prototype.remove1 = function (element) {
	var index;
	index = this.indexOf(element);
	if (index >= 0) {
		this.shiftLeft(index + 1, this.position--);
		this.mutator_count(this.accessor_count() - 1);
		return element;
	}
	return 0;
	
};

Array1Double.prototype.replace = function (element, other) {
	var index;
	index = this.indexOf(element);
	if (index >= 0) {
		this.set(index, other);
		return other;
	}
	return 0;
	
};

Array1Double.prototype.shiftRight = function (left, right) {
	var i;
	i = right - 1;
	while (i > left) {
		this.data[i] = this.data[i - 1];
		i--;
	}
	this.data[left] = (0);
	return this;
	
};

Array1Double.prototype.shiftLeft = function (left, right) {
	var i;
	i = left;
	for (; i < right; i++) {
		this.data[i - 1] = this.data[i];
	}
	this.data[right - 1] = (0);
	return this;
	
};

Array1Double.prototype.swap = function (index1, index2) {
	var temp;
	temp = this.data[index1];
	this.data[index1] = this.data[index2];
	this.data[index2] = temp;
	return this;
	
};

Array1Double.prototype.increaseSize0 = function () {
	this.increaseSize1(this.capacity + 3);
	return this;
	
};

Array1Double.prototype.increaseSize1 = function (count) {
	this.capacity = count;
	return this;
	
};

Array1Double.prototype.cloneData = function () {
	var d;
	d = [];
	return d;
	
};

Array1Double.prototype.clone = function () {
	return novaConstructors.newArray1Double1(this.cloneData(), this.accessor_count());
	
};

Array1Double.prototype.toArray = function () {
	return this.clone();
	
};

Array1Double.prototype.map4 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

Array1Double.prototype.forEach1 = function (func) {
	var i;
	i = 0;
	for (; i < this.accessor_count(); i++) {
		func(this.data[i], i, this);
	}
	return this;
	
};

Array1Double.prototype.filter1 = function (filterFunc) {
	var filtered;
	var i;
	var nova_local_0;
	filtered = novaConstructors.newArray1Double();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(element, i++, this)) {
			(filtered || nova_null).add0(element);
		}
	}
	return filtered;
	
};

Array1Double.prototype.take = function (howMany) {
	var list;
	howMany = howMany > this.accessor_count() ? this.accessor_count() : howMany;
	list = novaConstructors.newArray1Double();
	var i;
	i = 0;
	for (; i < howMany; i++) {
		(list || nova_null).add0(this.data[i]);
	}
	return list;
	
};

Array1Double.prototype.skip = function (howMany) {
	var list;
	list = novaConstructors.newArray1Double();
	var i;
	i = howMany;
	for (; i < this.accessor_count(); i++) {
		(list || nova_null).add0(this.data[i]);
	}
	return list;
	
};

Array1Double.prototype.reverse = function () {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray1Double0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).data[this.count - ++i] = element;
	}
	return array;
	
};

Array1Double.prototype.mergeSort0 = function (comparator) {
	var sorted;
	sorted = this.clone();
	if (this.accessor_count() > 1) {
		var mid;
		var lefthalf;
		var righthalf;
		var l;
		var r;
		var i;
		mid = ~~(this.accessor_count() / 2);
		lefthalf = (this.take(mid) || nova_null).mergeSort0(comparator);
		righthalf = (this.skip(mid) || nova_null).mergeSort0(comparator);
		l = 0;
		r = 0;
		i = 0;
		while (l < (lefthalf || nova_null).accessor_count() && r < (righthalf || nova_null).accessor_count()) {
			if (comparator((lefthalf || nova_null).get(l), (righthalf || nova_null).get(r)) < 1) {
				(sorted || nova_null).set(i++, (lefthalf || nova_null).get(l++));
			} else {
				(sorted || nova_null).set(i++, (righthalf || nova_null).get(r++));
			}
		}
		while (l < (lefthalf || nova_null).accessor_count()) {
			(sorted || nova_null).set(i++, (lefthalf || nova_null).get(l++));
		}
		while (r < (righthalf || nova_null).accessor_count()) {
			(sorted || nova_null).set(i++, (righthalf || nova_null).get(r++));
		}
	}
	return sorted;
	
};

Array1Double.prototype.quickSort0 = function (comparator) {
	return Array1Double.quickSortHelper(this.clone(), 0, this.accessor_count() - 1, comparator);
	
};

Array1Double.quickSortHelper = function (list, first, last, comparator) {
	if (first < last) {
		var mid;
		mid = Array1Double.partition(list, first, last, comparator);
		Array1Double.quickSortHelper(list, first, mid - 1, comparator);
		Array1Double.quickSortHelper(list, mid + 1, last, comparator);
	}
	return list;
	
};

Array1Double.partition = function (list, first, last, comparator) {
	var pivot;
	var l;
	var r;
	pivot = (list || nova_null).get(first);
	l = first + 1;
	r = last;
	while (l <= r) {
		while (l <= r && comparator((list || nova_null).get(l), pivot) <= 0) {
			l++;
		}
		while (l <= r && comparator((list || nova_null).get(r), pivot) >= 0) {
			r--;
		}
		if (l <= r) {
			(list || nova_null).swap(l, r);
		}
	}
	(list || nova_null).swap(first, r);
	return r;
	
};

Array1Double.prototype.mergeSort1 = function () {
	var self = this;
	
	return this.mergeSort0((_1, _2) => {
			return ((novaConstructors.newDouble(_1)) || nova_null).compareTo0(novaConstructors.newDouble(_2));
			
	});
	
};

Array1Double.prototype.quickSort1 = function () {
	var self = this;
	
	return this.quickSort0((_1, _2) => {
			return ((novaConstructors.newDouble(_1)) || nova_null).compareTo0(novaConstructors.newDouble(_2));
			
	});
	
};

Array1Double.prototype.sort0 = function () {
	return this.mergeSort1();
	
};

Array1Double.prototype.sort1 = function (comparator) {
	return this.mergeSort0(comparator);
	
};

Array1Double.prototype.toImmutable = function () {
	return novaConstructors.newImmutableArray1Double0(this);
	
};

Array1Double.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).accessor_name() || nova_null).plus0(novaConstructors.newString2(" [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]"))));
	
};

Array1Double.prototype.get = function (index) {
	return this.data[index];
	
};

Array1Double.prototype.set = function (index, value) {
	this.data[index] = value;
	return value;
	
};

Array1Double.prototype.sum = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

Array1Double.prototype.sum0 = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

Array1Double.prototype.map0 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray1Double0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

Array1Double.prototype.map1 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray1Double0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

Array1Double.prototype.map2 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray1Double0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

Array1Double.prototype.mutator_first = function (value) {
	if (this.accessor_count() > 0) {
		this.set(0, value);
	} else {
		this.add0(value);
	}
	return value;
	return value;
	
};

Array1Double.prototype.mutator_last = function (value) {
	if (this.accessor_count() > 0) {
		this.set(this.accessor_count() - 1, value);
	} else {
		this.add0(value);
	}
	return value;
	return value;
	
};

Array1Double.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Array"), false);
	
};

Array1Double.prototype.accessor_count = function () {
	return this.count;
	
};

Array1Double.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	return value;
	
};

Array1Double.prototype.accessor_empty = function () {
	return this.accessor_count() <= 0;
	
};

Array1Double.prototype.accessor_iterator = function () {
	return novaConstructors.newArrayIterator1Double(this);
	
};

Array1Double.prototype.accessor_first = function () {
	return this.accessor_count() > 0 ? this.get(0) : 0;
	
};

Array1Double.prototype.accessor_last = function () {
	return this.accessor_count() > 0 ? this.get(this.accessor_count() - 1) : 0;
	
};

Array1Double.prototype.super = function () {
	
};

novaConstructors.newArray1Double = function () {
	var __value = new Array1Double()
	NovaObject.call(__value);
	Array1Double.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Double.init.call(__value);
	
};

novaConstructors.newArray1Double0 = function (count, initialCapacity) {
	var __value = new Array1Double()
	NovaObject.call(__value);
	Array1Double.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Double.init0.call(__value, count, initialCapacity);
	
};

novaConstructors.newArray1Double1 = function (data, count) {
	var __value = new Array1Double()
	NovaObject.call(__value);
	Array1Double.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Double.init1.call(__value, data, count);
	
};

var OrderedList1Char = function () {
	
	
};

OrderedList1Char.prototype.constructor = OrderedList1Char;


OrderedList1Char.prototype.findIndex = function (condition, defaultReturnValue) {
	var i;
	var list;
	var nova_local_0;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = 0;
	list = this;
	nova_local_0 = ((list) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (condition(element, i++, this)) {
			return i;
		}
	}
	return defaultReturnValue;
	
};

OrderedList1Char.prototype.indexOf = function (element, defaultReturnValue) {
	var i;
	var nova_local_0;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		e = (nova_local_0 || nova_null).accessor_next();
		if (element === e) {
			return i;
		}
		i++;
	}
	return defaultReturnValue;
	
};

OrderedList1Char.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/OrderedList"), false);
	
};

var List1Char = function () {
	this.iterator = null;
	this.last = 0;
	
	
};

List1Char.prototype.constructor = List1Char;


List1Char.prototype.toArray = function () {
	var array;
	var nova_local_0;
	array = novaConstructors.newArray1Char();
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(value);
	}
	return array;
	
};

List1Char.prototype.contains = function (value) {
	var self = this;
	
	return this.any((_1, _2, _3) => {
			return _1 === value;
			
	});
	
};

List1Char.prototype.containsAny = function (values) {
	var self = this;
	
	return this.any((_1, _2, _3) => {
			return (values || nova_null).contains(_1);
			
	});
	
};

List1Char.prototype.forEach1 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		func(value, i++, this);
	}
	return this;
	
};

List1Char.prototype.map1 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

List1Char.prototype.any = function (anyFunc) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (anyFunc(element, i++, this)) {
			return true;
		}
	}
	return false;
	
};

List1Char.prototype.all = function (allFunc, stopOnContradiction) {
	var i;
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	i = 0;
	contradiction = false;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (!allFunc(element, i++, this)) {
			if (stopOnContradiction) {
				return false;
			}
			contradiction = true;
		}
	}
	return !contradiction;
	
};

List1Char.prototype.filter1 = function (filterFunc) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Char();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(value, i++, this)) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Char.prototype.filterNot = function (filterFunc) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Char();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (!filterFunc(value, i++, this)) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Char.prototype.filterNull = function () {
	var self = this;
	
	return this.filter1((_1, _2, _3) => {
			return true;
			
	});
	
};

List1Char.prototype.take = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Char();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= howMany) {
			return list;
		}
		(list || nova_null).add0(value);
	}
	return list;
	
};

List1Char.prototype.takeLast = function (howMany) {
	var list;
	var startIndex;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Char();
	startIndex = NovaMath.max1(0, this.accessor_count() - howMany);
	if (startIndex === this.accessor_count()) {
		return list;
	}
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= startIndex) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Char.prototype.skipLast = function (howMany) {
	return this.take(this.accessor_count() - howMany);
	
};

List1Char.prototype.skip = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Char();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= howMany) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Char.prototype.firstOr = function (_js_default, func) {
	var nova_local_0;
	func = typeof func === 'undefined' ? (_1) => {
		return true;
		
	} : func;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return _js_default;
	
};

List1Char.prototype.firstOrThrow = function (e, func) {
	var nova_local_0;
	func = typeof func === 'undefined' ? (_1) => {
		return true;
		
	} : func;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	throw e;
	
};

List1Char.prototype.firstWhere = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return 0;
	
};

List1Char.prototype.firstNonNull = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var value;
		element = (nova_local_0 || nova_null).accessor_next();
		value = func(element);
		if ((value) != null) {
			return value;
		}
	}
	return null;
	
};

List1Char.prototype.zip = function (other, zipper) {
	var i1;
	var i2;
	var array;
	i1 = this.accessor_iterator();
	i2 = (other || nova_null).accessor_iterator();
	array = novaConstructors.newArray();
	while ((i1 || nova_null).accessor_hasNext() && (i2 || nova_null).accessor_hasNext()) {
		(array || nova_null).add0(zipper((i1 || nova_null).accessor_next(), (i2 || nova_null).accessor_next()));
	}
	return array;
	
};

List1Char.prototype.sum0 = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

List1Char.prototype.sum1 = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

List1Char.prototype.min = function (func) {
	var min;
	var i;
	var nova_local_0;
	min = NovaLong.MAX_VALUE;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		min = NovaMath.min0(min, func(element, i++, this));
	}
	return min;
	
};

List1Char.prototype.max = function (func) {
	var max;
	var i;
	var nova_local_0;
	max = NovaLong.MAX_VALUE;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		max = NovaMath.max0(max, func(element, i++, this));
	}
	return max;
	
};

List1Char.prototype.reduce = function (func, initialValue) {
	var value;
	var i;
	var nova_local_0;
	value = initialValue;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		value = func(value, element, i++, this);
	}
	return value;
	
};

List1Char.prototype.join = function (delimiter) {
	var self = this;
	
	delimiter = typeof delimiter === 'undefined' ? novaConstructors.newString2("") : delimiter;
	return this.reduce((str, e, i, _4) => {
			return (str || nova_null).plus0(((i > 0 ? delimiter : novaConstructors.newString2("")) || nova_null).plus0(Char.toString(e)));
			
		}, novaConstructors.newString2(""));
	
};

List1Char.prototype.stitch = function (delimiter) {
	var self = this;
	
	delimiter = typeof delimiter === 'undefined' ? novaConstructors.newString2("") : delimiter;
	return this.reduce((str, e, _3, _4) => {
			return (str || nova_null).plus0((delimiter || nova_null).plus0(Char.toString(e)));
			
		}, novaConstructors.newString2(""));
	
};

List1Char.prototype.toEnglish = function (conjunction, oxford) {
	oxford = typeof oxford === 'undefined' ? true : oxford;
	return this.accessor_count() > 1 ? ((this.take(this.accessor_count() - 1) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(((oxford && this.accessor_count() > 2 ? novaConstructors.newString2(", ") : novaConstructors.newString2(" ")) || nova_null).plus0((((conjunction) || nova_null).plus0(novaConstructors.newString2(" ")) || nova_null).plus0(Char.toString((this.skip(this.accessor_count() - 1) || nova_null).accessor_first())))) : (((Char.toString(this.accessor_first()).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""));
	
};

List1Char.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0((this.join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

List1Char.prototype.accessor_count = function () {
	return 0;
	
};

List1Char.prototype.mutator_count = function (value) {
	return value;
	return value;
	
};

List1Char.prototype.accessor_iterator = function () {
	return null;
	
};

List1Char.prototype.mutator_iterator = function (value) {
	return value;
	return value;
	
};

List1Char.prototype.accessor_first = function () {
	return 0;
	
};

List1Char.prototype.mutator_first = function (value) {
	return value;
	return value;
	
};

List1Char.prototype.accessor_last = function () {
	return 0;
	
};

List1Char.prototype.mutator_last = function (value) {
	return value;
	return value;
	
};

List1Char.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/List"), false);
	
};

var Array1Char = function () {
	this.capacity = 0;
	this.count = 0;
	this.position = 0;
	this.data = null;
	this.iterator = null;
	this.last = 0;
	
	
};

Array1Char.prototype = Object.create(NovaObject.prototype);
Array1Char.prototype.constructor = Array1Char;


Array1Char.prototype.destroy = function () {
	
};

Array1Char.init = function () {
	return Array1Char.init0.call(this, 0);
	this.increaseSize1(10);
	return this;
	
};

Array1Char.init0 = function (count, initialCapacity) {
	initialCapacity = typeof initialCapacity === 'undefined' ? count : initialCapacity;
	this.position = 0;
	this.capacity = 0;
	this.increaseSize1(initialCapacity);
	this.mutator_count(count);
	this.data = [];
	return this;
	
};

Array1Char.init1 = function (data, count) {
	this.data = data;
	this.mutator_count(count);
	this.capacity = count;
	this.position = count;
	return this;
	
};

Array1Char.prototype.fillRemaining = function (value) {
	while (this.accessor_count() < this.capacity) {
		this.add0(value);
	}
	return this;
	
};

Array1Char.prototype.plus0 = function (other) {
	return (this.clone() || nova_null).plusEquals0(other);
	
};

Array1Char.prototype.plusEquals0 = function (other) {
	return this.addAll(other);
	
};

Array1Char.prototype.addAll = function (data) {
	var nova_local_0;
	nova_local_0 = ((data) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		d = (nova_local_0 || nova_null).accessor_next();
		this.add0(d);
	}
	return this;
	
};

Array1Char.prototype.addUnique = function (element) {
	if (!this.contains(element)) {
		this.add0(element);
	}
	return this;
	
};

Array1Char.prototype.add0 = function (element) {
	if (this.position >= this.capacity) {
		this.increaseSize0();
	}
	this.data[this.position++] = element;
	this.mutator_count(NovaMath.max1(this.position, this.accessor_count()));
	return this;
	
};

Array1Char.prototype.add1 = function (index, element) {
	if (index >= this.capacity) {
		this.increaseSize1(index + 1);
	}
	this.add0(0);
	this.shiftRight(index, this.position);
	this.data[index] = element;
	if (index >= this.position - 1) {
		this.position = index + 1;
	}
	this.mutator_count(NovaMath.max1(this.position, this.accessor_count()));
	return this;
	
};

Array1Char.prototype.remove0 = function (index) {
	var element;
	element = this.data[index];
	this.shiftLeft(index + 1, this.position--);
	this.mutator_count(this.accessor_count() - 1);
	return element;
	
};

Array1Char.prototype.remove1 = function (element) {
	var index;
	index = this.indexOf(element);
	if (index >= 0) {
		this.shiftLeft(index + 1, this.position--);
		this.mutator_count(this.accessor_count() - 1);
		return element;
	}
	return 0;
	
};

Array1Char.prototype.replace = function (element, other) {
	var index;
	index = this.indexOf(element);
	if (index >= 0) {
		this.set(index, other);
		return other;
	}
	return 0;
	
};

Array1Char.prototype.shiftRight = function (left, right) {
	var i;
	i = right - 1;
	while (i > left) {
		this.data[i] = this.data[i - 1];
		i--;
	}
	this.data[left] = (0);
	return this;
	
};

Array1Char.prototype.shiftLeft = function (left, right) {
	var i;
	i = left;
	for (; i < right; i++) {
		this.data[i - 1] = this.data[i];
	}
	this.data[right - 1] = (0);
	return this;
	
};

Array1Char.prototype.swap = function (index1, index2) {
	var temp;
	temp = this.data[index1];
	this.data[index1] = this.data[index2];
	this.data[index2] = temp;
	return this;
	
};

Array1Char.prototype.increaseSize0 = function () {
	this.increaseSize1(this.capacity + 3);
	return this;
	
};

Array1Char.prototype.increaseSize1 = function (count) {
	this.capacity = count;
	return this;
	
};

Array1Char.prototype.cloneData = function () {
	var d;
	d = [];
	return d;
	
};

Array1Char.prototype.clone = function () {
	return novaConstructors.newArray1Char1(this.cloneData(), this.accessor_count());
	
};

Array1Char.prototype.toArray = function () {
	return this.clone();
	
};

Array1Char.prototype.map1 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

Array1Char.prototype.forEach1 = function (func) {
	var i;
	i = 0;
	for (; i < this.accessor_count(); i++) {
		func(this.data[i], i, this);
	}
	return this;
	
};

Array1Char.prototype.filter1 = function (filterFunc) {
	var filtered;
	var i;
	var nova_local_0;
	filtered = novaConstructors.newArray1Char();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(element, i++, this)) {
			(filtered || nova_null).add0(element);
		}
	}
	return filtered;
	
};

Array1Char.prototype.take = function (howMany) {
	var list;
	howMany = howMany > this.accessor_count() ? this.accessor_count() : howMany;
	list = novaConstructors.newArray1Char();
	var i;
	i = 0;
	for (; i < howMany; i++) {
		(list || nova_null).add0(this.data[i]);
	}
	return list;
	
};

Array1Char.prototype.skip = function (howMany) {
	var list;
	list = novaConstructors.newArray1Char();
	var i;
	i = howMany;
	for (; i < this.accessor_count(); i++) {
		(list || nova_null).add0(this.data[i]);
	}
	return list;
	
};

Array1Char.prototype.reverse = function () {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray1Char0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).data[this.count - ++i] = element;
	}
	return array;
	
};

Array1Char.prototype.mergeSort0 = function (comparator) {
	var sorted;
	sorted = this.clone();
	if (this.accessor_count() > 1) {
		var mid;
		var lefthalf;
		var righthalf;
		var l;
		var r;
		var i;
		mid = ~~(this.accessor_count() / 2);
		lefthalf = (this.take(mid) || nova_null).mergeSort0(comparator);
		righthalf = (this.skip(mid) || nova_null).mergeSort0(comparator);
		l = 0;
		r = 0;
		i = 0;
		while (l < (lefthalf || nova_null).accessor_count() && r < (righthalf || nova_null).accessor_count()) {
			if (comparator((lefthalf || nova_null).get(l), (righthalf || nova_null).get(r)) < 1) {
				(sorted || nova_null).set(i++, (lefthalf || nova_null).get(l++));
			} else {
				(sorted || nova_null).set(i++, (righthalf || nova_null).get(r++));
			}
		}
		while (l < (lefthalf || nova_null).accessor_count()) {
			(sorted || nova_null).set(i++, (lefthalf || nova_null).get(l++));
		}
		while (r < (righthalf || nova_null).accessor_count()) {
			(sorted || nova_null).set(i++, (righthalf || nova_null).get(r++));
		}
	}
	return sorted;
	
};

Array1Char.prototype.quickSort0 = function (comparator) {
	return Array1Char.quickSortHelper(this.clone(), 0, this.accessor_count() - 1, comparator);
	
};

Array1Char.quickSortHelper = function (list, first, last, comparator) {
	if (first < last) {
		var mid;
		mid = Array1Char.partition(list, first, last, comparator);
		Array1Char.quickSortHelper(list, first, mid - 1, comparator);
		Array1Char.quickSortHelper(list, mid + 1, last, comparator);
	}
	return list;
	
};

Array1Char.partition = function (list, first, last, comparator) {
	var pivot;
	var l;
	var r;
	pivot = (list || nova_null).get(first);
	l = first + 1;
	r = last;
	while (l <= r) {
		while (l <= r && comparator((list || nova_null).get(l), pivot) <= 0) {
			l++;
		}
		while (l <= r && comparator((list || nova_null).get(r), pivot) >= 0) {
			r--;
		}
		if (l <= r) {
			(list || nova_null).swap(l, r);
		}
	}
	(list || nova_null).swap(first, r);
	return r;
	
};

Array1Char.prototype.mergeSort1 = function () {
	var self = this;
	
	return this.mergeSort0((_1, _2) => {
			return ((novaConstructors.newChar(_1)) || nova_null).compareTo0(novaConstructors.newChar(_2));
			
	});
	
};

Array1Char.prototype.quickSort1 = function () {
	var self = this;
	
	return this.quickSort0((_1, _2) => {
			return ((novaConstructors.newChar(_1)) || nova_null).compareTo0(novaConstructors.newChar(_2));
			
	});
	
};

Array1Char.prototype.sort0 = function () {
	return this.mergeSort1();
	
};

Array1Char.prototype.sort1 = function (comparator) {
	return this.mergeSort0(comparator);
	
};

Array1Char.prototype.toImmutable = function () {
	return novaConstructors.newImmutableArray1Char0(this);
	
};

Array1Char.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).accessor_name() || nova_null).plus0(novaConstructors.newString2(" [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]"))));
	
};

Array1Char.prototype.get = function (index) {
	return this.data[index];
	
};

Array1Char.prototype.set = function (index, value) {
	this.data[index] = value;
	return value;
	
};

Array1Char.prototype.mutator_first = function (value) {
	if (this.accessor_count() > 0) {
		this.set(0, value);
	} else {
		this.add0(value);
	}
	return value;
	return value;
	
};

Array1Char.prototype.mutator_last = function (value) {
	if (this.accessor_count() > 0) {
		this.set(this.accessor_count() - 1, value);
	} else {
		this.add0(value);
	}
	return value;
	return value;
	
};

Array1Char.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Array"), false);
	
};

Array1Char.prototype.accessor_count = function () {
	return this.count;
	
};

Array1Char.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	return value;
	
};

Array1Char.prototype.accessor_empty = function () {
	return this.accessor_count() <= 0;
	
};

Array1Char.prototype.accessor_iterator = function () {
	return novaConstructors.newArrayIterator1Char(this);
	
};

Array1Char.prototype.accessor_first = function () {
	return this.accessor_count() > 0 ? this.get(0) : 0;
	
};

Array1Char.prototype.accessor_last = function () {
	return this.accessor_count() > 0 ? this.get(this.accessor_count() - 1) : 0;
	
};

Array1Char.prototype.super = function () {
	
};

novaConstructors.newArray1Char = function () {
	var __value = new Array1Char()
	NovaObject.call(__value);
	Array1Char.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Char.init.call(__value);
	
};

novaConstructors.newArray1Char0 = function (count, initialCapacity) {
	var __value = new Array1Char()
	NovaObject.call(__value);
	Array1Char.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Char.init0.call(__value, count, initialCapacity);
	
};

novaConstructors.newArray1Char1 = function (data, count) {
	var __value = new Array1Char()
	NovaObject.call(__value);
	Array1Char.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Char.init1.call(__value, data, count);
	
};

var OrderedList1Int = function () {
	
	
};

OrderedList1Int.prototype.constructor = OrderedList1Int;


OrderedList1Int.prototype.findIndex = function (condition, defaultReturnValue) {
	var i;
	var list;
	var nova_local_0;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = 0;
	list = this;
	nova_local_0 = ((list) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (condition(element, i++, this)) {
			return i;
		}
	}
	return defaultReturnValue;
	
};

OrderedList1Int.prototype.indexOf = function (element, defaultReturnValue) {
	var i;
	var nova_local_0;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		e = (nova_local_0 || nova_null).accessor_next();
		if (element === e) {
			return i;
		}
		i++;
	}
	return defaultReturnValue;
	
};

OrderedList1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/OrderedList"), false);
	
};

var List1Int = function () {
	this.iterator = null;
	this.last = 0;
	
	
};

List1Int.prototype.constructor = List1Int;


List1Int.prototype.toArray = function () {
	var array;
	var nova_local_0;
	array = novaConstructors.newArray1Int();
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(value);
	}
	return array;
	
};

List1Int.prototype.contains = function (value) {
	var self = this;
	
	return this.any((_1, _2, _3) => {
			return _1 === value;
			
	});
	
};

List1Int.prototype.containsAny = function (values) {
	var self = this;
	
	return this.any((_1, _2, _3) => {
			return (values || nova_null).contains(_1);
			
	});
	
};

List1Int.prototype.forEach1 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		func(value, i++, this);
	}
	return this;
	
};

List1Int.prototype.map1 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

List1Int.prototype.any = function (anyFunc) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (anyFunc(element, i++, this)) {
			return true;
		}
	}
	return false;
	
};

List1Int.prototype.all = function (allFunc, stopOnContradiction) {
	var i;
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	i = 0;
	contradiction = false;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (!allFunc(element, i++, this)) {
			if (stopOnContradiction) {
				return false;
			}
			contradiction = true;
		}
	}
	return !contradiction;
	
};

List1Int.prototype.filter1 = function (filterFunc) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Int();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(value, i++, this)) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Int.prototype.filterNot = function (filterFunc) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Int();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (!filterFunc(value, i++, this)) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Int.prototype.filterNull = function () {
	var self = this;
	
	return this.filter1((_1, _2, _3) => {
			return true;
			
	});
	
};

List1Int.prototype.take = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Int();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= howMany) {
			return list;
		}
		(list || nova_null).add0(value);
	}
	return list;
	
};

List1Int.prototype.takeLast = function (howMany) {
	var list;
	var startIndex;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Int();
	startIndex = NovaMath.max1(0, this.accessor_count() - howMany);
	if (startIndex === this.accessor_count()) {
		return list;
	}
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= startIndex) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Int.prototype.skipLast = function (howMany) {
	return this.take(this.accessor_count() - howMany);
	
};

List1Int.prototype.skip = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Int();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= howMany) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Int.prototype.firstOr = function (_js_default, func) {
	var nova_local_0;
	func = typeof func === 'undefined' ? (_1) => {
		return true;
		
	} : func;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return _js_default;
	
};

List1Int.prototype.firstOrThrow = function (e, func) {
	var nova_local_0;
	func = typeof func === 'undefined' ? (_1) => {
		return true;
		
	} : func;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	throw e;
	
};

List1Int.prototype.firstWhere = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return 0;
	
};

List1Int.prototype.firstNonNull = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var value;
		element = (nova_local_0 || nova_null).accessor_next();
		value = func(element);
		if ((value) != null) {
			return value;
		}
	}
	return null;
	
};

List1Int.prototype.zip = function (other, zipper) {
	var i1;
	var i2;
	var array;
	i1 = this.accessor_iterator();
	i2 = (other || nova_null).accessor_iterator();
	array = novaConstructors.newArray();
	while ((i1 || nova_null).accessor_hasNext() && (i2 || nova_null).accessor_hasNext()) {
		(array || nova_null).add0(zipper((i1 || nova_null).accessor_next(), (i2 || nova_null).accessor_next()));
	}
	return array;
	
};

List1Int.prototype.sum0 = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

List1Int.prototype.sum1 = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

List1Int.prototype.min = function (func) {
	var min;
	var i;
	var nova_local_0;
	min = NovaLong.MAX_VALUE;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		min = NovaMath.min0(min, func(element, i++, this));
	}
	return min;
	
};

List1Int.prototype.max = function (func) {
	var max;
	var i;
	var nova_local_0;
	max = NovaLong.MAX_VALUE;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		max = NovaMath.max0(max, func(element, i++, this));
	}
	return max;
	
};

List1Int.prototype.reduce = function (func, initialValue) {
	var value;
	var i;
	var nova_local_0;
	value = initialValue;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		value = func(value, element, i++, this);
	}
	return value;
	
};

List1Int.prototype.join = function (delimiter) {
	var self = this;
	
	delimiter = typeof delimiter === 'undefined' ? novaConstructors.newString2("") : delimiter;
	return this.reduce((str, e, i, _4) => {
			return (str || nova_null).plus0(((i > 0 ? delimiter : novaConstructors.newString2("")) || nova_null).plus0(NovaInt.toString(e)));
			
		}, novaConstructors.newString2(""));
	
};

List1Int.prototype.stitch = function (delimiter) {
	var self = this;
	
	delimiter = typeof delimiter === 'undefined' ? novaConstructors.newString2("") : delimiter;
	return this.reduce((str, e, _3, _4) => {
			return (str || nova_null).plus0((delimiter || nova_null).plus0(NovaInt.toString(e)));
			
		}, novaConstructors.newString2(""));
	
};

List1Int.prototype.toEnglish = function (conjunction, oxford) {
	oxford = typeof oxford === 'undefined' ? true : oxford;
	return this.accessor_count() > 1 ? ((this.take(this.accessor_count() - 1) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(((oxford && this.accessor_count() > 2 ? novaConstructors.newString2(", ") : novaConstructors.newString2(" ")) || nova_null).plus0((((conjunction) || nova_null).plus0(novaConstructors.newString2(" ")) || nova_null).plus0(NovaInt.toString((this.skip(this.accessor_count() - 1) || nova_null).accessor_first())))) : (((NovaInt.toString(this.accessor_first()).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""));
	
};

List1Int.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0((this.join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

List1Int.prototype.accessor_count = function () {
	return 0;
	
};

List1Int.prototype.mutator_count = function (value) {
	return value;
	return value;
	
};

List1Int.prototype.accessor_iterator = function () {
	return null;
	
};

List1Int.prototype.mutator_iterator = function (value) {
	return value;
	return value;
	
};

List1Int.prototype.accessor_first = function () {
	return 0;
	
};

List1Int.prototype.mutator_first = function (value) {
	return value;
	return value;
	
};

List1Int.prototype.accessor_last = function () {
	return 0;
	
};

List1Int.prototype.mutator_last = function (value) {
	return value;
	return value;
	
};

List1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/List"), false);
	
};

var Array1Int = function () {
	this.capacity = 0;
	this.count = 0;
	this.position = 0;
	this.data = null;
	this.iterator = null;
	this.last = 0;
	
	
};

Array1Int.prototype = Object.create(NovaObject.prototype);
Array1Int.prototype.constructor = Array1Int;


Array1Int.prototype.destroy = function () {
	
};

Array1Int.init = function () {
	return Array1Int.init0.call(this, 0);
	this.increaseSize1(10);
	return this;
	
};

Array1Int.init0 = function (count, initialCapacity) {
	initialCapacity = typeof initialCapacity === 'undefined' ? count : initialCapacity;
	this.position = 0;
	this.capacity = 0;
	this.increaseSize1(initialCapacity);
	this.mutator_count(count);
	this.data = [];
	return this;
	
};

Array1Int.init1 = function (data, count) {
	this.data = data;
	this.mutator_count(count);
	this.capacity = count;
	this.position = count;
	return this;
	
};

Array1Int.prototype.fillRemaining = function (value) {
	while (this.accessor_count() < this.capacity) {
		this.add0(value);
	}
	return this;
	
};

Array1Int.prototype.plus0 = function (other) {
	return (this.clone() || nova_null).plusEquals0(other);
	
};

Array1Int.prototype.plusEquals0 = function (other) {
	return this.addAll(other);
	
};

Array1Int.prototype.addAll = function (data) {
	var nova_local_0;
	nova_local_0 = ((data) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		d = (nova_local_0 || nova_null).accessor_next();
		this.add0(d);
	}
	return this;
	
};

Array1Int.prototype.addUnique = function (element) {
	if (!this.contains(element)) {
		this.add0(element);
	}
	return this;
	
};

Array1Int.prototype.add0 = function (element) {
	if (this.position >= this.capacity) {
		this.increaseSize0();
	}
	this.data[this.position++] = element;
	this.mutator_count(NovaMath.max1(this.position, this.accessor_count()));
	return this;
	
};

Array1Int.prototype.add1 = function (index, element) {
	if (index >= this.capacity) {
		this.increaseSize1(index + 1);
	}
	this.add0(0);
	this.shiftRight(index, this.position);
	this.data[index] = element;
	if (index >= this.position - 1) {
		this.position = index + 1;
	}
	this.mutator_count(NovaMath.max1(this.position, this.accessor_count()));
	return this;
	
};

Array1Int.prototype.remove = function (index) {
	var element;
	element = this.data[index];
	this.shiftLeft(index + 1, this.position--);
	this.mutator_count(this.accessor_count() - 1);
	return element;
	
};

Array1Int.prototype.replace = function (element, other) {
	var index;
	index = this.indexOf(element);
	if (index >= 0) {
		this.set(index, other);
		return other;
	}
	return 0;
	
};

Array1Int.prototype.shiftRight = function (left, right) {
	var i;
	i = right - 1;
	while (i > left) {
		this.data[i] = this.data[i - 1];
		i--;
	}
	this.data[left] = (0);
	return this;
	
};

Array1Int.prototype.shiftLeft = function (left, right) {
	var i;
	i = left;
	for (; i < right; i++) {
		this.data[i - 1] = this.data[i];
	}
	this.data[right - 1] = (0);
	return this;
	
};

Array1Int.prototype.swap = function (index1, index2) {
	var temp;
	temp = this.data[index1];
	this.data[index1] = this.data[index2];
	this.data[index2] = temp;
	return this;
	
};

Array1Int.prototype.increaseSize0 = function () {
	this.increaseSize1(this.capacity + 3);
	return this;
	
};

Array1Int.prototype.increaseSize1 = function (count) {
	this.capacity = count;
	return this;
	
};

Array1Int.prototype.cloneData = function () {
	var d;
	d = [];
	return d;
	
};

Array1Int.prototype.clone = function () {
	return novaConstructors.newArray1Int1(this.cloneData(), this.accessor_count());
	
};

Array1Int.prototype.toArray = function () {
	return this.clone();
	
};

Array1Int.prototype.map1 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

Array1Int.prototype.forEach1 = function (func) {
	var i;
	i = 0;
	for (; i < this.accessor_count(); i++) {
		func(this.data[i], i, this);
	}
	return this;
	
};

Array1Int.prototype.filter1 = function (filterFunc) {
	var filtered;
	var i;
	var nova_local_0;
	filtered = novaConstructors.newArray1Int();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(element, i++, this)) {
			(filtered || nova_null).add0(element);
		}
	}
	return filtered;
	
};

Array1Int.prototype.take = function (howMany) {
	var list;
	howMany = howMany > this.accessor_count() ? this.accessor_count() : howMany;
	list = novaConstructors.newArray1Int();
	var i;
	i = 0;
	for (; i < howMany; i++) {
		(list || nova_null).add0(this.data[i]);
	}
	return list;
	
};

Array1Int.prototype.skip = function (howMany) {
	var list;
	list = novaConstructors.newArray1Int();
	var i;
	i = howMany;
	for (; i < this.accessor_count(); i++) {
		(list || nova_null).add0(this.data[i]);
	}
	return list;
	
};

Array1Int.prototype.reverse = function () {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray1Int0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).data[this.count - ++i] = element;
	}
	return array;
	
};

Array1Int.prototype.mergeSort0 = function (comparator) {
	var sorted;
	sorted = this.clone();
	if (this.accessor_count() > 1) {
		var mid;
		var lefthalf;
		var righthalf;
		var l;
		var r;
		var i;
		mid = ~~(this.accessor_count() / 2);
		lefthalf = (this.take(mid) || nova_null).mergeSort0(comparator);
		righthalf = (this.skip(mid) || nova_null).mergeSort0(comparator);
		l = 0;
		r = 0;
		i = 0;
		while (l < (lefthalf || nova_null).accessor_count() && r < (righthalf || nova_null).accessor_count()) {
			if (comparator((lefthalf || nova_null).get(l), (righthalf || nova_null).get(r)) < 1) {
				(sorted || nova_null).set(i++, (lefthalf || nova_null).get(l++));
			} else {
				(sorted || nova_null).set(i++, (righthalf || nova_null).get(r++));
			}
		}
		while (l < (lefthalf || nova_null).accessor_count()) {
			(sorted || nova_null).set(i++, (lefthalf || nova_null).get(l++));
		}
		while (r < (righthalf || nova_null).accessor_count()) {
			(sorted || nova_null).set(i++, (righthalf || nova_null).get(r++));
		}
	}
	return sorted;
	
};

Array1Int.prototype.quickSort0 = function (comparator) {
	return Array1Int.quickSortHelper(this.clone(), 0, this.accessor_count() - 1, comparator);
	
};

Array1Int.quickSortHelper = function (list, first, last, comparator) {
	if (first < last) {
		var mid;
		mid = Array1Int.partition(list, first, last, comparator);
		Array1Int.quickSortHelper(list, first, mid - 1, comparator);
		Array1Int.quickSortHelper(list, mid + 1, last, comparator);
	}
	return list;
	
};

Array1Int.partition = function (list, first, last, comparator) {
	var pivot;
	var l;
	var r;
	pivot = (list || nova_null).get(first);
	l = first + 1;
	r = last;
	while (l <= r) {
		while (l <= r && comparator((list || nova_null).get(l), pivot) <= 0) {
			l++;
		}
		while (l <= r && comparator((list || nova_null).get(r), pivot) >= 0) {
			r--;
		}
		if (l <= r) {
			(list || nova_null).swap(l, r);
		}
	}
	(list || nova_null).swap(first, r);
	return r;
	
};

Array1Int.prototype.mergeSort1 = function () {
	var self = this;
	
	return this.mergeSort0((_1, _2) => {
			return ((novaConstructors.newInt(_1)) || nova_null).compareTo0(novaConstructors.newInt(_2));
			
	});
	
};

Array1Int.prototype.quickSort1 = function () {
	var self = this;
	
	return this.quickSort0((_1, _2) => {
			return ((novaConstructors.newInt(_1)) || nova_null).compareTo0(novaConstructors.newInt(_2));
			
	});
	
};

Array1Int.prototype.sort0 = function () {
	return this.mergeSort1();
	
};

Array1Int.prototype.sort1 = function (comparator) {
	return this.mergeSort0(comparator);
	
};

Array1Int.prototype.toImmutable = function () {
	return novaConstructors.newImmutableArray1Int0(this);
	
};

Array1Int.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).accessor_name() || nova_null).plus0(novaConstructors.newString2(" [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]"))));
	
};

Array1Int.prototype.get = function (index) {
	return this.data[index];
	
};

Array1Int.prototype.set = function (index, value) {
	this.data[index] = value;
	return value;
	return value;
	
};

Array1Int.prototype.mutator_first = function (value) {
	if (this.accessor_count() > 0) {
		this.set(0, value);
	} else {
		this.add0(value);
	}
	return value;
	return value;
	
};

Array1Int.prototype.mutator_last = function (value) {
	if (this.accessor_count() > 0) {
		this.set(this.accessor_count() - 1, value);
	} else {
		this.add0(value);
	}
	return value;
	return value;
	
};

Array1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Array"), false);
	
};

Array1Int.prototype.accessor_count = function () {
	return this.count;
	
};

Array1Int.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	return value;
	
};

Array1Int.prototype.accessor_empty = function () {
	return this.accessor_count() <= 0;
	
};

Array1Int.prototype.accessor_iterator = function () {
	return novaConstructors.newArrayIterator1Int(this);
	
};

Array1Int.prototype.accessor_first = function () {
	return this.accessor_count() > 0 ? this.get(0) : 0;
	
};

Array1Int.prototype.accessor_last = function () {
	return this.accessor_count() > 0 ? this.get(this.accessor_count() - 1) : 0;
	
};

Array1Int.prototype.super = function () {
	
};

novaConstructors.newArray1Int = function () {
	var __value = new Array1Int()
	NovaObject.call(__value);
	Array1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Int.init.call(__value);
	
};

novaConstructors.newArray1Int0 = function (count, initialCapacity) {
	var __value = new Array1Int()
	NovaObject.call(__value);
	Array1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Int.init0.call(__value, count, initialCapacity);
	
};

novaConstructors.newArray1Int1 = function (data, count) {
	var __value = new Array1Int()
	NovaObject.call(__value);
	Array1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Int.init1.call(__value, data, count);
	
};

var OrderedList1Byte = function () {
	
	
};

OrderedList1Byte.prototype.constructor = OrderedList1Byte;


OrderedList1Byte.prototype.findIndex = function (condition, defaultReturnValue) {
	var i;
	var list;
	var nova_local_0;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = 0;
	list = this;
	nova_local_0 = ((list) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (condition(element, i++, this)) {
			return i;
		}
	}
	return defaultReturnValue;
	
};

OrderedList1Byte.prototype.indexOf = function (element, defaultReturnValue) {
	var i;
	var nova_local_0;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		e = (nova_local_0 || nova_null).accessor_next();
		if (element === e) {
			return i;
		}
		i++;
	}
	return defaultReturnValue;
	
};

OrderedList1Byte.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/OrderedList"), false);
	
};

var List1Byte = function () {
	this.iterator = null;
	this.last = 0;
	
	
};

List1Byte.prototype.constructor = List1Byte;


List1Byte.prototype.toArray = function () {
	var array;
	var nova_local_0;
	array = novaConstructors.newArray1Byte();
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(value);
	}
	return array;
	
};

List1Byte.prototype.contains = function (value) {
	var self = this;
	
	return this.any((_1, _2, _3) => {
			return _1 === value;
			
	});
	
};

List1Byte.prototype.containsAny = function (values) {
	var self = this;
	
	return this.any((_1, _2, _3) => {
			return (values || nova_null).contains(_1);
			
	});
	
};

List1Byte.prototype.forEach1 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		func(value, i++, this);
	}
	return this;
	
};

List1Byte.prototype.map1 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

List1Byte.prototype.any = function (anyFunc) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (anyFunc(element, i++, this)) {
			return true;
		}
	}
	return false;
	
};

List1Byte.prototype.all = function (allFunc, stopOnContradiction) {
	var i;
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	i = 0;
	contradiction = false;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (!allFunc(element, i++, this)) {
			if (stopOnContradiction) {
				return false;
			}
			contradiction = true;
		}
	}
	return !contradiction;
	
};

List1Byte.prototype.filter1 = function (filterFunc) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Byte();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(value, i++, this)) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Byte.prototype.filterNot = function (filterFunc) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Byte();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (!filterFunc(value, i++, this)) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Byte.prototype.filterNull = function () {
	var self = this;
	
	return this.filter1((_1, _2, _3) => {
			return true;
			
	});
	
};

List1Byte.prototype.take = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Byte();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= howMany) {
			return list;
		}
		(list || nova_null).add0(value);
	}
	return list;
	
};

List1Byte.prototype.takeLast = function (howMany) {
	var list;
	var startIndex;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Byte();
	startIndex = NovaMath.max1(0, this.accessor_count() - howMany);
	if (startIndex === this.accessor_count()) {
		return list;
	}
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= startIndex) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Byte.prototype.skipLast = function (howMany) {
	return this.take(this.accessor_count() - howMany);
	
};

List1Byte.prototype.skip = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Byte();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= howMany) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Byte.prototype.firstOr = function (_js_default, func) {
	var nova_local_0;
	func = typeof func === 'undefined' ? (_1) => {
		return true;
		
	} : func;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return _js_default;
	
};

List1Byte.prototype.firstOrThrow = function (e, func) {
	var nova_local_0;
	func = typeof func === 'undefined' ? (_1) => {
		return true;
		
	} : func;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	throw e;
	
};

List1Byte.prototype.firstWhere = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return 0;
	
};

List1Byte.prototype.firstNonNull = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var value;
		element = (nova_local_0 || nova_null).accessor_next();
		value = func(element);
		if ((value) != null) {
			return value;
		}
	}
	return null;
	
};

List1Byte.prototype.zip = function (other, zipper) {
	var i1;
	var i2;
	var array;
	i1 = this.accessor_iterator();
	i2 = (other || nova_null).accessor_iterator();
	array = novaConstructors.newArray();
	while ((i1 || nova_null).accessor_hasNext() && (i2 || nova_null).accessor_hasNext()) {
		(array || nova_null).add0(zipper((i1 || nova_null).accessor_next(), (i2 || nova_null).accessor_next()));
	}
	return array;
	
};

List1Byte.prototype.sum0 = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

List1Byte.prototype.sum1 = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

List1Byte.prototype.min = function (func) {
	var min;
	var i;
	var nova_local_0;
	min = NovaLong.MAX_VALUE;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		min = NovaMath.min0(min, func(element, i++, this));
	}
	return min;
	
};

List1Byte.prototype.max = function (func) {
	var max;
	var i;
	var nova_local_0;
	max = NovaLong.MAX_VALUE;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		max = NovaMath.max0(max, func(element, i++, this));
	}
	return max;
	
};

List1Byte.prototype.reduce = function (func, initialValue) {
	var value;
	var i;
	var nova_local_0;
	value = initialValue;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		value = func(value, element, i++, this);
	}
	return value;
	
};

List1Byte.prototype.join = function (delimiter) {
	var self = this;
	
	delimiter = typeof delimiter === 'undefined' ? novaConstructors.newString2("") : delimiter;
	return this.reduce((str, e, i, _4) => {
			return (str || nova_null).plus0(((i > 0 ? delimiter : novaConstructors.newString2("")) || nova_null).plus0(NovaByte.toString(e)));
			
		}, novaConstructors.newString2(""));
	
};

List1Byte.prototype.stitch = function (delimiter) {
	var self = this;
	
	delimiter = typeof delimiter === 'undefined' ? novaConstructors.newString2("") : delimiter;
	return this.reduce((str, e, _3, _4) => {
			return (str || nova_null).plus0((delimiter || nova_null).plus0(NovaByte.toString(e)));
			
		}, novaConstructors.newString2(""));
	
};

List1Byte.prototype.toEnglish = function (conjunction, oxford) {
	oxford = typeof oxford === 'undefined' ? true : oxford;
	return this.accessor_count() > 1 ? ((this.take(this.accessor_count() - 1) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(((oxford && this.accessor_count() > 2 ? novaConstructors.newString2(", ") : novaConstructors.newString2(" ")) || nova_null).plus0((((conjunction) || nova_null).plus0(novaConstructors.newString2(" ")) || nova_null).plus0(NovaByte.toString((this.skip(this.accessor_count() - 1) || nova_null).accessor_first())))) : (((NovaByte.toString(this.accessor_first()).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""));
	
};

List1Byte.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0((this.join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

List1Byte.prototype.accessor_count = function () {
	return 0;
	
};

List1Byte.prototype.mutator_count = function (value) {
	return value;
	return value;
	
};

List1Byte.prototype.accessor_iterator = function () {
	return null;
	
};

List1Byte.prototype.mutator_iterator = function (value) {
	return value;
	return value;
	
};

List1Byte.prototype.accessor_first = function () {
	return 0;
	
};

List1Byte.prototype.mutator_first = function (value) {
	return value;
	return value;
	
};

List1Byte.prototype.accessor_last = function () {
	return 0;
	
};

List1Byte.prototype.mutator_last = function (value) {
	return value;
	return value;
	
};

List1Byte.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/List"), false);
	
};

var Array1Byte = function () {
	this.capacity = 0;
	this.count = 0;
	this.position = 0;
	this.data = null;
	this.iterator = null;
	this.last = 0;
	
	
};

Array1Byte.prototype = Object.create(NovaObject.prototype);
Array1Byte.prototype.constructor = Array1Byte;


Array1Byte.prototype.destroy = function () {
	
};

Array1Byte.init = function () {
	return Array1Byte.init0.call(this, 0);
	this.increaseSize1(10);
	return this;
	
};

Array1Byte.init0 = function (count, initialCapacity) {
	initialCapacity = typeof initialCapacity === 'undefined' ? count : initialCapacity;
	this.position = 0;
	this.capacity = 0;
	this.increaseSize1(initialCapacity);
	this.mutator_count(count);
	this.data = [];
	return this;
	
};

Array1Byte.init1 = function (data, count) {
	this.data = data;
	this.mutator_count(count);
	this.capacity = count;
	this.position = count;
	return this;
	
};

Array1Byte.prototype.fillRemaining = function (value) {
	while (this.accessor_count() < this.capacity) {
		this.add0(value);
	}
	return this;
	
};

Array1Byte.prototype.plus0 = function (other) {
	return (this.clone() || nova_null).plusEquals0(other);
	
};

Array1Byte.prototype.plusEquals0 = function (other) {
	return this.addAll(other);
	
};

Array1Byte.prototype.addAll = function (data) {
	var nova_local_0;
	nova_local_0 = ((data) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		d = (nova_local_0 || nova_null).accessor_next();
		this.add0(d);
	}
	return this;
	
};

Array1Byte.prototype.addUnique = function (element) {
	if (!this.contains(element)) {
		this.add0(element);
	}
	return this;
	
};

Array1Byte.prototype.add0 = function (element) {
	if (this.position >= this.capacity) {
		this.increaseSize0();
	}
	this.data[this.position++] = element;
	this.mutator_count(NovaMath.max1(this.position, this.accessor_count()));
	return this;
	
};

Array1Byte.prototype.add1 = function (index, element) {
	if (index >= this.capacity) {
		this.increaseSize1(index + 1);
	}
	this.add0(0);
	this.shiftRight(index, this.position);
	this.data[index] = element;
	if (index >= this.position - 1) {
		this.position = index + 1;
	}
	this.mutator_count(NovaMath.max1(this.position, this.accessor_count()));
	return this;
	
};

Array1Byte.prototype.remove0 = function (index) {
	var element;
	element = this.data[index];
	this.shiftLeft(index + 1, this.position--);
	this.mutator_count(this.accessor_count() - 1);
	return element;
	
};

Array1Byte.prototype.remove1 = function (element) {
	var index;
	index = this.indexOf(element);
	if (index >= 0) {
		this.shiftLeft(index + 1, this.position--);
		this.mutator_count(this.accessor_count() - 1);
		return element;
	}
	return 0;
	
};

Array1Byte.prototype.replace = function (element, other) {
	var index;
	index = this.indexOf(element);
	if (index >= 0) {
		this.set(index, other);
		return other;
	}
	return 0;
	
};

Array1Byte.prototype.shiftRight = function (left, right) {
	var i;
	i = right - 1;
	while (i > left) {
		this.data[i] = this.data[i - 1];
		i--;
	}
	this.data[left] = (0);
	return this;
	
};

Array1Byte.prototype.shiftLeft = function (left, right) {
	var i;
	i = left;
	for (; i < right; i++) {
		this.data[i - 1] = this.data[i];
	}
	this.data[right - 1] = (0);
	return this;
	
};

Array1Byte.prototype.swap = function (index1, index2) {
	var temp;
	temp = this.data[index1];
	this.data[index1] = this.data[index2];
	this.data[index2] = temp;
	return this;
	
};

Array1Byte.prototype.increaseSize0 = function () {
	this.increaseSize1(this.capacity + 3);
	return this;
	
};

Array1Byte.prototype.increaseSize1 = function (count) {
	this.capacity = count;
	return this;
	
};

Array1Byte.prototype.cloneData = function () {
	var d;
	d = [];
	return d;
	
};

Array1Byte.prototype.clone = function () {
	return novaConstructors.newArray1Byte1(this.cloneData(), this.accessor_count());
	
};

Array1Byte.prototype.toArray = function () {
	return this.clone();
	
};

Array1Byte.prototype.map1 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

Array1Byte.prototype.forEach1 = function (func) {
	var i;
	i = 0;
	for (; i < this.accessor_count(); i++) {
		func(this.data[i], i, this);
	}
	return this;
	
};

Array1Byte.prototype.filter1 = function (filterFunc) {
	var filtered;
	var i;
	var nova_local_0;
	filtered = novaConstructors.newArray1Byte();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(element, i++, this)) {
			(filtered || nova_null).add0(element);
		}
	}
	return filtered;
	
};

Array1Byte.prototype.take = function (howMany) {
	var list;
	howMany = howMany > this.accessor_count() ? this.accessor_count() : howMany;
	list = novaConstructors.newArray1Byte();
	var i;
	i = 0;
	for (; i < howMany; i++) {
		(list || nova_null).add0(this.data[i]);
	}
	return list;
	
};

Array1Byte.prototype.skip = function (howMany) {
	var list;
	list = novaConstructors.newArray1Byte();
	var i;
	i = howMany;
	for (; i < this.accessor_count(); i++) {
		(list || nova_null).add0(this.data[i]);
	}
	return list;
	
};

Array1Byte.prototype.reverse = function () {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray1Byte0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).data[this.count - ++i] = element;
	}
	return array;
	
};

Array1Byte.prototype.mergeSort0 = function (comparator) {
	var sorted;
	sorted = this.clone();
	if (this.accessor_count() > 1) {
		var mid;
		var lefthalf;
		var righthalf;
		var l;
		var r;
		var i;
		mid = ~~(this.accessor_count() / 2);
		lefthalf = (this.take(mid) || nova_null).mergeSort0(comparator);
		righthalf = (this.skip(mid) || nova_null).mergeSort0(comparator);
		l = 0;
		r = 0;
		i = 0;
		while (l < (lefthalf || nova_null).accessor_count() && r < (righthalf || nova_null).accessor_count()) {
			if (comparator((lefthalf || nova_null).get(l), (righthalf || nova_null).get(r)) < 1) {
				(sorted || nova_null).set(i++, (lefthalf || nova_null).get(l++));
			} else {
				(sorted || nova_null).set(i++, (righthalf || nova_null).get(r++));
			}
		}
		while (l < (lefthalf || nova_null).accessor_count()) {
			(sorted || nova_null).set(i++, (lefthalf || nova_null).get(l++));
		}
		while (r < (righthalf || nova_null).accessor_count()) {
			(sorted || nova_null).set(i++, (righthalf || nova_null).get(r++));
		}
	}
	return sorted;
	
};

Array1Byte.prototype.quickSort0 = function (comparator) {
	return Array1Byte.quickSortHelper(this.clone(), 0, this.accessor_count() - 1, comparator);
	
};

Array1Byte.quickSortHelper = function (list, first, last, comparator) {
	if (first < last) {
		var mid;
		mid = Array1Byte.partition(list, first, last, comparator);
		Array1Byte.quickSortHelper(list, first, mid - 1, comparator);
		Array1Byte.quickSortHelper(list, mid + 1, last, comparator);
	}
	return list;
	
};

Array1Byte.partition = function (list, first, last, comparator) {
	var pivot;
	var l;
	var r;
	pivot = (list || nova_null).get(first);
	l = first + 1;
	r = last;
	while (l <= r) {
		while (l <= r && comparator((list || nova_null).get(l), pivot) <= 0) {
			l++;
		}
		while (l <= r && comparator((list || nova_null).get(r), pivot) >= 0) {
			r--;
		}
		if (l <= r) {
			(list || nova_null).swap(l, r);
		}
	}
	(list || nova_null).swap(first, r);
	return r;
	
};

Array1Byte.prototype.mergeSort1 = function () {
	var self = this;
	
	return this.mergeSort0((_1, _2) => {
			return ((novaConstructors.newByte(_1)) || nova_null).compareTo0(novaConstructors.newByte(_2));
			
	});
	
};

Array1Byte.prototype.quickSort1 = function () {
	var self = this;
	
	return this.quickSort0((_1, _2) => {
			return ((novaConstructors.newByte(_1)) || nova_null).compareTo0(novaConstructors.newByte(_2));
			
	});
	
};

Array1Byte.prototype.sort0 = function () {
	return this.mergeSort1();
	
};

Array1Byte.prototype.sort1 = function (comparator) {
	return this.mergeSort0(comparator);
	
};

Array1Byte.prototype.toImmutable = function () {
	return novaConstructors.newImmutableArray1Byte0(this);
	
};

Array1Byte.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).accessor_name() || nova_null).plus0(novaConstructors.newString2(" [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]"))));
	
};

Array1Byte.prototype.get = function (index) {
	return this.data[index];
	
};

Array1Byte.prototype.set = function (index, value) {
	this.data[index] = value;
	return value;
	return value;
	
};

Array1Byte.prototype.mutator_first = function (value) {
	if (this.accessor_count() > 0) {
		this.set(0, value);
	} else {
		this.add0(value);
	}
	return value;
	return value;
	
};

Array1Byte.prototype.mutator_last = function (value) {
	if (this.accessor_count() > 0) {
		this.set(this.accessor_count() - 1, value);
	} else {
		this.add0(value);
	}
	return value;
	return value;
	
};

Array1Byte.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Array"), false);
	
};

Array1Byte.prototype.accessor_count = function () {
	return this.count;
	
};

Array1Byte.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	return value;
	
};

Array1Byte.prototype.accessor_empty = function () {
	return this.accessor_count() <= 0;
	
};

Array1Byte.prototype.accessor_iterator = function () {
	return novaConstructors.newArrayIterator1Byte(this);
	
};

Array1Byte.prototype.accessor_first = function () {
	return this.accessor_count() > 0 ? this.get(0) : 0;
	
};

Array1Byte.prototype.accessor_last = function () {
	return this.accessor_count() > 0 ? this.get(this.accessor_count() - 1) : 0;
	
};

Array1Byte.prototype.super = function () {
	
};

novaConstructors.newArray1Byte = function () {
	var __value = new Array1Byte()
	NovaObject.call(__value);
	Array1Byte.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Byte.init.call(__value);
	
};

novaConstructors.newArray1Byte0 = function (count, initialCapacity) {
	var __value = new Array1Byte()
	NovaObject.call(__value);
	Array1Byte.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Byte.init0.call(__value, count, initialCapacity);
	
};

novaConstructors.newArray1Byte1 = function (data, count) {
	var __value = new Array1Byte()
	NovaObject.call(__value);
	Array1Byte.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Byte.init1.call(__value, data, count);
	
};

var OrderedList1Long = function () {
	
	
};

OrderedList1Long.prototype.constructor = OrderedList1Long;


OrderedList1Long.prototype.findIndex = function (condition, defaultReturnValue) {
	var i;
	var list;
	var nova_local_0;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = 0;
	list = this;
	nova_local_0 = ((list) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (condition(element, i++, this)) {
			return i;
		}
	}
	return defaultReturnValue;
	
};

OrderedList1Long.prototype.indexOf = function (element, defaultReturnValue) {
	var i;
	var nova_local_0;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		e = (nova_local_0 || nova_null).accessor_next();
		if (element === e) {
			return i;
		}
		i++;
	}
	return defaultReturnValue;
	
};

OrderedList1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/OrderedList"), false);
	
};

var List1Long = function () {
	this.iterator = null;
	this.last = 0;
	
	
};

List1Long.prototype.constructor = List1Long;


List1Long.prototype.toArray = function () {
	var array;
	var nova_local_0;
	array = novaConstructors.newArray1Long();
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(value);
	}
	return array;
	
};

List1Long.prototype.contains = function (value) {
	var self = this;
	
	return this.any((_1, _2, _3) => {
			return _1 === value;
			
	});
	
};

List1Long.prototype.containsAny = function (values) {
	var self = this;
	
	return this.any((_1, _2, _3) => {
			return (values || nova_null).contains(_1);
			
	});
	
};

List1Long.prototype.forEach1 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		func(value, i++, this);
	}
	return this;
	
};

List1Long.prototype.map1 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

List1Long.prototype.any = function (anyFunc) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (anyFunc(element, i++, this)) {
			return true;
		}
	}
	return false;
	
};

List1Long.prototype.all = function (allFunc, stopOnContradiction) {
	var i;
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	i = 0;
	contradiction = false;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (!allFunc(element, i++, this)) {
			if (stopOnContradiction) {
				return false;
			}
			contradiction = true;
		}
	}
	return !contradiction;
	
};

List1Long.prototype.filter1 = function (filterFunc) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Long();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(value, i++, this)) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Long.prototype.filterNot = function (filterFunc) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Long();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (!filterFunc(value, i++, this)) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Long.prototype.filterNull = function () {
	var self = this;
	
	return this.filter1((_1, _2, _3) => {
			return true;
			
	});
	
};

List1Long.prototype.take = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Long();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= howMany) {
			return list;
		}
		(list || nova_null).add0(value);
	}
	return list;
	
};

List1Long.prototype.takeLast = function (howMany) {
	var list;
	var startIndex;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Long();
	startIndex = NovaMath.max1(0, this.accessor_count() - howMany);
	if (startIndex === this.accessor_count()) {
		return list;
	}
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= startIndex) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Long.prototype.skipLast = function (howMany) {
	return this.take(this.accessor_count() - howMany);
	
};

List1Long.prototype.skip = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray1Long();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		value = (nova_local_0 || nova_null).accessor_next();
		if (i++ >= howMany) {
			(list || nova_null).add0(value);
		}
	}
	return list;
	
};

List1Long.prototype.firstOr = function (_js_default, func) {
	var nova_local_0;
	func = typeof func === 'undefined' ? (_1) => {
		return true;
		
	} : func;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return _js_default;
	
};

List1Long.prototype.firstOrThrow = function (e, func) {
	var nova_local_0;
	func = typeof func === 'undefined' ? (_1) => {
		return true;
		
	} : func;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	throw e;
	
};

List1Long.prototype.firstWhere = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return 0;
	
};

List1Long.prototype.firstNonNull = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		var value;
		element = (nova_local_0 || nova_null).accessor_next();
		value = func(element);
		if ((value) != null) {
			return value;
		}
	}
	return null;
	
};

List1Long.prototype.zip = function (other, zipper) {
	var i1;
	var i2;
	var array;
	i1 = this.accessor_iterator();
	i2 = (other || nova_null).accessor_iterator();
	array = novaConstructors.newArray();
	while ((i1 || nova_null).accessor_hasNext() && (i2 || nova_null).accessor_hasNext()) {
		(array || nova_null).add0(zipper((i1 || nova_null).accessor_next(), (i2 || nova_null).accessor_next()));
	}
	return array;
	
};

List1Long.prototype.sum0 = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

List1Long.prototype.sum1 = function (func) {
	var sum;
	var i;
	var nova_local_0;
	sum = 0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		sum += func(element, i++, this);
	}
	return sum;
	
};

List1Long.prototype.min = function (func) {
	var min;
	var i;
	var nova_local_0;
	min = NovaLong.MAX_VALUE;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		min = NovaMath.min0(min, func(element, i++, this));
	}
	return min;
	
};

List1Long.prototype.max = function (func) {
	var max;
	var i;
	var nova_local_0;
	max = NovaLong.MAX_VALUE;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		max = NovaMath.max0(max, func(element, i++, this));
	}
	return max;
	
};

List1Long.prototype.reduce = function (func, initialValue) {
	var value;
	var i;
	var nova_local_0;
	value = initialValue;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		value = func(value, element, i++, this);
	}
	return value;
	
};

List1Long.prototype.join = function (delimiter) {
	var self = this;
	
	delimiter = typeof delimiter === 'undefined' ? novaConstructors.newString2("") : delimiter;
	return this.reduce((str, e, i, _4) => {
			return (str || nova_null).plus0(((i > 0 ? delimiter : novaConstructors.newString2("")) || nova_null).plus0(NovaLong.toString(e)));
			
		}, novaConstructors.newString2(""));
	
};

List1Long.prototype.stitch = function (delimiter) {
	var self = this;
	
	delimiter = typeof delimiter === 'undefined' ? novaConstructors.newString2("") : delimiter;
	return this.reduce((str, e, _3, _4) => {
			return (str || nova_null).plus0((delimiter || nova_null).plus0(NovaLong.toString(e)));
			
		}, novaConstructors.newString2(""));
	
};

List1Long.prototype.toEnglish = function (conjunction, oxford) {
	oxford = typeof oxford === 'undefined' ? true : oxford;
	return this.accessor_count() > 1 ? ((this.take(this.accessor_count() - 1) || nova_null).join(novaConstructors.newString2(", ")) || nova_null).plus0(((oxford && this.accessor_count() > 2 ? novaConstructors.newString2(", ") : novaConstructors.newString2(" ")) || nova_null).plus0((((conjunction) || nova_null).plus0(novaConstructors.newString2(" ")) || nova_null).plus0(NovaLong.toString((this.skip(this.accessor_count() - 1) || nova_null).accessor_first())))) : (((NovaLong.toString(this.accessor_first()).plus0(novaConstructors.newString2(""))) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""));
	
};

List1Long.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).location || nova_null).plus0(novaConstructors.newString2(" {").plus0((this.join(novaConstructors.newString2(", ")) || nova_null).plus0(novaConstructors.newString2("}"))));
	
};

List1Long.prototype.accessor_count = function () {
	return 0;
	
};

List1Long.prototype.mutator_count = function (value) {
	return value;
	return value;
	
};

List1Long.prototype.accessor_iterator = function () {
	return null;
	
};

List1Long.prototype.mutator_iterator = function (value) {
	return value;
	return value;
	
};

List1Long.prototype.accessor_first = function () {
	return 0;
	
};

List1Long.prototype.mutator_first = function (value) {
	return value;
	return value;
	
};

List1Long.prototype.accessor_last = function () {
	return 0;
	
};

List1Long.prototype.mutator_last = function (value) {
	return value;
	return value;
	
};

List1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/List"), false);
	
};

var Array1Long = function () {
	this.capacity = 0;
	this.count = 0;
	this.position = 0;
	this.data = null;
	this.iterator = null;
	this.last = 0;
	
	
};

Array1Long.prototype = Object.create(NovaObject.prototype);
Array1Long.prototype.constructor = Array1Long;


Array1Long.prototype.destroy = function () {
	
};

Array1Long.init = function () {
	return Array1Long.init0.call(this, 0);
	this.increaseSize1(10);
	return this;
	
};

Array1Long.init0 = function (count, initialCapacity) {
	initialCapacity = typeof initialCapacity === 'undefined' ? count : initialCapacity;
	this.position = 0;
	this.capacity = 0;
	this.increaseSize1(initialCapacity);
	this.mutator_count(count);
	this.data = [];
	return this;
	
};

Array1Long.init1 = function (data, count) {
	this.data = data;
	this.mutator_count(count);
	this.capacity = count;
	this.position = count;
	return this;
	
};

Array1Long.prototype.fillRemaining = function (value) {
	while (this.accessor_count() < this.capacity) {
		this.add0(value);
	}
	return this;
	
};

Array1Long.prototype.plus0 = function (other) {
	return (this.clone() || nova_null).plusEquals0(other);
	
};

Array1Long.prototype.plusEquals0 = function (other) {
	return this.addAll(other);
	
};

Array1Long.prototype.addAll = function (data) {
	var nova_local_0;
	nova_local_0 = ((data) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		d = (nova_local_0 || nova_null).accessor_next();
		this.add0(d);
	}
	return this;
	
};

Array1Long.prototype.addUnique = function (element) {
	if (!this.contains(element)) {
		this.add0(element);
	}
	return this;
	
};

Array1Long.prototype.add0 = function (element) {
	if (this.position >= this.capacity) {
		this.increaseSize0();
	}
	this.data[this.position++] = element;
	this.mutator_count(NovaMath.max1(this.position, this.accessor_count()));
	return this;
	
};

Array1Long.prototype.add1 = function (index, element) {
	if (index >= this.capacity) {
		this.increaseSize1(index + 1);
	}
	this.add0(0);
	this.shiftRight(index, this.position);
	this.data[index] = element;
	if (index >= this.position - 1) {
		this.position = index + 1;
	}
	this.mutator_count(NovaMath.max1(this.position, this.accessor_count()));
	return this;
	
};

Array1Long.prototype.remove0 = function (index) {
	var element;
	element = this.data[index];
	this.shiftLeft(index + 1, this.position--);
	this.mutator_count(this.accessor_count() - 1);
	return element;
	
};

Array1Long.prototype.remove1 = function (element) {
	var index;
	index = this.indexOf(element);
	if (index >= 0) {
		this.shiftLeft(index + 1, this.position--);
		this.mutator_count(this.accessor_count() - 1);
		return element;
	}
	return 0;
	
};

Array1Long.prototype.replace = function (element, other) {
	var index;
	index = this.indexOf(element);
	if (index >= 0) {
		this.set(index, other);
		return other;
	}
	return 0;
	
};

Array1Long.prototype.shiftRight = function (left, right) {
	var i;
	i = right - 1;
	while (i > left) {
		this.data[i] = this.data[i - 1];
		i--;
	}
	this.data[left] = (0);
	return this;
	
};

Array1Long.prototype.shiftLeft = function (left, right) {
	var i;
	i = left;
	for (; i < right; i++) {
		this.data[i - 1] = this.data[i];
	}
	this.data[right - 1] = (0);
	return this;
	
};

Array1Long.prototype.swap = function (index1, index2) {
	var temp;
	temp = this.data[index1];
	this.data[index1] = this.data[index2];
	this.data[index2] = temp;
	return this;
	
};

Array1Long.prototype.increaseSize0 = function () {
	this.increaseSize1(this.capacity + 3);
	return this;
	
};

Array1Long.prototype.increaseSize1 = function (count) {
	this.capacity = count;
	return this;
	
};

Array1Long.prototype.cloneData = function () {
	var d;
	d = [];
	return d;
	
};

Array1Long.prototype.clone = function () {
	return novaConstructors.newArray1Long1(this.cloneData(), this.accessor_count());
	
};

Array1Long.prototype.toArray = function () {
	return this.clone();
	
};

Array1Long.prototype.map1 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(mapFunc(element, i++, this));
	}
	return array;
	
};

Array1Long.prototype.forEach1 = function (func) {
	var i;
	i = 0;
	for (; i < this.accessor_count(); i++) {
		func(this.data[i], i, this);
	}
	return this;
	
};

Array1Long.prototype.filter1 = function (filterFunc) {
	var filtered;
	var i;
	var nova_local_0;
	filtered = novaConstructors.newArray1Long();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(element, i++, this)) {
			(filtered || nova_null).add0(element);
		}
	}
	return filtered;
	
};

Array1Long.prototype.take = function (howMany) {
	var list;
	howMany = howMany > this.accessor_count() ? this.accessor_count() : howMany;
	list = novaConstructors.newArray1Long();
	var i;
	i = 0;
	for (; i < howMany; i++) {
		(list || nova_null).add0(this.data[i]);
	}
	return list;
	
};

Array1Long.prototype.skip = function (howMany) {
	var list;
	list = novaConstructors.newArray1Long();
	var i;
	i = howMany;
	for (; i < this.accessor_count(); i++) {
		(list || nova_null).add0(this.data[i]);
	}
	return list;
	
};

Array1Long.prototype.reverse = function () {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray1Long0(this.accessor_count());
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).data[this.count - ++i] = element;
	}
	return array;
	
};

Array1Long.prototype.mergeSort0 = function (comparator) {
	var sorted;
	sorted = this.clone();
	if (this.accessor_count() > 1) {
		var mid;
		var lefthalf;
		var righthalf;
		var l;
		var r;
		var i;
		mid = ~~(this.accessor_count() / 2);
		lefthalf = (this.take(mid) || nova_null).mergeSort0(comparator);
		righthalf = (this.skip(mid) || nova_null).mergeSort0(comparator);
		l = 0;
		r = 0;
		i = 0;
		while (l < (lefthalf || nova_null).accessor_count() && r < (righthalf || nova_null).accessor_count()) {
			if (comparator((lefthalf || nova_null).get(l), (righthalf || nova_null).get(r)) < 1) {
				(sorted || nova_null).set(i++, (lefthalf || nova_null).get(l++));
			} else {
				(sorted || nova_null).set(i++, (righthalf || nova_null).get(r++));
			}
		}
		while (l < (lefthalf || nova_null).accessor_count()) {
			(sorted || nova_null).set(i++, (lefthalf || nova_null).get(l++));
		}
		while (r < (righthalf || nova_null).accessor_count()) {
			(sorted || nova_null).set(i++, (righthalf || nova_null).get(r++));
		}
	}
	return sorted;
	
};

Array1Long.prototype.quickSort0 = function (comparator) {
	return Array1Long.quickSortHelper(this.clone(), 0, this.accessor_count() - 1, comparator);
	
};

Array1Long.quickSortHelper = function (list, first, last, comparator) {
	if (first < last) {
		var mid;
		mid = Array1Long.partition(list, first, last, comparator);
		Array1Long.quickSortHelper(list, first, mid - 1, comparator);
		Array1Long.quickSortHelper(list, mid + 1, last, comparator);
	}
	return list;
	
};

Array1Long.partition = function (list, first, last, comparator) {
	var pivot;
	var l;
	var r;
	pivot = (list || nova_null).get(first);
	l = first + 1;
	r = last;
	while (l <= r) {
		while (l <= r && comparator((list || nova_null).get(l), pivot) <= 0) {
			l++;
		}
		while (l <= r && comparator((list || nova_null).get(r), pivot) >= 0) {
			r--;
		}
		if (l <= r) {
			(list || nova_null).swap(l, r);
		}
	}
	(list || nova_null).swap(first, r);
	return r;
	
};

Array1Long.prototype.mergeSort1 = function () {
	var self = this;
	
	return this.mergeSort0((_1, _2) => {
			return ((novaConstructors.newLong(_1)) || nova_null).compareTo0(novaConstructors.newLong(_2));
			
	});
	
};

Array1Long.prototype.quickSort1 = function () {
	var self = this;
	
	return this.quickSort0((_1, _2) => {
			return ((novaConstructors.newLong(_1)) || nova_null).compareTo0(novaConstructors.newLong(_2));
			
	});
	
};

Array1Long.prototype.sort0 = function () {
	return this.mergeSort1();
	
};

Array1Long.prototype.sort1 = function (comparator) {
	return this.mergeSort0(comparator);
	
};

Array1Long.prototype.toImmutable = function () {
	return novaConstructors.newImmutableArray1Long0(this);
	
};

Array1Long.prototype.toString = function () {
	return ((this.accessor__js_class() || nova_null).accessor_name() || nova_null).plus0(novaConstructors.newString2(" [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]"))));
	
};

Array1Long.prototype.get = function (index) {
	return this.data[index];
	
};

Array1Long.prototype.set = function (index, value) {
	this.data[index] = value;
	return value;
	return value;
	
};

Array1Long.prototype.mutator_first = function (value) {
	if (this.accessor_count() > 0) {
		this.set(0, value);
	} else {
		this.add0(value);
	}
	return value;
	return value;
	
};

Array1Long.prototype.mutator_last = function (value) {
	if (this.accessor_count() > 0) {
		this.set(this.accessor_count() - 1, value);
	} else {
		this.add0(value);
	}
	return value;
	return value;
	
};

Array1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Array"), false);
	
};

Array1Long.prototype.accessor_count = function () {
	return this.count;
	
};

Array1Long.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	return value;
	
};

Array1Long.prototype.accessor_empty = function () {
	return this.accessor_count() <= 0;
	
};

Array1Long.prototype.accessor_iterator = function () {
	return novaConstructors.newArrayIterator1Long(this);
	
};

Array1Long.prototype.accessor_first = function () {
	return this.accessor_count() > 0 ? this.get(0) : 0;
	
};

Array1Long.prototype.accessor_last = function () {
	return this.accessor_count() > 0 ? this.get(this.accessor_count() - 1) : 0;
	
};

Array1Long.prototype.super = function () {
	
};

novaConstructors.newArray1Long = function () {
	var __value = new Array1Long()
	NovaObject.call(__value);
	Array1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Long.init.call(__value);
	
};

novaConstructors.newArray1Long0 = function (count, initialCapacity) {
	var __value = new Array1Long()
	NovaObject.call(__value);
	Array1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Long.init0.call(__value, count, initialCapacity);
	
};

novaConstructors.newArray1Long1 = function (data, count) {
	var __value = new Array1Long()
	NovaObject.call(__value);
	Array1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return Array1Long.init1.call(__value, data, count);
	
};

var ArrayIterator = function () {
	this.array = null;
	this.position = 0;
	this.next = null;
	
	
};

ArrayIterator.prototype = Object.create(NovaObject.prototype);
ArrayIterator.prototype.constructor = ArrayIterator;


ArrayIterator.prototype.destroy = function () {
	
};

ArrayIterator.init = function (array) {
	this.array = array;
	this.reset();
	return this;
	
};

ArrayIterator.prototype.reset = function () {
	this.position = 0;
	return this;
	
};

ArrayIterator.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

ArrayIterator.prototype.mutator_next = function () {
	
};

ArrayIterator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ArrayIterator"), false);
	
};

ArrayIterator.prototype.mutator__js_class = function () {
	
};

ArrayIterator.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

ArrayIterator.prototype.mutator_hasNext = function () {
	
};

ArrayIterator.prototype.super = function () {
	
};

novaConstructors.newArrayIterator = function (array) {
	var __value = new ArrayIterator()
	NovaObject.call(__value);
	ArrayIterator.prototype.super.apply(__value, [].slice.call(arguments));
	return ArrayIterator.init.call(__value, array);
	
};

var Iterator1Double = function () {
	this.next = 0;
	
	
};

Iterator1Double.prototype.constructor = Iterator1Double;


Iterator1Double.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Iterator"), false);
	
};

Iterator1Double.prototype.accessor_hasNext = function () {
	return false;
	
};

Iterator1Double.prototype.accessor_next = function () {
	return 0;
	
};

var ArrayIterator1Double = function () {
	this.array = null;
	this.position = 0;
	this.next = 0;
	
	
};

ArrayIterator1Double.prototype = Object.create(NovaObject.prototype);
ArrayIterator1Double.prototype.constructor = ArrayIterator1Double;


ArrayIterator1Double.prototype.destroy = function () {
	
};

ArrayIterator1Double.init = function (array) {
	this.array = array;
	this.array = array;
	this.reset();
	return this;
	
};

ArrayIterator1Double.prototype.reset = function () {
	this.position = 0;
	return this;
	
};

ArrayIterator1Double.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

ArrayIterator1Double.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ArrayIterator"), false);
	
};

ArrayIterator1Double.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

ArrayIterator1Double.prototype.super = function () {
	
};

novaConstructors.newArrayIterator1Double = function (array) {
	var __value = new ArrayIterator1Double()
	NovaObject.call(__value);
	ArrayIterator1Double.prototype.super.apply(__value, [].slice.call(arguments));
	return ArrayIterator1Double.init.call(__value, array);
	
};

var Iterator1Char = function () {
	this.next = 0;
	
	
};

Iterator1Char.prototype.constructor = Iterator1Char;


Iterator1Char.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Iterator"), false);
	
};

Iterator1Char.prototype.accessor_hasNext = function () {
	return false;
	
};

Iterator1Char.prototype.accessor_next = function () {
	return 0;
	
};

var ArrayIterator1Char = function () {
	this.array = null;
	this.position = 0;
	this.next = 0;
	
	
};

ArrayIterator1Char.prototype = Object.create(NovaObject.prototype);
ArrayIterator1Char.prototype.constructor = ArrayIterator1Char;


ArrayIterator1Char.prototype.destroy = function () {
	
};

ArrayIterator1Char.init = function (array) {
	this.array = array;
	this.array = array;
	this.reset();
	return this;
	
};

ArrayIterator1Char.prototype.reset = function () {
	this.position = 0;
	return this;
	
};

ArrayIterator1Char.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

ArrayIterator1Char.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ArrayIterator"), false);
	
};

ArrayIterator1Char.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

ArrayIterator1Char.prototype.super = function () {
	
};

novaConstructors.newArrayIterator1Char = function (array) {
	var __value = new ArrayIterator1Char()
	NovaObject.call(__value);
	ArrayIterator1Char.prototype.super.apply(__value, [].slice.call(arguments));
	return ArrayIterator1Char.init.call(__value, array);
	
};

var Iterator1Int = function () {
	this.next = 0;
	
	
};

Iterator1Int.prototype.constructor = Iterator1Int;


Iterator1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Iterator"), false);
	
};

Iterator1Int.prototype.accessor_hasNext = function () {
	return false;
	
};

Iterator1Int.prototype.accessor_next = function () {
	return 0;
	
};

var ArrayIterator1Int = function () {
	this.array = null;
	this.position = 0;
	this.next = 0;
	
	
};

ArrayIterator1Int.prototype = Object.create(NovaObject.prototype);
ArrayIterator1Int.prototype.constructor = ArrayIterator1Int;


ArrayIterator1Int.prototype.destroy = function () {
	
};

ArrayIterator1Int.init = function (array) {
	this.array = array;
	this.reset();
	return this;
	
};

ArrayIterator1Int.prototype.reset = function () {
	this.position = 0;
	return this;
	
};

ArrayIterator1Int.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

ArrayIterator1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ArrayIterator"), false);
	
};

ArrayIterator1Int.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

ArrayIterator1Int.prototype.super = function () {
	
};

novaConstructors.newArrayIterator1Int = function (array) {
	var __value = new ArrayIterator1Int()
	NovaObject.call(__value);
	ArrayIterator1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ArrayIterator1Int.init.call(__value, array);
	
};

var Iterator1Byte = function () {
	this.next = 0;
	
	
};

Iterator1Byte.prototype.constructor = Iterator1Byte;


Iterator1Byte.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Iterator"), false);
	
};

Iterator1Byte.prototype.accessor_hasNext = function () {
	return false;
	
};

Iterator1Byte.prototype.accessor_next = function () {
	return 0;
	
};

var ArrayIterator1Byte = function () {
	this.array = null;
	this.position = 0;
	this.next = 0;
	
	
};

ArrayIterator1Byte.prototype = Object.create(NovaObject.prototype);
ArrayIterator1Byte.prototype.constructor = ArrayIterator1Byte;


ArrayIterator1Byte.prototype.destroy = function () {
	
};

ArrayIterator1Byte.init = function (array) {
	this.array = array;
	this.reset();
	return this;
	
};

ArrayIterator1Byte.prototype.reset = function () {
	this.position = 0;
	return this;
	
};

ArrayIterator1Byte.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

ArrayIterator1Byte.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ArrayIterator"), false);
	
};

ArrayIterator1Byte.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

ArrayIterator1Byte.prototype.super = function () {
	
};

novaConstructors.newArrayIterator1Byte = function (array) {
	var __value = new ArrayIterator1Byte()
	NovaObject.call(__value);
	ArrayIterator1Byte.prototype.super.apply(__value, [].slice.call(arguments));
	return ArrayIterator1Byte.init.call(__value, array);
	
};

var Iterator1Long = function () {
	this.next = 0;
	
	
};

Iterator1Long.prototype.constructor = Iterator1Long;


Iterator1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Iterator"), false);
	
};

Iterator1Long.prototype.accessor_hasNext = function () {
	return false;
	
};

Iterator1Long.prototype.accessor_next = function () {
	return 0;
	
};

var ArrayIterator1Long = function () {
	this.array = null;
	this.position = 0;
	this.next = 0;
	
	
};

ArrayIterator1Long.prototype = Object.create(NovaObject.prototype);
ArrayIterator1Long.prototype.constructor = ArrayIterator1Long;


ArrayIterator1Long.prototype.destroy = function () {
	
};

ArrayIterator1Long.init = function (array) {
	this.array = array;
	this.reset();
	return this;
	
};

ArrayIterator1Long.prototype.reset = function () {
	this.position = 0;
	return this;
	
};

ArrayIterator1Long.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

ArrayIterator1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ArrayIterator"), false);
	
};

ArrayIterator1Long.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

ArrayIterator1Long.prototype.super = function () {
	
};

novaConstructors.newArrayIterator1Long = function (array) {
	var __value = new ArrayIterator1Long()
	NovaObject.call(__value);
	ArrayIterator1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return ArrayIterator1Long.init.call(__value, array);
	
};

var CharArray = function () {
	
	
};

CharArray.prototype = Object.create(NovaArray.prototype);
CharArray.prototype.constructor = CharArray;


CharArray.prototype.destroy = function () {
	
};

CharArray.init = function () {
	return this;
	
};

CharArray.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/CharArray"), false);
	
};

CharArray.prototype.mutator__js_class = function () {
	
};

CharArray.prototype.super = function () {
	
};

novaConstructors.newCharArray = function () {
	var __value = new CharArray()
	NovaArray.call(__value);
	CharArray.prototype.super.apply(__value, [].slice.call(arguments));
	return CharArray.init.call(__value);
	
};

var CharArrayIterator = function () {
	this.array = null;
	this.indexSize = 0;
	this.position = 0;
	this.next = 0;
	
	
};

CharArrayIterator.prototype = Object.create(NovaObject.prototype);
CharArrayIterator.prototype.constructor = CharArrayIterator;


CharArrayIterator.prototype.destroy = function () {
	
};

CharArrayIterator.init = function (array, indexSize) {
	this.array = array;
	this.indexSize = indexSize;
	this.reset();
	return this;
	
};

CharArrayIterator.prototype.reset = function () {
	this.position = 0;
	return this;
	
};

CharArrayIterator.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++ * this.indexSize);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

CharArrayIterator.prototype.mutator_next = function () {
	
};

CharArrayIterator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/CharArrayIterator"), false);
	
};

CharArrayIterator.prototype.mutator__js_class = function () {
	
};

CharArrayIterator.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

CharArrayIterator.prototype.mutator_hasNext = function () {
	
};

CharArrayIterator.prototype.super = function () {
	
};

novaConstructors.newCharArrayIterator = function (array, indexSize) {
	var __value = new CharArrayIterator()
	NovaObject.call(__value);
	CharArrayIterator.prototype.super.apply(__value, [].slice.call(arguments));
	return CharArrayIterator.init.call(__value, array, indexSize);
	
};

var CompiledList = function () {
	
	
};

CompiledList.prototype = Object.create(NovaObject.prototype);
CompiledList.prototype.constructor = CompiledList;


CompiledList.prototype.destroy = function () {
	
};

CompiledList.init = function () {
	return this;
	
};

CompiledList.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/CompiledList"), false);
	
};

CompiledList.prototype.mutator__js_class = function () {
	
};

CompiledList.prototype.super = function () {
	
};

novaConstructors.newCompiledList = function () {
	var __value = new CompiledList()
	NovaObject.call(__value);
	CompiledList.prototype.super.apply(__value, [].slice.call(arguments));
	return CompiledList.init.call(__value);
	
};

var DoubleArray = function () {
	
	
};

DoubleArray.prototype = Object.create(NovaArray.prototype);
DoubleArray.prototype.constructor = DoubleArray;


DoubleArray.prototype.destroy = function () {
	
};

DoubleArray.init = function () {
	return this;
	
};

DoubleArray.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/DoubleArray"), false);
	
};

DoubleArray.prototype.mutator__js_class = function () {
	
};

DoubleArray.prototype.super = function () {
	
};

novaConstructors.newDoubleArray = function () {
	var __value = new DoubleArray()
	NovaArray.call(__value);
	DoubleArray.prototype.super.apply(__value, [].slice.call(arguments));
	return DoubleArray.init.call(__value);
	
};

var DoubleArrayIterator = function () {
	this.array = null;
	this.position = 0;
	this.next = 0;
	
	
};

DoubleArrayIterator.prototype = Object.create(NovaObject.prototype);
DoubleArrayIterator.prototype.constructor = DoubleArrayIterator;


DoubleArrayIterator.prototype.destroy = function () {
	
};

DoubleArrayIterator.init = function (array) {
	this.array = array;
	this.reset();
	return this;
	
};

DoubleArrayIterator.prototype.reset = function () {
	this.position = 0;
	return this;
	
};

DoubleArrayIterator.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

DoubleArrayIterator.prototype.mutator_next = function () {
	
};

DoubleArrayIterator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/DoubleArrayIterator"), false);
	
};

DoubleArrayIterator.prototype.mutator__js_class = function () {
	
};

DoubleArrayIterator.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

DoubleArrayIterator.prototype.mutator_hasNext = function () {
	
};

DoubleArrayIterator.prototype.super = function () {
	
};

novaConstructors.newDoubleArrayIterator = function (array) {
	var __value = new DoubleArrayIterator()
	NovaObject.call(__value);
	DoubleArrayIterator.prototype.super.apply(__value, [].slice.call(arguments));
	return DoubleArrayIterator.init.call(__value, array);
	
};

var NoSuchElementException = function () {
	
	
};

NoSuchElementException.prototype = Object.create(Exception.prototype);
NoSuchElementException.prototype.constructor = NoSuchElementException;


NoSuchElementException.prototype.destroy = function () {
	
};

NoSuchElementException.init = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("No such element") : message;
	return Exception.init.call(this, message);
	return this;
	
};

NoSuchElementException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/NoSuchElementException"), false);
	
};

NoSuchElementException.prototype.mutator__js_class = function () {
	
};

NoSuchElementException.prototype.super = function () {
	
};

novaConstructors.newNoSuchElementException = function (message) {
	var __value = new NoSuchElementException()
	Exception.call(__value);
	NoSuchElementException.prototype.super.apply(__value, [].slice.call(arguments));
	return NoSuchElementException.init.call(__value, message);
	
};

var EmptyStackException = function () {
	
	
};

EmptyStackException.prototype = Object.create(NoSuchElementException.prototype);
EmptyStackException.prototype.constructor = EmptyStackException;


EmptyStackException.prototype.destroy = function () {
	
};

EmptyStackException.init = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("") : message;
	return NoSuchElementException.init.call(this, message);
	return this;
	
};

EmptyStackException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/EmptyStackException"), false);
	
};

EmptyStackException.prototype.mutator__js_class = function () {
	
};

EmptyStackException.prototype.super = function () {
	
};

novaConstructors.newEmptyStackException = function (message) {
	var __value = new EmptyStackException()
	NoSuchElementException.call(__value);
	EmptyStackException.prototype.super.apply(__value, [].slice.call(arguments));
	return EmptyStackException.init.call(__value, message);
	
};

var ImmutableArray = function () {
	this.array = null;
	this.count = 0;
	this.iterator = null;
	this.last = null;
	
	
};

ImmutableArray.prototype = Object.create(NovaObject.prototype);
ImmutableArray.prototype.constructor = ImmutableArray;


ImmutableArray.prototype.destroy = function () {
	
};

ImmutableArray.init = function () {
	return ImmutableArray.init0.call(this, novaConstructors.newArray());
	return this;
	
};

ImmutableArray.init0 = function (array) {
	return ImmutableArray.init2.call(this, array, true);
	return this;
	
};

ImmutableArray.init1 = function (array, count) {
	return ImmutableArray.init2.call(this, novaConstructors.newArray1(array, count), false);
	return this;
	
};

ImmutableArray.init2 = function (array, clone) {
	this.array = clone ? (array || nova_null).clone() : array;
	this.mutator_count((array || nova_null).accessor_count());
	return this;
	
};

ImmutableArray.prototype.indexOf = function (element) {
	return (this.array || nova_null).indexOf(element);
	
};

ImmutableArray.prototype.map0 = function (mapFunc) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).map0(mapFunc), false);
	
};

ImmutableArray.prototype.forEach0 = function (func) {
	return (this.array || nova_null).forEach0(func);
	
};

ImmutableArray.prototype.filter0 = function (filterFunc) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).filter0(filterFunc), false);
	
};

ImmutableArray.prototype.toArray = function () {
	return this.toMutable();
	
};

ImmutableArray.prototype.take = function (howMany) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).take(howMany), false);
	
};

ImmutableArray.prototype.skip = function (howMany) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).skip(howMany), false);
	
};

ImmutableArray.prototype.reverse = function () {
	return novaConstructors.newImmutableArray2((this.array || nova_null).reverse(), false);
	
};

ImmutableArray.prototype.toString = function () {
	return novaConstructors.newString2("ImmutableArray [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	
};

ImmutableArray.prototype.add0 = function (element) {
	(this.array || nova_null).add0(element);
	return novaConstructors.newImmutableArray2(this.array, false);
	
};

ImmutableArray.prototype.add1 = function (index, element) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).add1(index, element);
	return novaConstructors.newImmutableArray2(array, false);
	
};

ImmutableArray.prototype.remove0 = function (element) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).remove1(element);
	return novaConstructors.newImmutableArray2(array, false);
	
};

ImmutableArray.prototype.remove1 = function (index) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).remove0(index);
	return novaConstructors.newImmutableArray2(array, false);
	
};

ImmutableArray.prototype.toMutable = function () {
	return (this.array || nova_null).clone();
	
};

ImmutableArray.prototype.get = function (index) {
	return (this.array || nova_null).get(index);
	
};

ImmutableArray.prototype.set = function (index, value) {
	
};

ImmutableArray.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableArray"), false);
	
};

ImmutableArray.prototype.mutator__js_class = function () {
	
};

ImmutableArray.prototype.accessor_count = function () {
	return this.count;
	
};

ImmutableArray.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	
};

ImmutableArray.prototype.accessor_empty = function () {
	return this.accessor_count() === 0;
	
};

ImmutableArray.prototype.mutator_empty = function () {
	
};

ImmutableArray.prototype.accessor_iterator = function () {
	return novaConstructors.newImmutableArrayIterator(this);
	
};

ImmutableArray.prototype.mutator_iterator = function () {
	
};

ImmutableArray.prototype.accessor_first = function () {
	return (this.array || nova_null).accessor_first();
	
};

ImmutableArray.prototype.mutator_first = function (value) {
	(this.array || nova_null).mutator_first(value);
	return value;
	
};

ImmutableArray.prototype.accessor_last = function () {
	return (this.array || nova_null).accessor_last();
	
};

ImmutableArray.prototype.mutator_last = function (value) {
	(this.array || nova_null).mutator_last(value);
	return value;
	
};

ImmutableArray.prototype.super = function () {
	
};

novaConstructors.newImmutableArray = function () {
	var __value = new ImmutableArray()
	NovaObject.call(__value);
	ImmutableArray.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray.init.call(__value);
	
};

novaConstructors.newImmutableArray0 = function (array) {
	var __value = new ImmutableArray()
	NovaObject.call(__value);
	ImmutableArray.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray.init0.call(__value, array);
	
};

novaConstructors.newImmutableArray1 = function (array, count) {
	var __value = new ImmutableArray()
	NovaObject.call(__value);
	ImmutableArray.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray.init1.call(__value, array, count);
	
};

novaConstructors.newImmutableArray2 = function (array, clone) {
	var __value = new ImmutableArray()
	NovaObject.call(__value);
	ImmutableArray.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray.init2.call(__value, array, clone);
	
};

var ImmutableArray1Double = function () {
	this.array = null;
	this.count = 0;
	this.iterator = null;
	this.last = 0;
	
	
};

ImmutableArray1Double.prototype = Object.create(NovaObject.prototype);
ImmutableArray1Double.prototype.constructor = ImmutableArray1Double;


ImmutableArray1Double.prototype.destroy = function () {
	
};

ImmutableArray1Double.init = function () {
	return ImmutableArray1Double.init0.call(this, novaConstructors.newArray1Double());
	return this;
	
};

ImmutableArray1Double.init0 = function (array) {
	return ImmutableArray1Double.init2.call(this, array, true);
	return this;
	
};

ImmutableArray1Double.init1 = function (array, count) {
	return ImmutableArray1Double.init2.call(this, novaConstructors.newArray1Double1(array, count), false);
	return this;
	
};

ImmutableArray1Double.init2 = function (array, clone) {
	this.array = clone ? (array || nova_null).clone() : array;
	this.mutator_count((array || nova_null).accessor_count());
	return this;
	
};

ImmutableArray1Double.prototype.indexOf = function (element) {
	return (this.array || nova_null).indexOf(element);
	return (this.array || nova_null).indexOf(element);
	
};

ImmutableArray1Double.prototype.map4 = function (mapFunc) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).map4(mapFunc), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).map4(mapFunc), false);
	
};

ImmutableArray1Double.prototype.forEach1 = function (func) {
	return (this.array || nova_null).forEach1(func);
	return (this.array || nova_null).forEach1(func);
	
};

ImmutableArray1Double.prototype.filter = function (filterFunc) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).filter1(filterFunc), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).filter1(filterFunc), false);
	
};

ImmutableArray1Double.prototype.toArray = function () {
	return this.toMutable();
	return this.toMutable();
	
};

ImmutableArray1Double.prototype.take = function (howMany) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).take(howMany), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).take(howMany), false);
	
};

ImmutableArray1Double.prototype.skip = function (howMany) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).skip(howMany), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).skip(howMany), false);
	
};

ImmutableArray1Double.prototype.reverse = function () {
	return novaConstructors.newImmutableArray2((this.array || nova_null).reverse(), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).reverse(), false);
	
};

ImmutableArray1Double.prototype.toString = function () {
	return novaConstructors.newString2("ImmutableArray [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	return novaConstructors.newString2("ImmutableArray [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	
};

ImmutableArray1Double.prototype.add0 = function (element) {
	(this.array || nova_null).add0(element);
	return novaConstructors.newImmutableArray1Double2(this.array, false);
	
};

ImmutableArray1Double.prototype.add1 = function (index, element) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).add1(index, element);
	return novaConstructors.newImmutableArray1Double2(array, false);
	
};

ImmutableArray1Double.prototype.remove0 = function (element) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).remove1(element);
	return novaConstructors.newImmutableArray1Double2(array, false);
	
};

ImmutableArray1Double.prototype.remove1 = function (index) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).remove0(index);
	return novaConstructors.newImmutableArray1Double2(array, false);
	
};

ImmutableArray1Double.prototype.toMutable = function () {
	return (this.array || nova_null).clone();
	
};

ImmutableArray1Double.prototype.get = function (index) {
	return (this.array || nova_null).get(index);
	
};

ImmutableArray1Double.prototype.set = function (index, value) {
	
};

ImmutableArray1Double.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableArray"), false);
	
};

ImmutableArray1Double.prototype.accessor_count = function () {
	return this.count;
	
};

ImmutableArray1Double.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	return value;
	
};

ImmutableArray1Double.prototype.accessor_empty = function () {
	return this.accessor_count() === 0;
	
};

ImmutableArray1Double.prototype.accessor_iterator = function () {
	return novaConstructors.newImmutableArrayIterator1Double(this);
	
};

ImmutableArray1Double.prototype.accessor_first = function () {
	return (this.array || nova_null).accessor_first();
	
};

ImmutableArray1Double.prototype.mutator_first = function (value) {
	(this.array || nova_null).mutator_first(value);
	return value;
	return value;
	
};

ImmutableArray1Double.prototype.accessor_last = function () {
	return (this.array || nova_null).accessor_last();
	
};

ImmutableArray1Double.prototype.mutator_last = function (value) {
	(this.array || nova_null).mutator_last(value);
	return value;
	return value;
	
};

ImmutableArray1Double.prototype.super = function () {
	
};

novaConstructors.newImmutableArray1Double = function () {
	var __value = new ImmutableArray1Double()
	NovaObject.call(__value);
	ImmutableArray1Double.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Double.init.call(__value);
	
};

novaConstructors.newImmutableArray1Double0 = function (array) {
	var __value = new ImmutableArray1Double()
	NovaObject.call(__value);
	ImmutableArray1Double.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Double.init0.call(__value, array);
	
};

novaConstructors.newImmutableArray1Double1 = function (array, count) {
	var __value = new ImmutableArray1Double()
	NovaObject.call(__value);
	ImmutableArray1Double.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Double.init1.call(__value, array, count);
	
};

novaConstructors.newImmutableArray1Double2 = function (array, clone) {
	var __value = new ImmutableArray1Double()
	NovaObject.call(__value);
	ImmutableArray1Double.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Double.init2.call(__value, array, clone);
	
};

var ImmutableArray1Char = function () {
	this.array = null;
	this.count = 0;
	this.iterator = null;
	this.last = 0;
	
	
};

ImmutableArray1Char.prototype = Object.create(NovaObject.prototype);
ImmutableArray1Char.prototype.constructor = ImmutableArray1Char;


ImmutableArray1Char.prototype.destroy = function () {
	
};

ImmutableArray1Char.init = function () {
	return ImmutableArray1Char.init0.call(this, novaConstructors.newArray1Char());
	return this;
	
};

ImmutableArray1Char.init0 = function (array) {
	return ImmutableArray1Char.init2.call(this, array, true);
	return this;
	
};

ImmutableArray1Char.init1 = function (array, count) {
	return ImmutableArray1Char.init2.call(this, novaConstructors.newArray1Char1(array, count), false);
	return this;
	
};

ImmutableArray1Char.init2 = function (array, clone) {
	this.array = clone ? (array || nova_null).clone() : array;
	this.mutator_count((array || nova_null).accessor_count());
	return this;
	
};

ImmutableArray1Char.prototype.indexOf = function (element) {
	return (this.array || nova_null).indexOf(element);
	return (this.array || nova_null).indexOf(element);
	
};

ImmutableArray1Char.prototype.map1 = function (mapFunc) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).map1(mapFunc), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).map1(mapFunc), false);
	
};

ImmutableArray1Char.prototype.forEach1 = function (func) {
	return (this.array || nova_null).forEach1(func);
	return (this.array || nova_null).forEach1(func);
	
};

ImmutableArray1Char.prototype.filter = function (filterFunc) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).filter1(filterFunc), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).filter1(filterFunc), false);
	
};

ImmutableArray1Char.prototype.toArray = function () {
	return this.toMutable();
	return this.toMutable();
	
};

ImmutableArray1Char.prototype.take = function (howMany) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).take(howMany), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).take(howMany), false);
	
};

ImmutableArray1Char.prototype.skip = function (howMany) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).skip(howMany), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).skip(howMany), false);
	
};

ImmutableArray1Char.prototype.reverse = function () {
	return novaConstructors.newImmutableArray2((this.array || nova_null).reverse(), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).reverse(), false);
	
};

ImmutableArray1Char.prototype.toString = function () {
	return novaConstructors.newString2("ImmutableArray [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	return novaConstructors.newString2("ImmutableArray [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	
};

ImmutableArray1Char.prototype.add0 = function (element) {
	(this.array || nova_null).add0(element);
	return novaConstructors.newImmutableArray1Char2(this.array, false);
	
};

ImmutableArray1Char.prototype.add1 = function (index, element) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).add1(index, element);
	return novaConstructors.newImmutableArray1Char2(array, false);
	
};

ImmutableArray1Char.prototype.remove0 = function (element) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).remove1(element);
	return novaConstructors.newImmutableArray1Char2(array, false);
	
};

ImmutableArray1Char.prototype.remove1 = function (index) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).remove0(index);
	return novaConstructors.newImmutableArray1Char2(array, false);
	
};

ImmutableArray1Char.prototype.toMutable = function () {
	return (this.array || nova_null).clone();
	
};

ImmutableArray1Char.prototype.get = function (index) {
	return (this.array || nova_null).get(index);
	
};

ImmutableArray1Char.prototype.set = function (index, value) {
	
};

ImmutableArray1Char.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableArray"), false);
	
};

ImmutableArray1Char.prototype.accessor_count = function () {
	return this.count;
	
};

ImmutableArray1Char.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	return value;
	
};

ImmutableArray1Char.prototype.accessor_empty = function () {
	return this.accessor_count() === 0;
	
};

ImmutableArray1Char.prototype.accessor_iterator = function () {
	return novaConstructors.newImmutableArrayIterator1Char(this);
	
};

ImmutableArray1Char.prototype.accessor_first = function () {
	return (this.array || nova_null).accessor_first();
	
};

ImmutableArray1Char.prototype.mutator_first = function (value) {
	(this.array || nova_null).mutator_first(value);
	return value;
	return value;
	
};

ImmutableArray1Char.prototype.accessor_last = function () {
	return (this.array || nova_null).accessor_last();
	
};

ImmutableArray1Char.prototype.mutator_last = function (value) {
	(this.array || nova_null).mutator_last(value);
	return value;
	return value;
	
};

ImmutableArray1Char.prototype.super = function () {
	
};

novaConstructors.newImmutableArray1Char = function () {
	var __value = new ImmutableArray1Char()
	NovaObject.call(__value);
	ImmutableArray1Char.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Char.init.call(__value);
	
};

novaConstructors.newImmutableArray1Char0 = function (array) {
	var __value = new ImmutableArray1Char()
	NovaObject.call(__value);
	ImmutableArray1Char.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Char.init0.call(__value, array);
	
};

novaConstructors.newImmutableArray1Char1 = function (array, count) {
	var __value = new ImmutableArray1Char()
	NovaObject.call(__value);
	ImmutableArray1Char.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Char.init1.call(__value, array, count);
	
};

novaConstructors.newImmutableArray1Char2 = function (array, clone) {
	var __value = new ImmutableArray1Char()
	NovaObject.call(__value);
	ImmutableArray1Char.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Char.init2.call(__value, array, clone);
	
};

var ImmutableArray1Int = function () {
	this.array = null;
	this.count = 0;
	this.iterator = null;
	this.last = 0;
	
	
};

ImmutableArray1Int.prototype = Object.create(NovaObject.prototype);
ImmutableArray1Int.prototype.constructor = ImmutableArray1Int;


ImmutableArray1Int.prototype.destroy = function () {
	
};

ImmutableArray1Int.init = function () {
	return ImmutableArray1Int.init0.call(this, novaConstructors.newArray1Int());
	return this;
	
};

ImmutableArray1Int.init0 = function (array) {
	return ImmutableArray1Int.init2.call(this, array, true);
	return this;
	
};

ImmutableArray1Int.init1 = function (array, count) {
	return ImmutableArray1Int.init2.call(this, novaConstructors.newArray1Int1(array, count), false);
	return this;
	
};

ImmutableArray1Int.init2 = function (array, clone) {
	this.array = clone ? (array || nova_null).clone() : array;
	this.mutator_count((array || nova_null).accessor_count());
	return this;
	
};

ImmutableArray1Int.prototype.indexOf = function (element) {
	return (this.array || nova_null).indexOf(element);
	return (this.array || nova_null).indexOf(element);
	
};

ImmutableArray1Int.prototype.map1 = function (mapFunc) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).map1(mapFunc), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).map1(mapFunc), false);
	
};

ImmutableArray1Int.prototype.forEach1 = function (func) {
	return (this.array || nova_null).forEach1(func);
	return (this.array || nova_null).forEach1(func);
	
};

ImmutableArray1Int.prototype.filter = function (filterFunc) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).filter1(filterFunc), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).filter1(filterFunc), false);
	
};

ImmutableArray1Int.prototype.toArray = function () {
	return this.toMutable();
	return this.toMutable();
	
};

ImmutableArray1Int.prototype.take = function (howMany) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).take(howMany), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).take(howMany), false);
	
};

ImmutableArray1Int.prototype.skip = function (howMany) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).skip(howMany), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).skip(howMany), false);
	
};

ImmutableArray1Int.prototype.reverse = function () {
	return novaConstructors.newImmutableArray2((this.array || nova_null).reverse(), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).reverse(), false);
	
};

ImmutableArray1Int.prototype.toString = function () {
	return novaConstructors.newString2("ImmutableArray [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	return novaConstructors.newString2("ImmutableArray [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	
};

ImmutableArray1Int.prototype.add0 = function (element) {
	(this.array || nova_null).add0(element);
	return novaConstructors.newImmutableArray1Int2(this.array, false);
	
};

ImmutableArray1Int.prototype.add1 = function (index, element) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).add1(index, element);
	return novaConstructors.newImmutableArray1Int2(array, false);
	
};

ImmutableArray1Int.prototype.remove = function (element) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).remove(element);
	return novaConstructors.newImmutableArray1Int2(array, false);
	
};

ImmutableArray1Int.prototype.toMutable = function () {
	return (this.array || nova_null).clone();
	
};

ImmutableArray1Int.prototype.get = function (index) {
	return (this.array || nova_null).get(index);
	
};

ImmutableArray1Int.prototype.set = function (index, value) {
	
};

ImmutableArray1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableArray"), false);
	
};

ImmutableArray1Int.prototype.accessor_count = function () {
	return this.count;
	
};

ImmutableArray1Int.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	return value;
	
};

ImmutableArray1Int.prototype.accessor_empty = function () {
	return this.accessor_count() === 0;
	
};

ImmutableArray1Int.prototype.accessor_iterator = function () {
	return novaConstructors.newImmutableArrayIterator1Int(this);
	
};

ImmutableArray1Int.prototype.accessor_first = function () {
	return (this.array || nova_null).accessor_first();
	
};

ImmutableArray1Int.prototype.mutator_first = function (value) {
	(this.array || nova_null).mutator_first(value);
	return value;
	return value;
	
};

ImmutableArray1Int.prototype.accessor_last = function () {
	return (this.array || nova_null).accessor_last();
	
};

ImmutableArray1Int.prototype.mutator_last = function (value) {
	(this.array || nova_null).mutator_last(value);
	return value;
	return value;
	
};

ImmutableArray1Int.prototype.super = function () {
	
};

novaConstructors.newImmutableArray1Int = function () {
	var __value = new ImmutableArray1Int()
	NovaObject.call(__value);
	ImmutableArray1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Int.init.call(__value);
	
};

novaConstructors.newImmutableArray1Int0 = function (array) {
	var __value = new ImmutableArray1Int()
	NovaObject.call(__value);
	ImmutableArray1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Int.init0.call(__value, array);
	
};

novaConstructors.newImmutableArray1Int1 = function (array, count) {
	var __value = new ImmutableArray1Int()
	NovaObject.call(__value);
	ImmutableArray1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Int.init1.call(__value, array, count);
	
};

novaConstructors.newImmutableArray1Int2 = function (array, clone) {
	var __value = new ImmutableArray1Int()
	NovaObject.call(__value);
	ImmutableArray1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Int.init2.call(__value, array, clone);
	
};

var ImmutableArray1Byte = function () {
	this.array = null;
	this.count = 0;
	this.iterator = null;
	this.last = 0;
	
	
};

ImmutableArray1Byte.prototype = Object.create(NovaObject.prototype);
ImmutableArray1Byte.prototype.constructor = ImmutableArray1Byte;


ImmutableArray1Byte.prototype.destroy = function () {
	
};

ImmutableArray1Byte.init = function () {
	return ImmutableArray1Byte.init0.call(this, novaConstructors.newArray1Byte());
	return this;
	
};

ImmutableArray1Byte.init0 = function (array) {
	return ImmutableArray1Byte.init2.call(this, array, true);
	return this;
	
};

ImmutableArray1Byte.init1 = function (array, count) {
	return ImmutableArray1Byte.init2.call(this, novaConstructors.newArray1Byte1(array, count), false);
	return this;
	
};

ImmutableArray1Byte.init2 = function (array, clone) {
	this.array = clone ? (array || nova_null).clone() : array;
	this.mutator_count((array || nova_null).accessor_count());
	return this;
	
};

ImmutableArray1Byte.prototype.indexOf = function (element) {
	return (this.array || nova_null).indexOf(element);
	return (this.array || nova_null).indexOf(element);
	
};

ImmutableArray1Byte.prototype.map1 = function (mapFunc) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).map1(mapFunc), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).map1(mapFunc), false);
	
};

ImmutableArray1Byte.prototype.forEach1 = function (func) {
	return (this.array || nova_null).forEach1(func);
	return (this.array || nova_null).forEach1(func);
	
};

ImmutableArray1Byte.prototype.filter = function (filterFunc) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).filter1(filterFunc), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).filter1(filterFunc), false);
	
};

ImmutableArray1Byte.prototype.toArray = function () {
	return this.toMutable();
	return this.toMutable();
	
};

ImmutableArray1Byte.prototype.take = function (howMany) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).take(howMany), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).take(howMany), false);
	
};

ImmutableArray1Byte.prototype.skip = function (howMany) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).skip(howMany), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).skip(howMany), false);
	
};

ImmutableArray1Byte.prototype.reverse = function () {
	return novaConstructors.newImmutableArray2((this.array || nova_null).reverse(), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).reverse(), false);
	
};

ImmutableArray1Byte.prototype.toString = function () {
	return novaConstructors.newString2("ImmutableArray [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	return novaConstructors.newString2("ImmutableArray [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	
};

ImmutableArray1Byte.prototype.add0 = function (element) {
	(this.array || nova_null).add0(element);
	return novaConstructors.newImmutableArray1Byte2(this.array, false);
	
};

ImmutableArray1Byte.prototype.add1 = function (index, element) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).add1(index, element);
	return novaConstructors.newImmutableArray1Byte2(array, false);
	
};

ImmutableArray1Byte.prototype.remove0 = function (element) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).remove1(element);
	return novaConstructors.newImmutableArray1Byte2(array, false);
	
};

ImmutableArray1Byte.prototype.remove1 = function (index) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).remove0(index);
	return novaConstructors.newImmutableArray1Byte2(array, false);
	
};

ImmutableArray1Byte.prototype.toMutable = function () {
	return (this.array || nova_null).clone();
	
};

ImmutableArray1Byte.prototype.get = function (index) {
	return (this.array || nova_null).get(index);
	
};

ImmutableArray1Byte.prototype.set = function (index, value) {
	
};

ImmutableArray1Byte.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableArray"), false);
	
};

ImmutableArray1Byte.prototype.accessor_count = function () {
	return this.count;
	
};

ImmutableArray1Byte.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	return value;
	
};

ImmutableArray1Byte.prototype.accessor_empty = function () {
	return this.accessor_count() === 0;
	
};

ImmutableArray1Byte.prototype.accessor_iterator = function () {
	return novaConstructors.newImmutableArrayIterator1Byte(this);
	
};

ImmutableArray1Byte.prototype.accessor_first = function () {
	return (this.array || nova_null).accessor_first();
	
};

ImmutableArray1Byte.prototype.mutator_first = function (value) {
	(this.array || nova_null).mutator_first(value);
	return value;
	return value;
	
};

ImmutableArray1Byte.prototype.accessor_last = function () {
	return (this.array || nova_null).accessor_last();
	
};

ImmutableArray1Byte.prototype.mutator_last = function (value) {
	(this.array || nova_null).mutator_last(value);
	return value;
	return value;
	
};

ImmutableArray1Byte.prototype.super = function () {
	
};

novaConstructors.newImmutableArray1Byte = function () {
	var __value = new ImmutableArray1Byte()
	NovaObject.call(__value);
	ImmutableArray1Byte.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Byte.init.call(__value);
	
};

novaConstructors.newImmutableArray1Byte0 = function (array) {
	var __value = new ImmutableArray1Byte()
	NovaObject.call(__value);
	ImmutableArray1Byte.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Byte.init0.call(__value, array);
	
};

novaConstructors.newImmutableArray1Byte1 = function (array, count) {
	var __value = new ImmutableArray1Byte()
	NovaObject.call(__value);
	ImmutableArray1Byte.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Byte.init1.call(__value, array, count);
	
};

novaConstructors.newImmutableArray1Byte2 = function (array, clone) {
	var __value = new ImmutableArray1Byte()
	NovaObject.call(__value);
	ImmutableArray1Byte.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Byte.init2.call(__value, array, clone);
	
};

var ImmutableArray1Long = function () {
	this.array = null;
	this.count = 0;
	this.iterator = null;
	this.last = 0;
	
	
};

ImmutableArray1Long.prototype = Object.create(NovaObject.prototype);
ImmutableArray1Long.prototype.constructor = ImmutableArray1Long;


ImmutableArray1Long.prototype.destroy = function () {
	
};

ImmutableArray1Long.init = function () {
	return ImmutableArray1Long.init0.call(this, novaConstructors.newArray1Long());
	return this;
	
};

ImmutableArray1Long.init0 = function (array) {
	return ImmutableArray1Long.init2.call(this, array, true);
	return this;
	
};

ImmutableArray1Long.init1 = function (array, count) {
	return ImmutableArray1Long.init2.call(this, novaConstructors.newArray1Long1(array, count), false);
	return this;
	
};

ImmutableArray1Long.init2 = function (array, clone) {
	this.array = clone ? (array || nova_null).clone() : array;
	this.mutator_count((array || nova_null).accessor_count());
	return this;
	
};

ImmutableArray1Long.prototype.indexOf = function (element) {
	return (this.array || nova_null).indexOf(element);
	return (this.array || nova_null).indexOf(element);
	
};

ImmutableArray1Long.prototype.map1 = function (mapFunc) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).map1(mapFunc), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).map1(mapFunc), false);
	
};

ImmutableArray1Long.prototype.forEach1 = function (func) {
	return (this.array || nova_null).forEach1(func);
	return (this.array || nova_null).forEach1(func);
	
};

ImmutableArray1Long.prototype.filter = function (filterFunc) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).filter1(filterFunc), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).filter1(filterFunc), false);
	
};

ImmutableArray1Long.prototype.toArray = function () {
	return this.toMutable();
	return this.toMutable();
	
};

ImmutableArray1Long.prototype.take = function (howMany) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).take(howMany), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).take(howMany), false);
	
};

ImmutableArray1Long.prototype.skip = function (howMany) {
	return novaConstructors.newImmutableArray2((this.array || nova_null).skip(howMany), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).skip(howMany), false);
	
};

ImmutableArray1Long.prototype.reverse = function () {
	return novaConstructors.newImmutableArray2((this.array || nova_null).reverse(), false);
	return novaConstructors.newImmutableArray2((this.array || nova_null).reverse(), false);
	
};

ImmutableArray1Long.prototype.toString = function () {
	return novaConstructors.newString2("ImmutableArray [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	return novaConstructors.newString2("ImmutableArray [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	
};

ImmutableArray1Long.prototype.add0 = function (element) {
	(this.array || nova_null).add0(element);
	return novaConstructors.newImmutableArray1Long2(this.array, false);
	
};

ImmutableArray1Long.prototype.add1 = function (index, element) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).add1(index, element);
	return novaConstructors.newImmutableArray1Long2(array, false);
	
};

ImmutableArray1Long.prototype.remove0 = function (element) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).remove1(element);
	return novaConstructors.newImmutableArray1Long2(array, false);
	
};

ImmutableArray1Long.prototype.remove1 = function (index) {
	var array;
	array = (this.array || nova_null).clone();
	(array || nova_null).remove0(index);
	return novaConstructors.newImmutableArray1Long2(array, false);
	
};

ImmutableArray1Long.prototype.toMutable = function () {
	return (this.array || nova_null).clone();
	
};

ImmutableArray1Long.prototype.get = function (index) {
	return (this.array || nova_null).get(index);
	
};

ImmutableArray1Long.prototype.set = function (index, value) {
	
};

ImmutableArray1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableArray"), false);
	
};

ImmutableArray1Long.prototype.accessor_count = function () {
	return this.count;
	
};

ImmutableArray1Long.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	return value;
	
};

ImmutableArray1Long.prototype.accessor_empty = function () {
	return this.accessor_count() === 0;
	
};

ImmutableArray1Long.prototype.accessor_iterator = function () {
	return novaConstructors.newImmutableArrayIterator1Long(this);
	
};

ImmutableArray1Long.prototype.accessor_first = function () {
	return (this.array || nova_null).accessor_first();
	
};

ImmutableArray1Long.prototype.mutator_first = function (value) {
	(this.array || nova_null).mutator_first(value);
	return value;
	return value;
	
};

ImmutableArray1Long.prototype.accessor_last = function () {
	return (this.array || nova_null).accessor_last();
	
};

ImmutableArray1Long.prototype.mutator_last = function (value) {
	(this.array || nova_null).mutator_last(value);
	return value;
	return value;
	
};

ImmutableArray1Long.prototype.super = function () {
	
};

novaConstructors.newImmutableArray1Long = function () {
	var __value = new ImmutableArray1Long()
	NovaObject.call(__value);
	ImmutableArray1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Long.init.call(__value);
	
};

novaConstructors.newImmutableArray1Long0 = function (array) {
	var __value = new ImmutableArray1Long()
	NovaObject.call(__value);
	ImmutableArray1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Long.init0.call(__value, array);
	
};

novaConstructors.newImmutableArray1Long1 = function (array, count) {
	var __value = new ImmutableArray1Long()
	NovaObject.call(__value);
	ImmutableArray1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Long.init1.call(__value, array, count);
	
};

novaConstructors.newImmutableArray1Long2 = function (array, clone) {
	var __value = new ImmutableArray1Long()
	NovaObject.call(__value);
	ImmutableArray1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArray1Long.init2.call(__value, array, clone);
	
};

var ImmutableArrayIterator = function () {
	this.array = null;
	this.position = 0;
	this.next = null;
	
	
};

ImmutableArrayIterator.prototype = Object.create(NovaObject.prototype);
ImmutableArrayIterator.prototype.constructor = ImmutableArrayIterator;


ImmutableArrayIterator.prototype.destroy = function () {
	
};

ImmutableArrayIterator.init = function (array) {
	this.array = array;
	this.reset();
	return this;
	
};

ImmutableArrayIterator.prototype.reset = function () {
	this.position = 0;
	return this;
	
};

ImmutableArrayIterator.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

ImmutableArrayIterator.prototype.mutator_next = function () {
	
};

ImmutableArrayIterator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableArrayIterator"), false);
	
};

ImmutableArrayIterator.prototype.mutator__js_class = function () {
	
};

ImmutableArrayIterator.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

ImmutableArrayIterator.prototype.mutator_hasNext = function () {
	
};

ImmutableArrayIterator.prototype.super = function () {
	
};

novaConstructors.newImmutableArrayIterator = function (array) {
	var __value = new ImmutableArrayIterator()
	NovaObject.call(__value);
	ImmutableArrayIterator.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArrayIterator.init.call(__value, array);
	
};

var ImmutableArrayIterator1Double = function () {
	this.array = null;
	this.position = 0;
	this.next = 0;
	
	
};

ImmutableArrayIterator1Double.prototype = Object.create(NovaObject.prototype);
ImmutableArrayIterator1Double.prototype.constructor = ImmutableArrayIterator1Double;


ImmutableArrayIterator1Double.prototype.destroy = function () {
	
};

ImmutableArrayIterator1Double.init = function (array) {
	this.array = array;
	this.reset();
	return this;
	
};

ImmutableArrayIterator1Double.prototype.reset = function () {
	return this;
	this.position = 0;
	return this;
	
};

ImmutableArrayIterator1Double.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

ImmutableArrayIterator1Double.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableArrayIterator"), false);
	
};

ImmutableArrayIterator1Double.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

ImmutableArrayIterator1Double.prototype.super = function () {
	
};

novaConstructors.newImmutableArrayIterator1Double = function (array) {
	var __value = new ImmutableArrayIterator1Double()
	NovaObject.call(__value);
	ImmutableArrayIterator1Double.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArrayIterator1Double.init.call(__value, array);
	
};

var ImmutableArrayIterator1Char = function () {
	this.array = null;
	this.position = 0;
	this.next = 0;
	
	
};

ImmutableArrayIterator1Char.prototype = Object.create(NovaObject.prototype);
ImmutableArrayIterator1Char.prototype.constructor = ImmutableArrayIterator1Char;


ImmutableArrayIterator1Char.prototype.destroy = function () {
	
};

ImmutableArrayIterator1Char.init = function (array) {
	this.array = array;
	this.reset();
	return this;
	
};

ImmutableArrayIterator1Char.prototype.reset = function () {
	return this;
	this.position = 0;
	return this;
	
};

ImmutableArrayIterator1Char.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

ImmutableArrayIterator1Char.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableArrayIterator"), false);
	
};

ImmutableArrayIterator1Char.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

ImmutableArrayIterator1Char.prototype.super = function () {
	
};

novaConstructors.newImmutableArrayIterator1Char = function (array) {
	var __value = new ImmutableArrayIterator1Char()
	NovaObject.call(__value);
	ImmutableArrayIterator1Char.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArrayIterator1Char.init.call(__value, array);
	
};

var ImmutableArrayIterator1Int = function () {
	this.array = null;
	this.position = 0;
	this.next = 0;
	
	
};

ImmutableArrayIterator1Int.prototype = Object.create(NovaObject.prototype);
ImmutableArrayIterator1Int.prototype.constructor = ImmutableArrayIterator1Int;


ImmutableArrayIterator1Int.prototype.destroy = function () {
	
};

ImmutableArrayIterator1Int.init = function (array) {
	this.array = array;
	this.reset();
	return this;
	
};

ImmutableArrayIterator1Int.prototype.reset = function () {
	return this;
	this.position = 0;
	return this;
	
};

ImmutableArrayIterator1Int.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

ImmutableArrayIterator1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableArrayIterator"), false);
	
};

ImmutableArrayIterator1Int.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

ImmutableArrayIterator1Int.prototype.super = function () {
	
};

novaConstructors.newImmutableArrayIterator1Int = function (array) {
	var __value = new ImmutableArrayIterator1Int()
	NovaObject.call(__value);
	ImmutableArrayIterator1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArrayIterator1Int.init.call(__value, array);
	
};

var ImmutableArrayIterator1Byte = function () {
	this.array = null;
	this.position = 0;
	this.next = 0;
	
	
};

ImmutableArrayIterator1Byte.prototype = Object.create(NovaObject.prototype);
ImmutableArrayIterator1Byte.prototype.constructor = ImmutableArrayIterator1Byte;


ImmutableArrayIterator1Byte.prototype.destroy = function () {
	
};

ImmutableArrayIterator1Byte.init = function (array) {
	this.array = array;
	this.reset();
	return this;
	
};

ImmutableArrayIterator1Byte.prototype.reset = function () {
	return this;
	this.position = 0;
	return this;
	
};

ImmutableArrayIterator1Byte.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

ImmutableArrayIterator1Byte.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableArrayIterator"), false);
	
};

ImmutableArrayIterator1Byte.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

ImmutableArrayIterator1Byte.prototype.super = function () {
	
};

novaConstructors.newImmutableArrayIterator1Byte = function (array) {
	var __value = new ImmutableArrayIterator1Byte()
	NovaObject.call(__value);
	ImmutableArrayIterator1Byte.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArrayIterator1Byte.init.call(__value, array);
	
};

var ImmutableArrayIterator1Long = function () {
	this.array = null;
	this.position = 0;
	this.next = 0;
	
	
};

ImmutableArrayIterator1Long.prototype = Object.create(NovaObject.prototype);
ImmutableArrayIterator1Long.prototype.constructor = ImmutableArrayIterator1Long;


ImmutableArrayIterator1Long.prototype.destroy = function () {
	
};

ImmutableArrayIterator1Long.init = function (array) {
	this.array = array;
	this.reset();
	return this;
	
};

ImmutableArrayIterator1Long.prototype.reset = function () {
	return this;
	this.position = 0;
	return this;
	
};

ImmutableArrayIterator1Long.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

ImmutableArrayIterator1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableArrayIterator"), false);
	
};

ImmutableArrayIterator1Long.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

ImmutableArrayIterator1Long.prototype.super = function () {
	
};

novaConstructors.newImmutableArrayIterator1Long = function (array) {
	var __value = new ImmutableArrayIterator1Long()
	NovaObject.call(__value);
	ImmutableArrayIterator1Long.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableArrayIterator1Long.init.call(__value, array);
	
};

var ImmutableCharArray = function () {
	
	
};

ImmutableCharArray.prototype = Object.create(NovaObject.prototype);
ImmutableCharArray.prototype.constructor = ImmutableCharArray;


ImmutableCharArray.prototype.destroy = function () {
	
};

ImmutableCharArray.init = function () {
	return this;
	
};

ImmutableCharArray.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableCharArray"), false);
	
};

ImmutableCharArray.prototype.mutator__js_class = function () {
	
};

ImmutableCharArray.prototype.super = function () {
	
};

novaConstructors.newImmutableCharArray = function () {
	var __value = new ImmutableCharArray()
	NovaObject.call(__value);
	ImmutableCharArray.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableCharArray.init.call(__value);
	
};

var ImmutableCharArrayIterator = function () {
	
	
};

ImmutableCharArrayIterator.prototype = Object.create(NovaObject.prototype);
ImmutableCharArrayIterator.prototype.constructor = ImmutableCharArrayIterator;


ImmutableCharArrayIterator.prototype.destroy = function () {
	
};

ImmutableCharArrayIterator.init = function () {
	return this;
	
};

ImmutableCharArrayIterator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ImmutableCharArrayIterator"), false);
	
};

ImmutableCharArrayIterator.prototype.mutator__js_class = function () {
	
};

ImmutableCharArrayIterator.prototype.super = function () {
	
};

novaConstructors.newImmutableCharArrayIterator = function () {
	var __value = new ImmutableCharArrayIterator()
	NovaObject.call(__value);
	ImmutableCharArrayIterator.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableCharArrayIterator.init.call(__value);
	
};

var IntArray = function () {
	
	
};

IntArray.prototype = Object.create(NovaArray.prototype);
IntArray.prototype.constructor = IntArray;


IntArray.prototype.destroy = function () {
	
};

IntArray.init = function () {
	return this;
	
};

IntArray.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/IntArray"), false);
	
};

IntArray.prototype.mutator__js_class = function () {
	
};

IntArray.prototype.super = function () {
	
};

novaConstructors.newIntArray = function () {
	var __value = new IntArray()
	NovaArray.call(__value);
	IntArray.prototype.super.apply(__value, [].slice.call(arguments));
	return IntArray.init.call(__value);
	
};

var IntArrayIterator = function () {
	this.array = null;
	this.position = 0;
	this.next = 0;
	
	
};

IntArrayIterator.prototype = Object.create(NovaObject.prototype);
IntArrayIterator.prototype.constructor = IntArrayIterator;


IntArrayIterator.prototype.destroy = function () {
	
};

IntArrayIterator.init = function (array) {
	this.array = array;
	this.reset();
	return this;
	
};

IntArrayIterator.prototype.reset = function () {
	this.position = 0;
	return this;
	
};

IntArrayIterator.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return (this.array || nova_null).get(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

IntArrayIterator.prototype.mutator_next = function () {
	
};

IntArrayIterator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/IntArrayIterator"), false);
	
};

IntArrayIterator.prototype.mutator__js_class = function () {
	
};

IntArrayIterator.prototype.accessor_hasNext = function () {
	return (this.array || nova_null).accessor_count() > this.position;
	
};

IntArrayIterator.prototype.mutator_hasNext = function () {
	
};

IntArrayIterator.prototype.super = function () {
	
};

novaConstructors.newIntArrayIterator = function (array) {
	var __value = new IntArrayIterator()
	NovaObject.call(__value);
	IntArrayIterator.prototype.super.apply(__value, [].slice.call(arguments));
	return IntArrayIterator.init.call(__value, array);
	
};

var IntRange = function () {
	this.iterator = null;
	this.last = 0;
	this.start = 0;
	this.end = 0;
	this.count = 0;
	
	
};

IntRange.prototype = Object.create(NovaObject.prototype);
IntRange.prototype.constructor = IntRange;


IntRange.prototype.destroy = function () {
	
};

IntRange.init = function () {
	return IntRange.init0.call(this, 0, 0);
	return this;
	
};

IntRange.init0 = function (start, end) {
	this.start = start;
	this.end = end;
	return this;
	
};

IntRange.prototype.contains0 = function (value) {
	return ((value) || nova_null).value >= this.start && ((value) || nova_null).value < this.end;
	
};

IntRange.prototype.toArray = function () {
	var ints;
	var i;
	ints = novaConstructors.newArray1Int0(this.accessor_size());
	i = this.start;
	while (i < this.end) {
		(ints || nova_null).set(i - this.start, i++);
	}
	return ints;
	
};

IntRange.prototype.reverse = function () {
	return novaConstructors.newIntRange0(this.end, this.start);
	
};

IntRange.prototype.toString = function () {
	return NovaInt.toString((this.start)).plus0(novaConstructors.newString2("..").plus0(NovaInt.toString((this.end)).plus0(novaConstructors.newString2(""))));
	
};

IntRange.prototype.mutator_last = function (value) {
	this.end = (((value || nova_null).plus0(novaConstructors.newByte(1))) || nova_null).value;
	return value;
	
};

IntRange.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/IntRange"), false);
	
};

IntRange.prototype.mutator__js_class = function () {
	
};

IntRange.prototype.accessor_size = function () {
	return this.end - this.start;
	
};

IntRange.prototype.mutator_size = function () {
	
};

IntRange.prototype.accessor_iterator = function () {
	return novaConstructors.newIntRangeIterator(this);
	
};

IntRange.prototype.mutator_iterator = function () {
	
};

IntRange.prototype.accessor_first = function () {
	return novaConstructors.newInt(this.start);
	
};

IntRange.prototype.mutator_first = function (value) {
	this.start = ((value) || nova_null).value;
	return value;
	
};

IntRange.prototype.accessor_last = function () {
	return novaConstructors.newInt(this.end - 1);
	
};

IntRange.prototype.accessor_count = function () {
	return this.count;
	
};

IntRange.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	
};

IntRange.prototype.super = function () {
	
};

novaConstructors.newIntRange = function () {
	var __value = new IntRange()
	NovaObject.call(__value);
	IntRange.prototype.super.apply(__value, [].slice.call(arguments));
	return IntRange.init.call(__value);
	
};

novaConstructors.newIntRange0 = function (start, end) {
	var __value = new IntRange()
	NovaObject.call(__value);
	IntRange.prototype.super.apply(__value, [].slice.call(arguments));
	return IntRange.init0.call(__value, start, end);
	
};

var IntRangeIterator = function () {
	this.range = null;
	this.position = 0;
	this.next = 0;
	
	
};

IntRangeIterator.prototype = Object.create(NovaObject.prototype);
IntRangeIterator.prototype.constructor = IntRangeIterator;


IntRangeIterator.prototype.destroy = function () {
	
};

IntRangeIterator.init = function (range) {
	this.range = range;
	this.reset();
	return this;
	
};

IntRangeIterator.prototype.reset = function () {
	this.position = (this.range || nova_null).start;
	return this;
	
};

IntRangeIterator.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		return novaConstructors.newInt(this.position++);
	}
	throw novaConstructors.newNoSuchElementException();
	
};

IntRangeIterator.prototype.mutator_next = function () {
	
};

IntRangeIterator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/IntRangeIterator"), false);
	
};

IntRangeIterator.prototype.mutator__js_class = function () {
	
};

IntRangeIterator.prototype.accessor_hasNext = function () {
	return this.position < (this.range || nova_null).end;
	
};

IntRangeIterator.prototype.mutator_hasNext = function () {
	
};

IntRangeIterator.prototype.super = function () {
	
};

novaConstructors.newIntRangeIterator = function (range) {
	var __value = new IntRangeIterator()
	NovaObject.call(__value);
	IntRangeIterator.prototype.super.apply(__value, [].slice.call(arguments));
	return IntRangeIterator.init.call(__value, range);
	
};

var Iterable = function () {
	this._js_class = null;
	
	
};

Iterable.prototype.constructor = Iterable;


Iterable.prototype.accessor_iterator = function () {
	return null;
	
};

Iterable.prototype.mutator_iterator = function (value) {
	return value;
	
};

Iterable.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Iterable"), false);
	
};

Iterable.prototype.mutator__js_class = function () {
	
};

var Iterable1Double = function () {
	this._js_class = null;
	
	
};

Iterable1Double.prototype.constructor = Iterable1Double;


Iterable1Double.prototype.accessor_iterator = function () {
	return null;
	
};

Iterable1Double.prototype.mutator_iterator = function (value) {
	return value;
	return value;
	
};

Iterable1Double.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Iterable"), false);
	
};

var Iterable1Char = function () {
	this._js_class = null;
	
	
};

Iterable1Char.prototype.constructor = Iterable1Char;


Iterable1Char.prototype.accessor_iterator = function () {
	return null;
	
};

Iterable1Char.prototype.mutator_iterator = function (value) {
	return value;
	return value;
	
};

Iterable1Char.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Iterable"), false);
	
};

var Iterable1Int = function () {
	this._js_class = null;
	
	
};

Iterable1Int.prototype.constructor = Iterable1Int;


Iterable1Int.prototype.accessor_iterator = function () {
	return null;
	
};

Iterable1Int.prototype.mutator_iterator = function (value) {
	return value;
	return value;
	
};

Iterable1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Iterable"), false);
	
};

var Iterable1Byte = function () {
	this._js_class = null;
	
	
};

Iterable1Byte.prototype.constructor = Iterable1Byte;


Iterable1Byte.prototype.accessor_iterator = function () {
	return null;
	
};

Iterable1Byte.prototype.mutator_iterator = function (value) {
	return value;
	return value;
	
};

Iterable1Byte.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Iterable"), false);
	
};

var Iterable1Long = function () {
	this._js_class = null;
	
	
};

Iterable1Long.prototype.constructor = Iterable1Long;


Iterable1Long.prototype.accessor_iterator = function () {
	return null;
	
};

Iterable1Long.prototype.mutator_iterator = function (value) {
	return value;
	return value;
	
};

Iterable1Long.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Iterable"), false);
	
};

var LinkedList = function () {
	this.start = null;
	this.current = null;
	this.size = 0;
	this.first = null;
	this._js_class = null;
	this.count = 0;
	
	
};

LinkedList.prototype = Object.create(NovaObject.prototype);
LinkedList.prototype.constructor = LinkedList;


LinkedList.prototype.destroy = function () {
	
};

LinkedList.prototype.addAll = function (data) {
	var nova_local_0;
	nova_local_0 = ((data) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		d = (nova_local_0 || nova_null).accessor_next();
		this.add(d);
	}
	return this;
	
};

LinkedList.prototype.add = function (data) {
	var node;
	node = novaConstructors.newListNode(data);
	if ((this.start) != null) {
		(this.current || nova_null).next = node;
	} else {
		this.start = node;
		this.current = node;
	}
	this.current = node;
	this.size++;
	return this;
	
};

LinkedList.prototype.remove = function (data) {
	var prev;
	var cur;
	if ((this.start || nova_null).data === data) {
		this.start = (this.start || nova_null).next;
	}
	prev = this.start;
	cur = (this.start || nova_null).next;
	while ((cur) != null) {
		var d;
		d = (cur || nova_null).data;
		if (d === data) {
			(prev || nova_null).next = (cur || nova_null).next;
			this.size--;
		}
		cur = (cur || nova_null).next;
	}
	return this;
	
};

LinkedList.prototype.contains0 = function (value) {
	var self = this;
	
	return this.any0((_1) => {
			return _1 === value;
			
	});
	
};

LinkedList.prototype.toArray = function () {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newArray0(this.size);
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).set0(i++, element);
	}
	return array;
	
};

LinkedList.prototype.map0 = function (mapFunc) {
	var array;
	var i;
	var nova_local_0;
	array = novaConstructors.newLinkedList();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add(mapFunc(element, i++, this));
	}
	return array;
	
};

LinkedList.prototype.forEach0 = function (func) {
	var i;
	var nova_local_0;
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		func(element, i++, this);
	}
	return this;
	
};

LinkedList.prototype.any0 = function (anyFunc) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (anyFunc(element)) {
			return true;
		}
	}
	return false;
	
};

LinkedList.prototype.all0 = function (allFunc, stopOnContradiction) {
	var contradiction;
	var nova_local_0;
	stopOnContradiction = typeof stopOnContradiction === 'undefined' ? true : stopOnContradiction;
	contradiction = false;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (!allFunc(element)) {
			if (stopOnContradiction) {
				return false;
			}
			contradiction = true;
		}
	}
	return !contradiction;
	
};

LinkedList.prototype.filter0 = function (filterFunc) {
	var filtered;
	var i;
	var nova_local_0;
	filtered = novaConstructors.newLinkedList();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (filterFunc(element, i++, this)) {
			(filtered || nova_null).add(element);
		}
	}
	return filtered;
	
};

LinkedList.prototype.take = function (howMany) {
	var list;
	var nova_local_0;
	if (howMany > this.size) {
		howMany = this.size;
	}
	list = novaConstructors.newLinkedList();
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if ((list || nova_null).size === howMany) {
			break;
		}
		(list || nova_null).add(element);
	}
	return list;
	
};

LinkedList.prototype.skip = function (howMany) {
	var list;
	var i;
	var nova_local_0;
	list = novaConstructors.newArray();
	i = 0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (i++ > howMany) {
			(list || nova_null).add0(element);
		}
	}
	return list;
	
};

LinkedList.prototype.firstWhere0 = function (func) {
	var nova_local_0;
	nova_local_0 = ((this) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		element = (nova_local_0 || nova_null).accessor_next();
		if (func(element)) {
			return element;
		}
	}
	return null;
	
};

LinkedList.prototype.reverse = function () {
	var list;
	var prev;
	var current;
	var next;
	list = novaConstructors.newLinkedList();
	prev = null;
	current = null;
	next = null;
	if ((this.start) != null) {
		current = (this.start || nova_null).clone();
	}
	while ((current) != null) {
		next = (current || nova_null).next;
		(current || nova_null).next = null;
		if ((next) != null) {
			next = (next || nova_null).clone();
		}
		if ((prev) != null) {
			(current || nova_null).next = (prev || nova_null).clone();
		}
		prev = current;
		current = next;
	}
	(list || nova_null).start = prev;
	return list;
	
};

LinkedList.init = function () {
	return this;
	
};

LinkedList.prototype.mutator_first = function (value) {
	(value || nova_null).next = this.start;
	this.start = value;
	return value;
	
};

LinkedList.prototype.mutator_last = function (value) {
	(this.current || nova_null).next = value;
	this.current = value;
	return value;
	
};

LinkedList.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/LinkedList"), false);
	
};

LinkedList.prototype.mutator__js_class = function () {
	
};

LinkedList.prototype.accessor_iterator = function () {
	return novaConstructors.newLinkedListIterator(this);
	
};

LinkedList.prototype.mutator_iterator = function () {
	
};

LinkedList.prototype.accessor_first = function () {
	return this.start;
	
};

LinkedList.prototype.accessor_last = function () {
	return this.current;
	
};

LinkedList.prototype.accessor_count = function () {
	return this.count;
	
};

LinkedList.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	
};

LinkedList.prototype.super = function () {
	
};

novaConstructors.newLinkedList = function () {
	var __value = new LinkedList()
	NovaObject.call(__value);
	LinkedList.prototype.super.apply(__value, [].slice.call(arguments));
	return LinkedList.init.call(__value);
	
};

var LinkedListIterator = function () {
	this.list = null;
	this.position = null;
	this.next = null;
	
	
};

LinkedListIterator.prototype = Object.create(NovaObject.prototype);
LinkedListIterator.prototype.constructor = LinkedListIterator;


LinkedListIterator.prototype.destroy = function () {
	
};

LinkedListIterator.init = function (list) {
	this.list = list;
	this.reset();
	return this;
	
};

LinkedListIterator.prototype.reset = function () {
	this.position = (this.list || nova_null).accessor_first();
	return this;
	
};

LinkedListIterator.prototype.accessor_next = function () {
	if (this.accessor_hasNext()) {
		var data;
		data = (this.position || nova_null).data;
		this.position = (this.position || nova_null).next;
		return data;
	}
	throw novaConstructors.newNoSuchElementException();
	
};

LinkedListIterator.prototype.mutator_next = function () {
	
};

LinkedListIterator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/LinkedListIterator"), false);
	
};

LinkedListIterator.prototype.mutator__js_class = function () {
	
};

LinkedListIterator.prototype.accessor_hasNext = function () {
	return this.position != null;
	
};

LinkedListIterator.prototype.mutator_hasNext = function () {
	
};

LinkedListIterator.prototype.super = function () {
	
};

novaConstructors.newLinkedListIterator = function (list) {
	var __value = new LinkedListIterator()
	NovaObject.call(__value);
	LinkedListIterator.prototype.super.apply(__value, [].slice.call(arguments));
	return LinkedListIterator.init.call(__value, list);
	
};

var ListNode = function () {
	this.data = null;
	this.next = null;
	
	
};

ListNode.prototype = Object.create(NovaObject.prototype);
ListNode.prototype.constructor = ListNode;


ListNode.prototype.destroy = function () {
	
};

ListNode.init = function (data, next) {
	next = typeof next === 'undefined' ? null : next;
	this.data = data;
	this.next = next;
	return this;
	
};

ListNode.prototype.clone = function () {
	return novaConstructors.newListNode(this.data, this.next);
	
};

ListNode.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/ListNode"), false);
	
};

ListNode.prototype.mutator__js_class = function () {
	
};

ListNode.prototype.super = function () {
	
};

novaConstructors.newListNode = function (data, next) {
	var __value = new ListNode()
	NovaObject.call(__value);
	ListNode.prototype.super.apply(__value, [].slice.call(arguments));
	return ListNode.init.call(__value, data, next);
	
};

var Queue = function () {
	this.data = null;
	this.empty = 0;
	this._js_class = null;
	this.count = 0;
	this.first = null;
	this.last = null;
	
	
};

Queue.prototype = Object.create(NovaObject.prototype);
Queue.prototype.constructor = Queue;


Queue.prototype.destroy = function () {
	
};

Queue.init = function () {
	this.data = novaConstructors.newArray();
	return this;
	
};

Queue.init0 = function (data) {
	this.data = data;
	return this;
	
};

Queue.prototype.dequeue = function () {
	return (this.data || nova_null).remove0(0);
	
};

Queue.prototype.enqueue = function (element) {
	return (this.data || nova_null).add0(element);
	
};

Queue.prototype.reverse = function () {
	return novaConstructors.newQueue0((this.data || nova_null).reverse());
	
};

Queue.prototype.toString = function () {
	return novaConstructors.newString2("Queue [").plus0(((this.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2("]")));
	
};

Queue.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Queue"), false);
	
};

Queue.prototype.mutator__js_class = function () {
	
};

Queue.prototype.accessor_size = function () {
	return (this.data || nova_null).position;
	
};

Queue.prototype.mutator_size = function () {
	
};

Queue.prototype.accessor_empty = function () {
	return this.accessor_size() <= 0;
	
};

Queue.prototype.mutator_empty = function () {
	
};

Queue.prototype.accessor_iterator = function () {
	return novaConstructors.newArrayIterator(this.data);
	
};

Queue.prototype.mutator_iterator = function () {
	
};

Queue.prototype.accessor_count = function () {
	return this.count;
	
};

Queue.prototype.mutator_count = function (value) {
	this.count = value;
	return value;
	
};

Queue.prototype.accessor_first = function () {
	return this.first;
	
};

Queue.prototype.mutator_first = function (value) {
	this.first = value;
	return value;
	
};

Queue.prototype.accessor_last = function () {
	return this.last;
	
};

Queue.prototype.mutator_last = function (value) {
	this.last = value;
	return value;
	
};

Queue.prototype.super = function () {
	
};

novaConstructors.newQueue = function () {
	var __value = new Queue()
	NovaObject.call(__value);
	Queue.prototype.super.apply(__value, [].slice.call(arguments));
	return Queue.init.call(__value);
	
};

novaConstructors.newQueue0 = function (data) {
	var __value = new Queue()
	NovaObject.call(__value);
	Queue.prototype.super.apply(__value, [].slice.call(arguments));
	return Queue.init0.call(__value, data);
	
};

var Stack = function () {
	this.top = null;
	this.count = 0;
	this._js_class = null;
	
	
};

Stack.prototype = Object.create(NovaObject.prototype);
Stack.prototype.constructor = Stack;


Stack.prototype.destroy = function () {
	
};

Stack.init = function () {
	return this;
	
};

Stack.init0 = function (data) {
	var nova_local_0;
	nova_local_0 = ((data) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		e = (nova_local_0 || nova_null).accessor_next();
		this.push(e);
	}
	return this;
	
};

Stack.prototype.push = function (data) {
	var node;
	node = novaConstructors.newListNode(data, this.top);
	this.top = node;
	this.count++;
	
};

Stack.prototype.pop = function () {
	var data;
	if (this.accessor_isEmpty()) {
		throw novaConstructors.newEmptyStackException();
	}
	data = (this.top || nova_null).data;
	this.top = (this.top || nova_null).next;
	this.count--;
	return data;
	
};

Stack.prototype.peek = function () {
	return this.accessor_isEmpty() ? null : (this.top || nova_null).data;
	
};

Stack.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/Stack"), false);
	
};

Stack.prototype.mutator__js_class = function () {
	
};

Stack.prototype.accessor_isEmpty = function () {
	return this.count <= 0;
	
};

Stack.prototype.mutator_isEmpty = function () {
	
};

Stack.prototype.super = function () {
	
};

novaConstructors.newStack = function () {
	var __value = new Stack()
	NovaObject.call(__value);
	Stack.prototype.super.apply(__value, [].slice.call(arguments));
	return Stack.init.call(__value);
	
};

novaConstructors.newStack0 = function (data) {
	var __value = new Stack()
	NovaObject.call(__value);
	Stack.prototype.super.apply(__value, [].slice.call(arguments));
	return Stack.init0.call(__value, data);
	
};

var StringCharArray = function () {
	this.count = 0;
	this.data = null;
	this.last = 0;
	
	
};

StringCharArray.prototype = Object.create(NovaObject.prototype);
StringCharArray.prototype.constructor = StringCharArray;


StringCharArray.prototype.destroy = function () {
	
};

StringCharArray.init0 = function (data) {
	this.count = (data || nova_null).accessor_count();
	this.data = (data || nova_null).data.join("");
	return this;
	
};

StringCharArray.init1 = function (count) {
	var buf;
	this.count = count;
	if (count == 0) {
		return "";
	}
	var count2 = count / 2;
	var result = '\0';
	while (result.length <= count2) {
		result += result;
	}
	buf = result + result.substring(0, count - result.length);
	this.data = buf;
	return this;
	
};

StringCharArray.init2 = function (data, count) {
	this.data = data;
	this.count = count;
	this.data = typeof data === 'string' ? data : data.join("");
	return this;
	
};

StringCharArray.prototype.reverse = function () {
	var array;
	array = novaConstructors.newStringCharArray1(this.count);
	var i;
	i = 0;
	for (; i < this.count; i++) {
		(array || nova_null).set(this.count - i - 1, this.get(i));
	}
	return array;
	
};

StringCharArray.prototype.toCharArray = function () {
	var array;
	array = novaConstructors.newArray1Char0(this.count);
	var i;
	i = 0;
	for (; i < this.count; i++) {
		var c;
		c = this.data[i];
		(array || nova_null).set(i, c);
	}
	return array;
	
};

StringCharArray.prototype.toString = function () {
	return novaConstructors.newString4(this);
	
};

StringCharArray.prototype.get = function (index) {
	return this.data[index];
	
};

StringCharArray.prototype.set = function (index, value) {
	this.data = this.data.substr(0, index) + value + this.data.substr(index + value.length);
	return value;
	
};

StringCharArray.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/StringCharArray"), false);
	
};

StringCharArray.prototype.mutator__js_class = function () {
	
};

StringCharArray.prototype.accessor_first = function () {
	return this.count > 0 ? this.data[0] : 0;
	
};

StringCharArray.prototype.mutator_first = function () {
	
};

StringCharArray.prototype.accessor_last = function () {
	return this.count > 0 ? this.data[this.count - 1] : 0;
	
};

StringCharArray.prototype.mutator_last = function () {
	
};

StringCharArray.prototype.super = function () {
	
};

novaConstructors.newStringCharArray0 = function (data) {
	var __value = new StringCharArray()
	NovaObject.call(__value);
	StringCharArray.prototype.super.apply(__value, [].slice.call(arguments));
	return StringCharArray.init0.call(__value, data);
	
};

novaConstructors.newStringCharArray1 = function (count) {
	var __value = new StringCharArray()
	NovaObject.call(__value);
	StringCharArray.prototype.super.apply(__value, [].slice.call(arguments));
	return StringCharArray.init1.call(__value, count);
	
};

novaConstructors.newStringCharArray2 = function (data, count) {
	var __value = new StringCharArray()
	NovaObject.call(__value);
	StringCharArray.prototype.super.apply(__value, [].slice.call(arguments));
	return StringCharArray.init2.call(__value, data, count);
	
};

var SubstringCharArray = function () {
	
	
};

SubstringCharArray.prototype = Object.create(NovaObject.prototype);
SubstringCharArray.prototype.constructor = SubstringCharArray;


SubstringCharArray.prototype.destroy = function () {
	
};

SubstringCharArray.init = function () {
	return this;
	
};

SubstringCharArray.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/datastruct/list/SubstringCharArray"), false);
	
};

SubstringCharArray.prototype.mutator__js_class = function () {
	
};

SubstringCharArray.prototype.super = function () {
	
};

novaConstructors.newSubstringCharArray = function () {
	var __value = new SubstringCharArray()
	NovaObject.call(__value);
	SubstringCharArray.prototype.super.apply(__value, [].slice.call(arguments));
	return SubstringCharArray.init.call(__value);
	
};

var Backtraces = function () {
	
	
};

Backtraces.prototype = Object.create(NovaObject.prototype);
Backtraces.prototype.constructor = Backtraces;


Backtraces.prototype.destroy = function () {
	
};

Backtraces.init = function () {
	return this;
	
};

Backtraces.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/exception/Backtraces"), false);
	
};

Backtraces.prototype.mutator__js_class = function () {
	
};

Backtraces.prototype.super = function () {
	
};

novaConstructors.newBacktraces = function () {
	var __value = new Backtraces()
	NovaObject.call(__value);
	Backtraces.prototype.super.apply(__value, [].slice.call(arguments));
	return Backtraces.init.call(__value);
	
};

var CaughtException = function () {
	this.type = null;
	this.soft = 0;
	
	
};

CaughtException.prototype = Object.create(NovaObject.prototype);
CaughtException.prototype.constructor = CaughtException;


CaughtException.prototype.destroy = function () {
	
};

CaughtException.init = function (type, soft) {
	soft = typeof soft === 'undefined' ? true : soft;
	this.type = type;
	this.soft = soft;
	return this;
	
};

CaughtException.prototype.toString = function () {
	return novaConstructors.newString2("Catching ").plus0((((this.type) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(", soft: ").plus0(Bool.toString((this.soft)).plus0(novaConstructors.newString2("")))));
	
};

CaughtException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/exception/CaughtException"), false);
	
};

CaughtException.prototype.mutator__js_class = function () {
	
};

CaughtException.prototype.super = function () {
	
};

novaConstructors.newCaughtException = function (type, soft) {
	var __value = new CaughtException()
	NovaObject.call(__value);
	CaughtException.prototype.super.apply(__value, [].slice.call(arguments));
	return CaughtException.init.call(__value, type, soft);
	
};

var DivideByZeroException = function () {
	
	
};

DivideByZeroException.prototype = Object.create(Exception.prototype);
DivideByZeroException.prototype.constructor = DivideByZeroException;


DivideByZeroException.prototype.destroy = function () {
	
};

DivideByZeroException.init = function () {
	return this;
	
};

DivideByZeroException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/exception/DivideByZeroException"), false);
	
};

DivideByZeroException.prototype.mutator__js_class = function () {
	
};

DivideByZeroException.prototype.super = function () {
	
};

novaConstructors.newDivideByZeroException = function () {
	var __value = new DivideByZeroException()
	Exception.call(__value);
	DivideByZeroException.prototype.super.apply(__value, [].slice.call(arguments));
	return DivideByZeroException.init.call(__value);
	
};

var ExceptionData = function () {
	this.parent = null;
	this.caught = null;
	this.thrownException = null;
	this.buf = null;
	
	
};

ExceptionData.prototype = Object.create(NovaObject.prototype);
ExceptionData.prototype.constructor = ExceptionData;


ExceptionData.prototype.destroy = function () {
	
};

ExceptionData.init = function (buf) {
	this.buf = buf;
	this.caught = novaConstructors.newArray();
	return this;
	
};

ExceptionData.prototype.addCaught = function (type, soft) {
	soft = typeof soft === 'undefined' ? false : soft;
	(this.caught || nova_null).add0(novaConstructors.newCaughtException(type, soft));
	
};

ExceptionData.prototype.getDataByException = function (exception, soft) {
	var self = this;
	
	var data;
	soft = typeof soft === 'undefined' ? false : soft;
	data = this;
	while (true) {
		if (((data || nova_null).caught || nova_null).any0((c, _2, _3) => {
					return (!soft || (c || nova_null).soft) && ((exception || nova_null).accessor__js_class() || nova_null).isOfType((c || nova_null).type);
					
		})) {
			return data;
		} else if ((data.parent) === null) {
		}
		data = (data || nova_null).parent;
	}
	
};

ExceptionData.prototype.toString = function () {
	return novaConstructors.newString2("{Thrown: ").plus0((((this.thrownException) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(", Caught: ").plus0((((this.caught) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2("}")))));
	
};

ExceptionData.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/exception/ExceptionData"), false);
	
};

ExceptionData.prototype.mutator__js_class = function () {
	
};

ExceptionData.prototype.super = function () {
	
};

novaConstructors.newExceptionData = function (buf) {
	var __value = new ExceptionData()
	NovaObject.call(__value);
	ExceptionData.prototype.super.apply(__value, [].slice.call(arguments));
	return ExceptionData.init.call(__value, buf);
	
};

var InvalidArgumentException = function () {
	
	
};

InvalidArgumentException.prototype = Object.create(Exception.prototype);
InvalidArgumentException.prototype.constructor = InvalidArgumentException;


InvalidArgumentException.prototype.destroy = function () {
	
};

InvalidArgumentException.init = function (message) {
	return Exception.init.call(this, message);
	return this;
	
};

InvalidArgumentException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/exception/InvalidArgumentException"), false);
	
};

InvalidArgumentException.prototype.mutator__js_class = function () {
	
};

InvalidArgumentException.prototype.super = function () {
	
};

novaConstructors.newInvalidArgumentException = function (message) {
	var __value = new InvalidArgumentException()
	Exception.call(__value);
	InvalidArgumentException.prototype.super.apply(__value, [].slice.call(arguments));
	return InvalidArgumentException.init.call(__value, message);
	
};

var InvalidOperationException = function () {
	
	
};

InvalidOperationException.prototype = Object.create(Exception.prototype);
InvalidOperationException.prototype.constructor = InvalidOperationException;


InvalidOperationException.prototype.destroy = function () {
	
};

InvalidOperationException.init = function (message) {
	return Exception.init.call(this, message);
	return this;
	
};

InvalidOperationException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/exception/InvalidOperationException"), false);
	
};

InvalidOperationException.prototype.mutator__js_class = function () {
	
};

InvalidOperationException.prototype.super = function () {
	
};

novaConstructors.newInvalidOperationException = function (message) {
	var __value = new InvalidOperationException()
	Exception.call(__value);
	InvalidOperationException.prototype.super.apply(__value, [].slice.call(arguments));
	return InvalidOperationException.init.call(__value, message);
	
};

var NullAccessException = function () {
	
	
};

NullAccessException.prototype = Object.create(Exception.prototype);
NullAccessException.prototype.constructor = NullAccessException;


NullAccessException.prototype.destroy = function () {
	
};

NullAccessException.init = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("Cannot access property from a null Object") : message;
	return Exception.init.call(this, message);
	return this;
	
};

NullAccessException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/exception/NullAccessException"), false);
	
};

NullAccessException.prototype.mutator__js_class = function () {
	
};

NullAccessException.prototype.super = function () {
	
};

novaConstructors.newNullAccessException = function (message) {
	var __value = new NullAccessException()
	Exception.call(__value);
	NullAccessException.prototype.super.apply(__value, [].slice.call(arguments));
	return NullAccessException.init.call(__value, message);
	
};

var StackTrace = function () {
	this.context = null;
	
	
};

StackTrace.prototype = Object.create(NovaObject.prototype);
StackTrace.prototype.constructor = StackTrace;


StackTrace.prototype.destroy = function () {
	
};

StackTrace.init = function () {
	return this;
	
};

StackTrace.prototype.trace = function () {
	
};

StackTrace.trace = function () {
	StackTrace.callingTrace(1);
	
};

StackTrace.callingTrace = function (count) {
	
};

StackTrace.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/exception/StackTrace"), false);
	
};

StackTrace.prototype.mutator__js_class = function () {
	
};

StackTrace.prototype.super = function () {
	
};

novaConstructors.newStackTrace = function () {
	var __value = new StackTrace()
	NovaObject.call(__value);
	StackTrace.prototype.super.apply(__value, [].slice.call(arguments));
	return StackTrace.init.call(__value);
	
};

var UnimplementedOperationException = function () {
	
	
};

UnimplementedOperationException.prototype = Object.create(Exception.prototype);
UnimplementedOperationException.prototype.constructor = UnimplementedOperationException;


UnimplementedOperationException.prototype.destroy = function () {
	
};

UnimplementedOperationException.init = function (message) {
	return Exception.init.call(this, message);
	return this;
	
};

UnimplementedOperationException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/exception/UnimplementedOperationException"), false);
	
};

UnimplementedOperationException.prototype.mutator__js_class = function () {
	
};

UnimplementedOperationException.prototype.super = function () {
	
};

novaConstructors.newUnimplementedOperationException = function (message) {
	var __value = new UnimplementedOperationException()
	Exception.call(__value);
	UnimplementedOperationException.prototype.super.apply(__value, [].slice.call(arguments));
	return UnimplementedOperationException.init.call(__value, message);
	
};

var UnimplementedForTargetException = function () {
	
	
};

UnimplementedForTargetException.prototype = Object.create(UnimplementedOperationException.prototype);
UnimplementedForTargetException.prototype.constructor = UnimplementedForTargetException;


UnimplementedForTargetException.prototype.destroy = function () {
	
};

UnimplementedForTargetException.init = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("Unimplemented") : message;
	return UnimplementedOperationException.init.call(this, (message || nova_null).plus0(novaConstructors.newString2(" (target: ").plus0(((System.TARGET) || nova_null).plus0(novaConstructors.newString2(")")))));
	return this;
	
};

UnimplementedForTargetException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/exception/UnimplementedForTargetException"), false);
	
};

UnimplementedForTargetException.prototype.mutator__js_class = function () {
	
};

UnimplementedForTargetException.prototype.super = function () {
	
};

novaConstructors.newUnimplementedForTargetException = function (message) {
	var __value = new UnimplementedForTargetException()
	UnimplementedOperationException.call(__value);
	UnimplementedForTargetException.prototype.super.apply(__value, [].slice.call(arguments));
	return UnimplementedForTargetException.init.call(__value, message);
	
};

var GC = function () {
	this.totalBytes = 0;
	this.bytesSinceGC = 0;
	
	
};

GC.prototype = Object.create(NovaObject.prototype);
GC.prototype.constructor = GC;


GC.prototype.destroy = function () {
	
};

GC.init = function () {
	nova_gc_init();
	
};

GC.collect = function () {
	nova_gc_collect();
	
};

GC.enableIncremental = function () {
	nova_gc_enableIncremental();
	
};

GC.dump = function () {
	nova_gc_dump();
	
};

GC.init = function () {
	return this;
	
};

GC.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/gc/GC"), false);
	
};

GC.prototype.mutator__js_class = function () {
	
};

GC.prototype.accessor_freeBytes = function () {
	return nova_gc_getFreeBytes();
	
};

GC.prototype.mutator_freeBytes = function () {
	
};

GC.prototype.accessor_totalBytes = function () {
	return nova_gc_getTotalBytes();
	
};

GC.prototype.mutator_totalBytes = function () {
	
};

GC.prototype.accessor_heapSize = function () {
	return nova_gc_getHeapSize();
	
};

GC.prototype.mutator_heapSize = function () {
	
};

GC.prototype.accessor_bytesSinceGC = function () {
	return nova_gc_getBytesSinceGC();
	
};

GC.prototype.mutator_bytesSinceGC = function () {
	
};

GC.prototype.super = function () {
	
};

novaConstructors.newGC = function () {
	var __value = new GC()
	NovaObject.call(__value);
	GC.prototype.super.apply(__value, [].slice.call(arguments));
	return GC.init.call(__value);
	
};

var ClosedStreamException = function () {
	
	
};

ClosedStreamException.prototype = Object.create(Exception.prototype);
ClosedStreamException.prototype.constructor = ClosedStreamException;


ClosedStreamException.prototype.destroy = function () {
	
};

ClosedStreamException.init = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("Trying to use closed stream") : message;
	return Exception.init.call(this, message);
	return this;
	
};

ClosedStreamException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/ClosedStreamException"), false);
	
};

ClosedStreamException.prototype.mutator__js_class = function () {
	
};

ClosedStreamException.prototype.super = function () {
	
};

novaConstructors.newClosedStreamException = function (message) {
	var __value = new ClosedStreamException()
	Exception.call(__value);
	ClosedStreamException.prototype.super.apply(__value, [].slice.call(arguments));
	return ClosedStreamException.init.call(__value, message);
	
};

var NovaConsole = function () {
	
	
};

NovaConsole.prototype = Object.create(NovaObject.prototype);
NovaConsole.prototype.constructor = NovaConsole;


NovaConsole.prototype.destroy = function () {
	
};

NovaConsole.log = function (obj) {
	obj = typeof obj === 'undefined' ? novaConstructors.newString2("") : obj;
	NovaConsole.writeLine2(obj);
	
};

NovaConsole.writeLine0 = function () {
	NovaConsole.writeLine1(novaConstructors.newString2(""));
	
};

NovaConsole.writeLine1 = function (text) {
	NovaConsole.write0((text || nova_null).plus0(novaConstructors.newString2("\n")));
	
};

NovaConsole.writeLine2 = function (obj) {
	NovaConsole.writeLine1((obj || nova_null).toString());
	
};

NovaConsole.writeLine3 = function (num) {
	NovaConsole.writeLine1(NovaDouble.toString(num));
	
};

NovaConsole.writeLine4 = function (num) {
	NovaConsole.writeLine1(NovaDouble.toString(num));
	
};

NovaConsole.writeLine5 = function (num) {
	NovaConsole.writeLine1(NovaLong.toString(num));
	
};

NovaConsole.writeLine6 = function (num) {
	NovaConsole.writeLine1(NovaInt.toString(num));
	
};

NovaConsole.writeLine7 = function (num) {
	NovaConsole.writeLine1(NovaInt.toString(num));
	
};

NovaConsole.writeLine8 = function (num) {
	NovaConsole.writeLine1(NovaByte.toString(num));
	
};

NovaConsole.writeLine9 = function (c) {
	NovaConsole.writeLine1(Char.toString(c));
	
};

NovaConsole.write0 = function (text) {
	(NovaConsole.out || nova_null).write(text);
	NovaConsole.flushOutput();
	
};

NovaConsole.write1 = function (obj) {
	NovaConsole.write0((obj || nova_null).toString());
	
};

NovaConsole.write2 = function (num) {
	NovaConsole.write0(NovaDouble.toString(num));
	
};

NovaConsole.write3 = function (num) {
	NovaConsole.write0(NovaDouble.toString(num));
	
};

NovaConsole.write4 = function (num) {
	NovaConsole.write0(NovaLong.toString(num));
	
};

NovaConsole.write5 = function (num) {
	NovaConsole.write0(NovaInt.toString(num));
	
};

NovaConsole.write6 = function (num) {
	NovaConsole.write0(NovaInt.toString(num));
	
};

NovaConsole.write7 = function (num) {
	NovaConsole.write0(NovaByte.toString(num));
	
};

NovaConsole.write8 = function (c) {
	NovaConsole.write0(Char.toString(c));
	
};

NovaConsole.readInt = function () {
	return NovaInt.parseInt(NovaConsole.readLine());
	
};

NovaConsole.readDouble = function () {
	return NovaDouble.parseDouble(NovaConsole.readLine());
	
};

NovaConsole.readChar = function () {
	var c;
	c = getchar();
	NovaConsole.flushInput();
	return c;
	
};

NovaConsole.flushInput = function () {
	
};

NovaConsole.flushOutput = function () {
	
};

NovaConsole.readLine = function () {
	var line;
	return novaConstructors.newString2(line);
	
};

NovaConsole.readPassword = function () {
	var pass;
	NovaConsole.setEcho(false);
	pass = NovaConsole.readLine();
	NovaConsole.setEcho(true);
	NovaConsole.write0(novaConstructors.newString2("\n"));
	return pass;
	
};

NovaConsole.setEcho = function (echo) {
	nova_setEcho(echo);
	
};

NovaConsole.clearScreen = function () {
	nova_clearScreen();
	
};

NovaConsole.waitForEnter = function () {
	var c;
	NovaConsole.flushInput();
	c = [];
	
};

NovaConsole.init = function () {
	return this;
	
};

NovaConsole.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/Console"), false);
	
};

NovaConsole.prototype.mutator__js_class = function () {
	
};

NovaConsole.prototype.super = function () {
	
};

novaConstructors.newConsole = function () {
	var __value = new NovaConsole()
	NovaObject.call(__value);
	NovaConsole.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaConsole.init.call(__value);
	
};

var Curl = function () {
	
	
};

Curl.prototype = Object.create(NovaObject.prototype);
Curl.prototype.constructor = Curl;


Curl.prototype.destroy = function () {
	
};

Curl.init = function () {
	return this;
	
};

Curl.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/Curl"), false);
	
};

Curl.prototype.mutator__js_class = function () {
	
};

Curl.prototype.super = function () {
	
};

novaConstructors.newCurl = function () {
	var __value = new Curl()
	NovaObject.call(__value);
	Curl.prototype.super.apply(__value, [].slice.call(arguments));
	return Curl.init.call(__value);
	
};

var OutputStream = function () {
	
	
};

OutputStream.prototype.constructor = OutputStream;


OutputStream.prototype.write = function (value) {
	value = typeof value === 'undefined' ? novaConstructors.newString2("") : value;
	return this;
	
};

OutputStream.prototype.writeLine = function (value) {
	value = typeof value === 'undefined' ? novaConstructors.newString2("") : value;
	return this.write((value || nova_null).plus0(novaConstructors.newString2("\n")));
	
};

OutputStream.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/OutputStream"), false);
	
};

OutputStream.prototype.mutator__js_class = function () {
	
};

var EmptyOutputStream = function () {
	
	
};

EmptyOutputStream.prototype = Object.create(NovaObject.prototype);
EmptyOutputStream.prototype.constructor = EmptyOutputStream;


EmptyOutputStream.prototype.destroy = function () {
	
};

EmptyOutputStream.init = function () {
	return this;
	
};

EmptyOutputStream.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/EmptyOutputStream"), false);
	
};

EmptyOutputStream.prototype.mutator__js_class = function () {
	
};

EmptyOutputStream.prototype.super = function () {
	
};

novaConstructors.newEmptyOutputStream = function () {
	var __value = new EmptyOutputStream()
	NovaObject.call(__value);
	EmptyOutputStream.prototype.super.apply(__value, [].slice.call(arguments));
	return EmptyOutputStream.init.call(__value);
	
};

var FancyOutputStream = function () {
	this.contentWidth = 0;
	this.headerPattern = null;
	this.out = null;
	
	
};

FancyOutputStream.prototype = Object.create(NovaObject.prototype);
FancyOutputStream.prototype.constructor = FancyOutputStream;


FancyOutputStream.prototype.destroy = function () {
	
};

FancyOutputStream.init = function (out, contentWidth, headerPattern) {
	out = typeof out === 'undefined' ? NovaConsole.out : out;
	contentWidth = typeof contentWidth === 'undefined' ? 80 : contentWidth;
	headerPattern = typeof headerPattern === 'undefined' ? novaConstructors.newString2("=") : headerPattern;
	this.out = out;
	this.contentWidth = contentWidth;
	this.headerPattern = headerPattern;
	return this;
	
};

FancyOutputStream.prototype.writeHeader0 = function (message) {
	return this.writeHeader1((message || nova_null).toString());
	
};

FancyOutputStream.prototype.writeHeader1 = function (message, pattern, rightPattern, symmetrical) {
	var fullHeaderCount;
	var sideCount;
	var leftCount;
	var rightCount;
	var remainingLeft;
	var remainingRight;
	pattern = typeof pattern === 'undefined' ? this.headerPattern : pattern;
	rightPattern = typeof rightPattern === 'undefined' ? pattern : rightPattern;
	symmetrical = typeof symmetrical === 'undefined' ? false : symmetrical;
	fullHeaderCount = this.contentWidth - (message || nova_null).count - 2;
	sideCount = ~~(fullHeaderCount / 2);
	if (symmetrical) {
		rightPattern = (pattern || nova_null).reverse(true);
	}
	leftCount = ~~(sideCount / (pattern || nova_null).count);
	rightCount = ~~(sideCount / (rightPattern || nova_null).count);
	remainingLeft = ~~(sideCount % (pattern || nova_null).count);
	remainingRight = (~~(sideCount % (rightPattern || nova_null).count)) + (~~((message || nova_null).count % 2));
	(this.write((pattern || nova_null).repeat(leftCount)) || nova_null).write((pattern || nova_null).substring(undefined, remainingLeft));
	((this.write(novaConstructors.newString2(" ")) || nova_null).write(message) || nova_null).write(novaConstructors.newString2(" "));
	(this.write((rightPattern || nova_null).repeat(rightCount)) || nova_null).write((rightPattern || nova_null).substring(undefined, remainingRight));
	this.writeLine();
	return this;
	
};

FancyOutputStream.prototype.writeSeparator = function (pattern) {
	pattern = typeof pattern === 'undefined' ? this.headerPattern : pattern;
	this.writeLine((pattern || nova_null).repeat(this.contentWidth));
	return this;
	
};

FancyOutputStream.prototype.write = function (value) {
	value = typeof value === 'undefined' ? novaConstructors.newString2("") : value;
	(this.out || nova_null).write(value);
	return this;
	
};

FancyOutputStream.prototype.writeLine = function (value) {
	value = typeof value === 'undefined' ? novaConstructors.newString2("") : value;
	(this.out || nova_null).writeLine(value);
	return this;
	
};

FancyOutputStream.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/FancyOutputStream"), false);
	
};

FancyOutputStream.prototype.mutator__js_class = function () {
	
};

FancyOutputStream.prototype.super = function () {
	this.contentWidth = 80;
	this.headerPattern = novaConstructors.newString2("=");
	
};

novaConstructors.newFancyOutputStream = function (out, contentWidth, headerPattern) {
	var __value = new FancyOutputStream()
	NovaObject.call(__value);
	FancyOutputStream.prototype.super.apply(__value, [].slice.call(arguments));
	return FancyOutputStream.init.call(__value, out, contentWidth, headerPattern);
	
};

var File = function () {
	this.file = null;
	this.location = null;
	this.extension = null;
	this.rootName = null;
	this.isDirectory = 0;
	this.exists = 0;
	this.maxOpenFiles = 0;
	
	
};

File.prototype = Object.create(NovaObject.prototype);
File.prototype.constructor = File;


File.prototype.destroy = function () {
	
};

File.init0 = function (location, file) {
	this.location = location;
	this.file = file;
	return this;
	
};

File.init1 = function (location) {
	this.location = location;
	return this;
	
};

File.prototype.getChildFiles = function (recursive, includeHidden) {
	var self = this;
	
	var list;
	var directories;
	recursive = typeof recursive === 'undefined' ? false : recursive;
	includeHidden = typeof includeHidden === 'undefined' ? false : includeHidden;
	list = this.accessor_files();
	directories = ((((list || nova_null).filter0((_1, _2, _3) => {
						return (_1 || nova_null).accessor_isDirectory();
						
			}) || nova_null).filter0((_1, _2, _3) => {
					return includeHidden || !(_1 || nova_null).accessor_isHidden();
					
		}) || nova_null).filter0((_1, _2, _3) => {
				return !((_1 || nova_null).accessor_name() || nova_null).equals0(novaConstructors.newString2("."));
				
	}) || nova_null).filter0((_1, _2, _3) => {
			return !((_1 || nova_null).accessor_name() || nova_null).equals0(novaConstructors.newString2(".."));
			
	});
	if (recursive) {
		(directories || nova_null).forEach0((_1, _2, _3) => {
				(list || nova_null).addAll((_1 || nova_null).getChildFiles(true));
				
		});
	}
	return ((list || nova_null).filter0((_1, _2, _3) => {
				return !(_1 || nova_null).accessor_isDirectory();
				
	}) || nova_null).filter0((_1, _2, _3) => {
			return includeHidden || !(_1 || nova_null).accessor_isHidden();
			
	});
	
};

File.prototype.toString = function () {
	return novaConstructors.newString2("{File \"").plus0(((this.location) || nova_null).plus0(novaConstructors.newString2("\"}")));
	
};

File.prototype.accessor_files = function () {
	return novaConstructors.newArray();
	
};

File.prototype.mutator_maxOpenFiles = function (value) {
	var min;
	var max;
	min = 20;
	max = 2048;
	if (value > max || value < min) {
		throw novaConstructors.newException(novaConstructors.newString2("Invalid max number of open files: ").plus0(NovaInt.toString((value)).plus0(novaConstructors.newString2("\nValid values include ").plus0(NovaShort.toString((min)).plus0(novaConstructors.newString2("-").plus0(NovaShort.toString((max)).plus0(novaConstructors.newString2(""))))))));
	} else {
		setMaxOpenFiles(value);
	}
	return value;
	
};

File.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/File"), false);
	
};

File.prototype.mutator__js_class = function () {
	
};

File.prototype.accessor_name = function () {
	return (this.location || nova_null).substring((this.location || nova_null).lastIndexOf0('/') + 1);
	
};

File.prototype.mutator_name = function () {
	
};

File.prototype.accessor_extension = function () {
	return (this.location || nova_null).substring((this.location || nova_null).lastIndexOf0('.', undefined, (this.location || nova_null).count));
	
};

File.prototype.mutator_extension = function () {
	
};

File.prototype.accessor_extensionName = function () {
	return (this.location || nova_null).substring((this.location || nova_null).lastIndexOf0('.', undefined, (this.location || nova_null).count - 1) + 1);
	
};

File.prototype.mutator_extensionName = function () {
	
};

File.prototype.accessor_rootName = function () {
	return (this.accessor_name() || nova_null).substring(undefined, (this.accessor_name() || nova_null).count - (this.accessor_extension() || nova_null).count);
	
};

File.prototype.mutator_rootName = function () {
	
};

File.prototype.accessor_isHidden = function () {
	return (this.accessor_name() || nova_null).startsWith1(novaConstructors.newString2("."));
	
};

File.prototype.mutator_isHidden = function () {
	
};

File.prototype.accessor_isDirectory = function () {
	return false;
	
};

File.prototype.mutator_isDirectory = function () {
	
};

File.prototype.accessor_isFile = function () {
	return this.accessor_exists() && !this.accessor_isDirectory();
	
};

File.prototype.mutator_isFile = function () {
	
};

File.prototype.accessor_exists = function () {
	return false;
	
};

File.prototype.mutator_exists = function () {
	
};

File.prototype.accessor_maxOpenFiles = function () {
	return getMaxOpenFiles();
	
};

File.prototype.super = function () {
	
};

novaConstructors.newFile0 = function (location, file) {
	var __value = new File()
	NovaObject.call(__value);
	File.prototype.super.apply(__value, [].slice.call(arguments));
	return File.init0.call(__value, location, file);
	
};

novaConstructors.newFile1 = function (location) {
	var __value = new File()
	NovaObject.call(__value);
	File.prototype.super.apply(__value, [].slice.call(arguments));
	return File.init1.call(__value, location);
	
};

var FileNotFoundException = function () {
	
	
};

FileNotFoundException.prototype = Object.create(Exception.prototype);
FileNotFoundException.prototype.constructor = FileNotFoundException;


FileNotFoundException.prototype.destroy = function () {
	
};

FileNotFoundException.init = function (file) {
	return Exception.init.call(this, novaConstructors.newString2("File at location '").plus0(((file || nova_null).location || nova_null).plus0(novaConstructors.newString2("' does not exist"))));
	return this;
	
};

FileNotFoundException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/FileNotFoundException"), false);
	
};

FileNotFoundException.prototype.mutator__js_class = function () {
	
};

FileNotFoundException.prototype.super = function () {
	
};

novaConstructors.newFileNotFoundException = function (file) {
	var __value = new FileNotFoundException()
	Exception.call(__value);
	FileNotFoundException.prototype.super.apply(__value, [].slice.call(arguments));
	return FileNotFoundException.init.call(__value, file);
	
};

var InputStream = function () {
	
	
};

InputStream.prototype.constructor = InputStream;


InputStream.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/InputStream"), false);
	
};

InputStream.prototype.mutator__js_class = function () {
	
};

var FileReader = function () {
	this.fp = null;
	this.file = null;
	
	
};

FileReader.prototype = Object.create(NovaObject.prototype);
FileReader.prototype.constructor = FileReader;


FileReader.prototype.destroy = function () {
	
};

FileReader.prototype.readBytes = function () {
	return null;
	
};

FileReader.init = function (file) {
	this.file = file;
	this.open();
	return this;
	
};

FileReader.prototype.open = function () {
	
};

FileReader.prototype.readAllContents = function () {
	var size;
	var buffer;
	return novaConstructors.newString1(buffer, size);
	
};

FileReader.prototype.readLine = function () {
	var bufferSize;
	var line;
	bufferSize = 80;
	line = [];
	return novaConstructors.newString1(line, bufferSize - 1);
	
};

FileReader.prototype.readString = function () {
	var bufferSize;
	var line;
	bufferSize = 80;
	line = [];
	return novaConstructors.newString1(line, bufferSize - 1);
	
};

FileReader.prototype.readChar = function () {
	return 0;
	
};

FileReader.prototype.close = function () {
	if (this.accessor_isOpen()) {
		fclose(this.fp);
	}
	return true;
	
};

FileReader.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/FileReader"), false);
	
};

FileReader.prototype.mutator__js_class = function () {
	
};

FileReader.prototype.accessor_isOpen = function () {
	return this.fp != 0;
	
};

FileReader.prototype.mutator_isOpen = function () {
	
};

FileReader.prototype.super = function () {
	
};

novaConstructors.newFileReader = function (file) {
	var __value = new FileReader()
	NovaObject.call(__value);
	FileReader.prototype.super.apply(__value, [].slice.call(arguments));
	return FileReader.init.call(__value, file);
	
};

var FileWriter = function () {
	this.fp = null;
	this.buffer = null;
	this.file = null;
	this._js_class = null;
	
	
};

FileWriter.prototype = Object.create(NovaObject.prototype);
FileWriter.prototype.constructor = FileWriter;


FileWriter.prototype.destroy = function () {
	
};

FileWriter.init0 = function (file) {
	this.file = file;
	return this;
	
};

FileWriter.init1 = function () {
	return this;
	
};

FileWriter.init2 = function (location) {
	return FileWriter.init0.call(this, novaConstructors.newFile1(location));
	return this;
	
};

FileWriter.prototype.delete = function () {
	return this.close() && remove((((this.file || nova_null).location || nova_null).chars || nova_null).data) === 0;
	
};

FileWriter.prototype.reopen = function () {
	this.close();
	this.fp = fopen((((this.file || nova_null).location || nova_null).chars || nova_null).data, novaConstructors.newString2("r+"));
	return this.fp != 0;
	
};

FileWriter.prototype.rewind = function () {
	rewind(this.fp);
	
};

FileWriter.prototype.clearContents = function () {
	return (this.file || nova_null).accessor_exists() && (this.fp = fopen((((this.file || nova_null).location || nova_null).chars || nova_null).data, novaConstructors.newString2("w"))) != 0;
	
};

FileWriter.prototype.create = function () {
	if (!(this.file || nova_null).accessor_exists()) {
		this.fp = fopen((((this.file || nova_null).location || nova_null).chars || nova_null).data, novaConstructors.newString2("w"));
		if (!(this.file || nova_null).accessor_exists()) {
			throw novaConstructors.newFileNotFoundException(this.file);
		}
		this.reopen();
		if (!(this.file || nova_null).accessor_exists()) {
			throw novaConstructors.newFileNotFoundException(this.file);
		}
		return true;
	}
	return false;
	
};

FileWriter.prototype.writeLine = function (line) {
	line = typeof line === 'undefined' ? novaConstructors.newString2("") : line;
	return this.write(((line) || nova_null).plus0(novaConstructors.newString2("\n")));
	
};

FileWriter.prototype.write = function (data) {
	var split;
	split = (data || nova_null).split(novaConstructors.newPattern(novaConstructors.newString2("\n")));
	if ((split || nova_null).accessor_count() > 1) {
		var dataToPrint;
		dataToPrint = (this.buffer || nova_null).plus0(((split || nova_null).skipLast(1) || nova_null).join(novaConstructors.newString2("\n")));
		this.buffer = (split || nova_null).accessor_last();
		console.log(((dataToPrint || nova_null).chars || nova_null).data);
	} else {
		this.buffer = (this.buffer || nova_null).concat(data);
	}
	return this;
	
};

FileWriter.prototype.flush = function () {
	if ((this.buffer || nova_null).count > 0) {
		console.log(((this.buffer || nova_null).chars || nova_null).data);
		this.buffer = novaConstructors.newString2("");
	}
	
};

FileWriter.prototype.close = function () {
	return false;
	
};

FileWriter.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/FileWriter"), false);
	
};

FileWriter.prototype.mutator__js_class = function () {
	
};

FileWriter.prototype.accessor_isOpen = function () {
	return this.fp != 0;
	
};

FileWriter.prototype.mutator_isOpen = function () {
	
};

FileWriter.prototype.super = function () {
	this.buffer = novaConstructors.newString2("");
	
};

novaConstructors.newFileWriter0 = function (file) {
	var __value = new FileWriter()
	NovaObject.call(__value);
	FileWriter.prototype.super.apply(__value, [].slice.call(arguments));
	return FileWriter.init0.call(__value, file);
	
};

novaConstructors.newFileWriter1 = function () {
	var __value = new FileWriter()
	NovaObject.call(__value);
	FileWriter.prototype.super.apply(__value, [].slice.call(arguments));
	return FileWriter.init1.call(__value);
	
};

novaConstructors.newFileWriter2 = function (location) {
	var __value = new FileWriter()
	NovaObject.call(__value);
	FileWriter.prototype.super.apply(__value, [].slice.call(arguments));
	return FileWriter.init2.call(__value, location);
	
};

var StreamReader = function () {
	
	
};

StreamReader.prototype = Object.create(NovaObject.prototype);
StreamReader.prototype.constructor = StreamReader;


StreamReader.prototype.destroy = function () {
	
};

StreamReader.init = function () {
	return this;
	
};

StreamReader.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/StreamReader"), false);
	
};

StreamReader.prototype.mutator__js_class = function () {
	
};

StreamReader.prototype.super = function () {
	
};

novaConstructors.newStreamReader = function () {
	var __value = new StreamReader()
	NovaObject.call(__value);
	StreamReader.prototype.super.apply(__value, [].slice.call(arguments));
	return StreamReader.init.call(__value);
	
};

var StringBuilder = function () {
	this.value = null;
	
	
};

StringBuilder.prototype = Object.create(NovaObject.prototype);
StringBuilder.prototype.constructor = StringBuilder;


StringBuilder.prototype.destroy = function () {
	
};

StringBuilder.init = function (value) {
	var nova_local_0;
	value = typeof value === 'undefined' ? novaConstructors.newString2("") : value;
	this.value = value;
	value = (nova_local_0 = value) != null ? nova_local_0 : novaConstructors.newString2("");
	return this;
	
};

StringBuilder.prototype.write = function (str) {
	this.value = (this.value || nova_null).concat(str);
	return this;
	
};

StringBuilder.prototype.toString = function () {
	return this.value;
	
};

StringBuilder.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/io/StringBuilder"), false);
	
};

StringBuilder.prototype.mutator__js_class = function () {
	
};

StringBuilder.prototype.super = function () {
	
};

novaConstructors.newStringBuilder = function (value) {
	var __value = new StringBuilder()
	NovaObject.call(__value);
	StringBuilder.prototype.super.apply(__value, [].slice.call(arguments));
	return StringBuilder.init.call(__value, value);
	
};

var Sequence = function () {
	this.values = null;
	
	
};

Sequence.prototype = Object.create(NovaObject.prototype);
Sequence.prototype.constructor = Sequence;


Sequence.prototype.destroy = function () {
	
};

Sequence.init = function (values) {
	this.values = values;
	return this;
	
};

Sequence.sum = function (num) {
	var value;
	value = 0;
	var i;
	i = 0;
	for (; i < num; i++) {
		value = value + (this.values || nova_null).get(i);
	}
	return value;
	
};

Sequence.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/Sequence"), false);
	
};

Sequence.prototype.mutator__js_class = function () {
	
};

Sequence.prototype.super = function () {
	
};

novaConstructors.newSequence = function (values) {
	var __value = new Sequence()
	NovaObject.call(__value);
	Sequence.prototype.super.apply(__value, [].slice.call(arguments));
	return Sequence.init.call(__value, values);
	
};

var ArithmeticSequence = function () {
	
	
};

ArithmeticSequence.prototype = Object.create(Sequence.prototype);
ArithmeticSequence.prototype.constructor = ArithmeticSequence;


ArithmeticSequence.prototype.destroy = function () {
	
};

ArithmeticSequence.init = function () {
	return this;
	
};

ArithmeticSequence.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/ArithmeticSequence"), false);
	
};

ArithmeticSequence.prototype.mutator__js_class = function () {
	
};

ArithmeticSequence.prototype.super = function () {
	
};

novaConstructors.newArithmeticSequence = function () {
	var __value = new ArithmeticSequence()
	Sequence.call(__value);
	ArithmeticSequence.prototype.super.apply(__value, [].slice.call(arguments));
	return ArithmeticSequence.init.call(__value);
	
};

var Diekstra = function () {
	
	
};

Diekstra.prototype = Object.create(NovaObject.prototype);
Diekstra.prototype.constructor = Diekstra;


Diekstra.prototype.destroy = function () {
	
};

Diekstra.init = function () {
	return this;
	
};

Diekstra.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/Diekstra"), false);
	
};

Diekstra.prototype.mutator__js_class = function () {
	
};

Diekstra.prototype.super = function () {
	
};

novaConstructors.newDiekstra = function () {
	var __value = new Diekstra()
	NovaObject.call(__value);
	Diekstra.prototype.super.apply(__value, [].slice.call(arguments));
	return Diekstra.init.call(__value);
	
};

var GeometricSequence = function () {
	
	
};

GeometricSequence.prototype = Object.create(NovaObject.prototype);
GeometricSequence.prototype.constructor = GeometricSequence;


GeometricSequence.prototype.destroy = function () {
	
};

GeometricSequence.init = function () {
	return this;
	
};

GeometricSequence.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/GeometricSequence"), false);
	
};

GeometricSequence.prototype.mutator__js_class = function () {
	
};

GeometricSequence.prototype.super = function () {
	
};

novaConstructors.newGeometricSequence = function () {
	var __value = new GeometricSequence()
	NovaObject.call(__value);
	GeometricSequence.prototype.super.apply(__value, [].slice.call(arguments));
	return GeometricSequence.init.call(__value);
	
};

var Graph = function () {
	
	
};

Graph.prototype = Object.create(NovaObject.prototype);
Graph.prototype.constructor = Graph;


Graph.prototype.destroy = function () {
	
};

Graph.init = function () {
	return this;
	
};

Graph.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/Graph"), false);
	
};

Graph.prototype.mutator__js_class = function () {
	
};

Graph.prototype.super = function () {
	
};

novaConstructors.newGraph = function () {
	var __value = new Graph()
	NovaObject.call(__value);
	Graph.prototype.super.apply(__value, [].slice.call(arguments));
	return Graph.init.call(__value);
	
};

var InvalidNumericStatementException = function () {
	
	
};

InvalidNumericStatementException.prototype = Object.create(Exception.prototype);
InvalidNumericStatementException.prototype.constructor = InvalidNumericStatementException;


InvalidNumericStatementException.prototype.destroy = function () {
	
};

InvalidNumericStatementException.init = function (message) {
	return Exception.init.call(this, message);
	return this;
	
};

InvalidNumericStatementException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/InvalidNumericStatementException"), false);
	
};

InvalidNumericStatementException.prototype.mutator__js_class = function () {
	
};

InvalidNumericStatementException.prototype.super = function () {
	
};

novaConstructors.newInvalidNumericStatementException = function (message) {
	var __value = new InvalidNumericStatementException()
	Exception.call(__value);
	InvalidNumericStatementException.prototype.super.apply(__value, [].slice.call(arguments));
	return InvalidNumericStatementException.init.call(__value, message);
	
};

var NovaMath = function () {
	
	
};

NovaMath.prototype = Object.create(NovaObject.prototype);
NovaMath.prototype.constructor = NovaMath;


NovaMath.prototype.destroy = function () {
	
};

NovaMath.max0 = function (a, b) {
	return a > b ? a : b;
	
};

NovaMath.max1 = function (a, b) {
	return a > b ? a : b;
	
};

NovaMath.min0 = function (a, b) {
	return a < b ? a : b;
	
};

NovaMath.min1 = function (a, b) {
	return a < b ? a : b;
	
};

NovaMath.sign = function (num) {
	return num > 0 ? 1 : (num < 0 ? -1 : 0);
	
};

NovaMath.random0 = function (range) {
	return ~~(rand() % range);
	
};

NovaMath.random1 = function (range) {
	return ~~(rand() % range);
	
};

NovaMath.abs0 = function (number) {
	return number < 0 ? -number : number;
	
};

NovaMath.abs1 = function (number) {
	return number < 0 ? -number : number;
	
};

NovaMath.abs2 = function (number) {
	return number < 0 ? -number : number;
	
};

NovaMath.sqrt = function (number) {
	return Math.sqrt(number);
	
};

NovaMath.pow = function (base, power) {
	return Math.pow(base, power);
	
};

NovaMath.sin = function (number) {
	return Math.sin(number);
	
};

NovaMath.cos = function (number) {
	return Math.cos(number);
	
};

NovaMath.tan = function (number) {
	return Math.tan(number);
	
};

NovaMath.asin = function (number) {
	return Math.asin(number);
	
};

NovaMath.acos = function (number) {
	return Math.acos(number);
	
};

NovaMath.atan = function (number) {
	return Math.atan(number);
	
};

NovaMath.round = function (number) {
	return NovaMath.floor(number + 0.5);
	
};

NovaMath.floor = function (number) {
	return Math.floor(number);
	
};

NovaMath.ceil = function (number) {
	return Math.ceil(number);
	
};

NovaMath.gcd = function (a, b) {
	var r;
	r = ~~(a % b);
	if (r === 0) {
		return b;
	} else {
		return NovaMath.gcd(b, r);
	}
	
};

NovaMath.init = function () {
	return this;
	
};

NovaMath.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/Math"), false);
	
};

NovaMath.prototype.mutator__js_class = function () {
	
};

NovaMath.prototype.super = function () {
	
};

novaConstructors.newMath = function () {
	var __value = new NovaMath()
	NovaObject.call(__value);
	NovaMath.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaMath.init.call(__value);
	
};

var Matrix = function () {
	this.data = null;
	this.rows = 0;
	this.isIdentity = 0;
	
	
};

Matrix.prototype = Object.create(NovaObject.prototype);
Matrix.prototype.constructor = Matrix;


Matrix.prototype.destroy = function () {
	
};

Matrix.init0 = function (order) {
	return Matrix.init1.call(this, order, order);
	return this;
	
};

Matrix.init1 = function (rows, cols) {
	var self = this;
	
	if (rows <= 0 || cols <= 0) {
		throw novaConstructors.newInvalidArgumentException(novaConstructors.newString2("Invalid matrix size ").plus0(NovaInt.toString((rows)).plus0(novaConstructors.newString2("x").plus0(NovaInt.toString((cols)).plus0(novaConstructors.newString2(". The number of rows and columns must both be positive."))))));
	}
	return Matrix.init2.call(this, novaConstructors.newArray0(rows).map0((_1, _2, _3) => {
				return novaConstructors.newArray1Double0(cols).map2((_1, _2, _3) => {
						return 0;
						
				});
				
	}));
	return this;
	
};

Matrix.init2 = function (data) {
	this.data = data;
	if ((data) === null || (data || nova_null).accessor_count() === 0) {
		throw novaConstructors.newInvalidArgumentException(novaConstructors.newString2("Matrix size must be greater than 0 rows and columns"));
	}
	return this;
	
};

Matrix.prototype.clone = function () {
	return novaConstructors.newMatrix1(this.accessor_rows(), this.accessor_cols()).add(this);
	
};

Matrix.identity = function (order) {
	var self = this;
	
	var data;
	data = novaConstructors.newArray0(order).map0((_1, _2, _3) => {
			return novaConstructors.newArray1Double0(order).map0((_1, _2, _3) => {
					return 0;
					
			});
			
	});
	var i;
	i = 0;
	for (; i < order; i++) {
		((data || nova_null).get(i) || nova_null).set(i, 1);
	}
	return novaConstructors.newMatrix2(data);
	
};

Matrix.prototype.inverse = function () {
	var i;
	var current;
	var j;
	if (!this.accessor_isSquare()) {
		throw novaConstructors.newInvalidOperationException(novaConstructors.newString2("Cannot take the inverse of a non-square matrix"));
	}
	i = Matrix.identity(this.accessor_rows());
	current = this.clone();
	j = 0;
	while (!(current || nova_null).accessor_isIdentity()) {
		(i || nova_null).swapRows(~~(j % 2), ~~(j % 3));
		if (j++ > 100) {
			break;
		}
	}
	return i;
	
};

Matrix.prototype.swapRows = function (row1, row2) {
	if (row1 === row2) {
		return;
	}
	var col;
	col = 0;
	for (; col < this.accessor_cols(); col++) {
		var temp;
		temp = ((this.data || nova_null).get(row1) || nova_null).get(col);
		((this.data || nova_null).get(row1) || nova_null).set(col, ((this.data || nova_null).get(row2) || nova_null).get(col));
		((this.data || nova_null).get(row2) || nova_null).set(col, temp);
	}
	
};

Matrix.prototype.multiplyRow = function (sourceRow, destinationRow, scalar) {
	destinationRow = typeof destinationRow === 'undefined' ? sourceRow : destinationRow;
	scalar = typeof scalar === 'undefined' ? 1 : scalar;
	if (sourceRow === destinationRow) {
		var col;
		col = 0;
		for (; col < this.accessor_cols(); col++) {
			((this.data || nova_null).get(sourceRow) || nova_null).set(col, ((this.data || nova_null).get(sourceRow) || nova_null).get(col) * scalar);
		}
	} else {
		var col;
		col = 0;
		for (; col < this.accessor_cols(); col++) {
			((this.data || nova_null).get(destinationRow) || nova_null).set(col, ((this.data || nova_null).get(destinationRow) || nova_null).get(col) + ((this.data || nova_null).get(sourceRow) || nova_null).get(col) * scalar);
		}
	}
	
};

Matrix.prototype.addRow = function (sourceRow, destinationRow) {
	destinationRow = typeof destinationRow === 'undefined' ? sourceRow : destinationRow;
	var col;
	col = 0;
	for (; col < this.accessor_cols(); col++) {
		((this.data || nova_null).get(destinationRow) || nova_null).set(col, ((this.data || nova_null).get(destinationRow) || nova_null).get(col) + ((this.data || nova_null).get(sourceRow) || nova_null).get(col));
	}
	
};

Matrix.prototype.subtractRow = function (sourceRow, destinationRow) {
	destinationRow = typeof destinationRow === 'undefined' ? sourceRow : destinationRow;
	var col;
	col = 0;
	for (; col < this.accessor_cols(); col++) {
		((this.data || nova_null).get(destinationRow) || nova_null).set(col, ((this.data || nova_null).get(destinationRow) || nova_null).get(col) - ((this.data || nova_null).get(sourceRow) || nova_null).get(col));
	}
	
};

Matrix.prototype.add = function (other, allowUnequalDimensions) {
	var result;
	allowUnequalDimensions = typeof allowUnequalDimensions === 'undefined' ? false : allowUnequalDimensions;
	if (!allowUnequalDimensions) {
		this.checkUnequalDimensions(other);
	}
	result = novaConstructors.newMatrix1(this.accessor_rows(), this.accessor_cols());
	var row;
	row = 0;
	for (; row < NovaMath.min1(this.accessor_rows(), (other || nova_null).accessor_rows()); row++) {
		var col;
		col = 0;
		for (; col < NovaMath.min1(this.accessor_cols(), (other || nova_null).accessor_cols()); col++) {
			((result || nova_null).get(row) || nova_null).set(col, ((this.data || nova_null).get(row) || nova_null).get(col) + ((other || nova_null).get(row) || nova_null).get(col));
		}
	}
	return result;
	
};

Matrix.prototype.plus0 = function (other) {
	return this.add(other, false);
	
};

Matrix.prototype.plus1 = function (other, allowUnequalDimensions) {
	return this.add(other, allowUnequalDimensions);
	
};

Matrix.prototype.subtract = function (other, allowUnequalDimensions) {
	var result;
	allowUnequalDimensions = typeof allowUnequalDimensions === 'undefined' ? false : allowUnequalDimensions;
	if (!allowUnequalDimensions) {
		this.checkUnequalDimensions(other);
	}
	result = novaConstructors.newMatrix1(this.accessor_rows(), this.accessor_cols());
	var row;
	row = 0;
	for (; row < NovaMath.min1(this.accessor_rows(), (other || nova_null).accessor_rows()); row++) {
		var col;
		col = 0;
		for (; col < NovaMath.min1(this.accessor_cols(), (other || nova_null).accessor_cols()); col++) {
			((result || nova_null).get(row) || nova_null).set(col, ((this.data || nova_null).get(row) || nova_null).get(col) - ((other || nova_null).get(row) || nova_null).get(col));
		}
	}
	return result;
	
};

Matrix.prototype.minus0 = function (other) {
	return this.minus1(other, false);
	
};

Matrix.prototype.minus1 = function (other, allowUnequalDimensions) {
	return this.subtract(other, allowUnequalDimensions);
	
};

Matrix.prototype.checkUnequalDimensions = function (other) {
	if (this.accessor_rows() != (other || nova_null).accessor_rows() || this.accessor_cols() != (other || nova_null).accessor_cols()) {
		throw novaConstructors.newInvalidArgumentException(novaConstructors.newString2("The matrices' sizes must be equal to perform this operation"));
	}
	
};

Matrix.prototype.multiply0 = function (other) {
	var self = this;
	
	var result;
	if (this.accessor_cols() != (other || nova_null).accessor_rows()) {
		throw novaConstructors.newInvalidArgumentException(novaConstructors.newString2("Matrix with dimensions ").plus0(NovaInt.toString((this.accessor_rows())).plus0(novaConstructors.newString2("x").plus0(NovaInt.toString((this.accessor_cols())).plus0(novaConstructors.newString2(" cannot be multiplied with matrix with dimensions ").plus0(NovaInt.toString((other.accessor_rows())).plus0(novaConstructors.newString2("x").plus0(NovaInt.toString((other.accessor_cols())).plus0(novaConstructors.newString2(". ").plus0(NovaInt.toString((this.accessor_cols())).plus0(novaConstructors.newString2(" != ").plus0(NovaInt.toString((other.accessor_rows())).plus0(novaConstructors.newString2(""))))))))))))));
	}
	result = novaConstructors.newMatrix1(this.accessor_rows(), (other || nova_null).accessor_cols());
	((result || nova_null).data || nova_null).forEach0((outRow, outR, _3) => {
			(self.data || nova_null).forEach0((row, r, _3) => {
					var c;
					c = 0;
					for (; c < self.accessor_cols(); c++) {
						((result || nova_null).get(r) || nova_null).set(outR, ((result || nova_null).get(r) || nova_null).get(outR) + (row || nova_null).get(c) * ((other || nova_null).get(c) || nova_null).get(outR));
					}
					
			});
			
	});
	return result;
	
};

Matrix.prototype.transpose = function () {
	var self = this;
	
	var result;
	result = novaConstructors.newMatrix1(this.accessor_cols(), this.accessor_rows());
	(this.data || nova_null).forEach0((row, r, _3) => {
			var c;
			c = 0;
			for (; c < self.accessor_cols(); c++) {
				((result || nova_null).get(c) || nova_null).set(r, (row || nova_null).get(c));
			}
			
	});
	return result;
	
};

Matrix.prototype.determinant = function () {
	if (!this.accessor_isSquare()) {
		throw novaConstructors.newInvalidArgumentException(novaConstructors.newString2("Matrix must be square to calculate the determinant"));
	}
	return Matrix.determinant(this.data);
	
};

Matrix.determinant = function (data) {
	var self = this;
	
	var order;
	var det;
	order = (data || nova_null).accessor_count();
	det = 0;
	if (order === 1) {
		det = ((data || nova_null).get(0) || nova_null).get(0);
	} else if (order === 2) {
	}
	else {
		var j1;
		j1 = 0;
		for (; j1 < order; j1++) {
			var m;
			m = novaConstructors.newArray0(order - 1).map0((_1, _2, _3) => {
					return novaConstructors.newArray1Double0(order - 1).map1((_1, _2, _3) => {
							return 0;
							
					});
					
			});
			var i;
			i = 1;
			for (; i < order; i++) {
				var j2;
				j2 = 0;
				var j;
				j = 0;
				for (; j < order; j++) {
					if (j != j1) {
						((m || nova_null).get(i - 1) || nova_null).set(j2++, ((data || nova_null).get(i) || nova_null).get(j));
					}
				}
			}
			det += NovaMath.pow(-1.0, 1.0 + j1 + 1.0) * ((data || nova_null).get(0) || nova_null).get(j1) * Matrix.determinant(m);
		}
	}
	return det;
	
};

Matrix.prototype.toString = function () {
	var self = this;
	
	return ((this.data || nova_null).map0((_1, _2, _3) => {
				return novaConstructors.newString2("[ ").plus0(((_1.join(novaConstructors.newString2("\t"))) || nova_null).plus0(novaConstructors.newString2(" ]")));
				
	}) || nova_null).join(novaConstructors.newString2("\n"));
	
};

Matrix.prototype.get = function (index) {
	return (this.data || nova_null).get(index);
	
};

Matrix.prototype.set = function (index, value) {
	(this.data || nova_null).set0(index, value);
	return value;
	
};

Matrix.prototype.accessor_isIdentity = function () {
	if (!this.accessor_isSquare()) {
		return false;
	}
	var row;
	row = 0;
	for (; row < this.accessor_rows(); row++) {
		var col;
		col = 0;
		for (; col < this.accessor_cols(); col++) {
			var d;
			d = ((this.data || nova_null).get(row) || nova_null).get(col);
			if (row === col && (d < Matrix.LOWER_TOLERANCE || d > Matrix.UPPER_TOLERANCE) || row != col && (d < -Matrix.TOLERANCE || d > Matrix.TOLERANCE)) {
				return false;
			}
		}
	}
	return true;
	
};

Matrix.prototype.mutator_isIdentity = function () {
	
};

Matrix.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/Matrix"), false);
	
};

Matrix.prototype.mutator__js_class = function () {
	
};

Matrix.prototype.accessor_isSquare = function () {
	return this.accessor_cols() === this.accessor_rows();
	
};

Matrix.prototype.mutator_isSquare = function () {
	
};

Matrix.prototype.accessor_rows = function () {
	return (this.data || nova_null).accessor_count();
	
};

Matrix.prototype.mutator_rows = function () {
	
};

Matrix.prototype.accessor_cols = function () {
	return ((this.data || nova_null).get(0) || nova_null).accessor_count();
	
};

Matrix.prototype.mutator_cols = function () {
	
};

Matrix.prototype.super = function () {
	
};

novaConstructors.newMatrix0 = function (order) {
	var __value = new Matrix()
	NovaObject.call(__value);
	Matrix.prototype.super.apply(__value, [].slice.call(arguments));
	return Matrix.init0.call(__value, order);
	
};

novaConstructors.newMatrix1 = function (rows, cols) {
	var __value = new Matrix()
	NovaObject.call(__value);
	Matrix.prototype.super.apply(__value, [].slice.call(arguments));
	return Matrix.init1.call(__value, rows, cols);
	
};

novaConstructors.newMatrix2 = function (data) {
	var __value = new Matrix()
	NovaObject.call(__value);
	Matrix.prototype.super.apply(__value, [].slice.call(arguments));
	return Matrix.init2.call(__value, data);
	
};

var NumericOperand = function () {
	this.data = null;
	
	
};

NumericOperand.prototype = Object.create(NovaObject.prototype);
NumericOperand.prototype.constructor = NumericOperand;


NumericOperand.prototype.destroy = function () {
	
};

NumericOperand.init = function (data) {
	this.data = data;
	return this;
	
};

NumericOperand.prototype.toString = function () {
	return (((this.data) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""));
	
};

NumericOperand.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/NumericOperand"), false);
	
};

NumericOperand.prototype.mutator__js_class = function () {
	
};

NumericOperand.prototype.super = function () {
	
};

novaConstructors.newNumericOperand = function (data) {
	var __value = new NumericOperand()
	NovaObject.call(__value);
	NumericOperand.prototype.super.apply(__value, [].slice.call(arguments));
	return NumericOperand.init.call(__value, data);
	
};

var NumericOperation = function () {
	this.leftOperand = null;
	this.rightOperand = null;
	this.operator = null;
	
	
};

NumericOperation.prototype = Object.create(NumericOperand.prototype);
NumericOperation.prototype.constructor = NumericOperation;


NumericOperation.prototype.destroy = function () {
	
};

NumericOperation.init0 = function (operation) {
	return this;
	
};

NumericOperation.init1 = function (left, operator, right) {
	var leftOperator;
	var rightOperator;
	leftOperator = this.decodeOperand(left);
	rightOperator = this.decodeOperand(right);
	if ((left) === null) {
		throw novaConstructors.newException(novaConstructors.newString2("Left operand '").plus0(((left) || nova_null).plus0(novaConstructors.newString2("' is invalid"))));
	} else if ((right) === null) {
	}
	return NumericOperation.init2.call(this, this.leftOperand, operator, this.rightOperand);
	return this;
	
};

NumericOperation.init2 = function (left, operator, right) {
	this.leftOperand = left;
	this.rightOperand = right;
	this.operator = operator;
	return this;
	
};

NumericOperation.prototype.decodeOperand = function (operand) {
	return null;
	
};

NumericOperation.getType0 = function (s) {
	if ((s || nova_null).count <= 0) {
		return 0;
	}
	return NumericOperation.getType1(((s || nova_null).chars || nova_null).accessor_first());
	
};

NumericOperation.getType1 = function (c) {
	if (NumericOperation.isNumeric(c)) {
		return NumericOperation.NUMBER;
	}
	if (NumericOperation.isOperator(c)) {
		return NumericOperation.OPERATOR;
	}
	if ((NumericOperation.INVALID_OPERATORS || nova_null).contains(c)) {
		return 0;
	}
	return NumericOperation.VARIABLE;
	
};

NumericOperation.searchNextType = function (str, start) {
	var operators;
	var minIndex;
	var minRank;
	var index;
	operators = novaConstructors.newArray1Int();
	minIndex = NovaInt.MAX_VALUE;
	minRank = NovaInt.MIN_VALUE;
	index = NumericOperation.nextOperator(str, start);
	while (index >= 0) {
		var operator;
		var rank;
		operator = ((str || nova_null).chars || nova_null).get(index);
		rank = NumericOperation.getOperatorRank(operator);
		if (rank > minRank) {
			minIndex = index;
			minRank = rank;
		}
		index = NumericOperation.nextOperator(str, index + 1);
	}
	if (minIndex >= (str || nova_null).count) {
		return null;
	}
	minIndex = NumericOperation.nextNonWhitespaceIndex(str, minIndex - 1, -1) + 1;
	return novaConstructors.newTuple22Int(novaConstructors.newBounds(start, minIndex), index);
	
};

NumericOperation.nextOperator = function (str, start) {
	var i;
	i = start;
	for (; i < (str || nova_null).count; i++) {
		if (NumericOperation.isOperator(((str || nova_null).chars || nova_null).get(i))) {
			return i;
		}
	}
	return -1;
	
};

NumericOperation.getOperatorRank = function (operator) {
	switch (operator) {
		case '-':
		
		case '+':
		return NumericOperation.ADDITION;
		
		case '/':
		
		case '*':
		return NumericOperation.MULTIPLICATION;
		
		case '^':
		return NumericOperation.EXPONENT;
		
		case '[':
		
		case '(':
		return NumericOperation.GROUPING;
		
		default:
		return NumericOperation.INVALID;
		
	}
	
};

NumericOperation.nextNonWhitespaceIndex = function (str, start, direction) {
	while (start >= 0 && start < (str || nova_null).count && NumericOperation.isWhitespace(((str || nova_null).chars || nova_null).get(start))) {
		start = start + direction;
	}
	if (start < 0 || start >= (str || nova_null).count) {
		return -1;
	} else {
		return start - direction;
	}
	
};

NumericOperation.isLetter = function (c) {
	return !NumericOperation.isOperator(c) && !NumericOperation.isWhitespace(c);
	
};

NumericOperation.isNumeric = function (c) {
	return (NumericOperation.NUMERIC_CHARS || nova_null).contains(c);
	
};

NumericOperation.isOperator = function (c) {
	return (NumericOperation.VALID_OPERATORS || nova_null).contains(c);
	
};

NumericOperation.isWhitespace = function (c) {
	return (NumericOperation.WHITESPACE_CHARS || nova_null).contains(c);
	
};

NumericOperation.prototype.toString = function () {
	return (((this.leftOperand) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2("").plus0(((this.operator) || nova_null).plus0(novaConstructors.newString2("").plus0((((this.rightOperand) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))));
	
};

NumericOperation.generated23 = function () {
	var temp;
	temp = [];
	temp[0] = '-';
	temp[1] = '+';
	temp[2] = '!';
	temp[3] = '=';
	temp[4] = '%';
	temp[5] = '^';
	temp[6] = '*';
	temp[7] = '/';
	temp[8] = '>';
	temp[9] = '<';
	temp[10] = '[';
	temp[11] = ']';
	temp[12] = '(';
temp[13] = ')';
return novaConstructors.newArray1Char1(temp, 14);
};

NumericOperation.generated24 = function () {
	var temp;
	temp = [];
	temp[0] = '`';
	temp[1] = '~';
	temp[2] = '@';
	temp[3] = '#';
	temp[4] = '$';
	temp[5] = '&';
	temp[6] = '_';
	temp[7] = ';';
	temp[8] = ':';
	temp[9] = '\'';
	temp[10] = '"';
	temp[11] = '|';
	temp[12] = '\\';
	temp[13] = ',';
	temp[14] = '.';
	temp[15] = '?';
	return novaConstructors.newArray1Char1(temp, 16);
	
};

NumericOperation.generated25 = function () {
	var temp;
	temp = [];
	temp[0] = ' ';
	temp[1] = '\n';
	temp[2] = '\r';
	temp[3] = '\t';
	return novaConstructors.newArray1Char1(temp, 4);
	
};

NumericOperation.generated26 = function () {
	var temp;
	temp = [];
	temp[0] = '0';
	temp[1] = '1';
	temp[2] = '2';
	temp[3] = '3';
	temp[4] = '4';
	temp[5] = '5';
	temp[6] = '6';
	temp[7] = '7';
	temp[8] = '8';
	temp[9] = '9';
	return novaConstructors.newArray1Char1(temp, 10);
	
};

NumericOperation.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/NumericOperation"), false);
	
};

NumericOperation.prototype.mutator__js_class = function () {
	
};

NumericOperation.prototype.super = function () {
	
};

novaConstructors.newNumericOperation0 = function (operation) {
	var __value = new NumericOperation()
	NumericOperand.call(__value);
	NumericOperation.prototype.super.apply(__value, [].slice.call(arguments));
	return NumericOperation.init0.call(__value, operation);
	
};

novaConstructors.newNumericOperation1 = function (left, operator, right) {
	var __value = new NumericOperation()
	NumericOperand.call(__value);
	NumericOperation.prototype.super.apply(__value, [].slice.call(arguments));
	return NumericOperation.init1.call(__value, left, operator, right);
	
};

novaConstructors.newNumericOperation2 = function (left, operator, right) {
	var __value = new NumericOperation()
	NumericOperand.call(__value);
	NumericOperation.prototype.super.apply(__value, [].slice.call(arguments));
	return NumericOperation.init2.call(__value, left, operator, right);
	
};

var Statement = function () {
	
	
};

Statement.prototype = Object.create(NovaObject.prototype);
Statement.prototype.constructor = Statement;


Statement.prototype.destroy = function () {
	
};

Statement.init = function () {
	return this;
	
};

Statement.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/Statement"), false);
	
};

Statement.prototype.mutator__js_class = function () {
	
};

Statement.prototype.super = function () {
	
};

novaConstructors.newStatement = function () {
	var __value = new Statement()
	NovaObject.call(__value);
	Statement.prototype.super.apply(__value, [].slice.call(arguments));
	return Statement.init.call(__value);
	
};

var NumericStatement = function () {
	this.tree = null;
	
	
};

NumericStatement.prototype = Object.create(Statement.prototype);
NumericStatement.prototype.constructor = NumericStatement;


NumericStatement.prototype.destroy = function () {
	
};

NumericStatement.init = function (statement) {
	this.tree = novaConstructors.newNumericTree((statement || nova_null).trim());
	return this;
	
};

NumericStatement.prototype.toString = function () {
	return (((this.tree) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""));
	
};

NumericStatement.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/NumericStatement"), false);
	
};

NumericStatement.prototype.mutator__js_class = function () {
	
};

NumericStatement.prototype.super = function () {
	
};

novaConstructors.newNumericStatement = function (statement) {
	var __value = new NumericStatement()
	Statement.call(__value);
	NumericStatement.prototype.super.apply(__value, [].slice.call(arguments));
	return NumericStatement.init.call(__value, statement);
	
};

var NumericTree = function () {
	this.root = null;
	
	
};

NumericTree.prototype = Object.create(NovaObject.prototype);
NumericTree.prototype.constructor = NumericTree;


NumericTree.prototype.destroy = function () {
	
};

NumericTree.init = function (statement) {
	this.root = novaConstructors.newNumericOperation0(statement);
	return this;
	
};

NumericTree.prototype.toString = function () {
	return (((this.root) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""));
	
};

NumericTree.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/NumericTree"), false);
	
};

NumericTree.prototype.mutator__js_class = function () {
	
};

NumericTree.prototype.super = function () {
	
};

novaConstructors.newNumericTree = function (statement) {
	var __value = new NumericTree()
	NovaObject.call(__value);
	NumericTree.prototype.super.apply(__value, [].slice.call(arguments));
	return NumericTree.init.call(__value, statement);
	
};

var Polynomial = function () {
	this.coefficients = null;
	this.degrees = null;
	this.signs = null;
	
	
};

Polynomial.prototype = Object.create(NovaObject.prototype);
Polynomial.prototype.constructor = Polynomial;


Polynomial.prototype.destroy = function () {
	
};

Polynomial.init = function (polynomial) {
	var start;
	var reading;
	start = 0;
	reading = false;
	this.coefficients = novaConstructors.newArray1Double();
	this.degrees = novaConstructors.newArray1Double();
	this.signs = novaConstructors.newArray1Byte();
	var i;
	i = 0;
	for (; i < (polynomial || nova_null).count; i++) {
		if (!Polynomial.isLetter(((polynomial || nova_null).chars || nova_null).get(i))) {
			reading = false;
		} else if (!reading) {
		}
		else {
		}
	}
	return this;
	
};

Polynomial.isLetter = function (c) {
	return !Polynomial.isSymbol(c) && !Polynomial.isWhitespace(c);
	
};

Polynomial.isSymbol = function (c) {
	return (Polynomial.SYMBOLS_CHARS || nova_null).contains(c);
	
};

Polynomial.isWhitespace = function (c) {
	return (Polynomial.WHITESPACE_CHARS || nova_null).contains(c);
	
};

Polynomial.generated27 = function () {
	var temp;
	temp = [];
	temp[0] = '-';
	temp[1] = '+';
	temp[2] = '~';
	temp[3] = '!';
	temp[4] = '=';
	temp[5] = '%';
	temp[6] = '^';
	temp[7] = '&';
	temp[8] = '|';
	temp[9] = '*';
	temp[10] = '/';
	temp[11] = '>';
	temp[12] = '<';
	temp[13] = ',';
	temp[14] = '"';
	temp[15] = '\'';
	temp[16] = '[';
	temp[17] = ']';
	temp[18] = '{';
temp[19] = '}';
temp[20] = ';';
temp[21] = '(';temp[22] = ')';
return novaConstructors.newArray1Char1(temp, 23);
};

Polynomial.generated28 = function () {
	var temp;
	temp = [];
	temp[0] = ' ';
	temp[1] = '\n';
	temp[2] = '\r';
	temp[3] = '\t';
	return novaConstructors.newArray1Char1(temp, 4);
	
};

Polynomial.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/Polynomial"), false);
	
};

Polynomial.prototype.mutator__js_class = function () {
	
};

Polynomial.prototype.super = function () {
	
};

novaConstructors.newPolynomial = function (polynomial) {
	var __value = new Polynomial()
	NovaObject.call(__value);
	Polynomial.prototype.super.apply(__value, [].slice.call(arguments));
	return Polynomial.init.call(__value, polynomial);
	
};

var StatementComponent = function () {
	this.data = null;
	this.next = null;
	
	
};

StatementComponent.prototype = Object.create(NovaObject.prototype);
StatementComponent.prototype.constructor = StatementComponent;


StatementComponent.prototype.destroy = function () {
	
};

StatementComponent.init = function (data, next) {
	next = typeof next === 'undefined' ? null : next;
	this.data = data;
	this.next = next;
	return this;
	
};

StatementComponent.prototype.toString = function () {
	return (((this.data) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""));
	
};

StatementComponent.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/StatementComponent"), false);
	
};

StatementComponent.prototype.mutator__js_class = function () {
	
};

StatementComponent.prototype.super = function () {
	
};

novaConstructors.newStatementComponent = function (data, next) {
	var __value = new StatementComponent()
	NovaObject.call(__value);
	StatementComponent.prototype.super.apply(__value, [].slice.call(arguments));
	return StatementComponent.init.call(__value, data, next);
	
};

var VariableOperand = function () {
	
	
};

VariableOperand.prototype = Object.create(NovaObject.prototype);
VariableOperand.prototype.constructor = VariableOperand;


VariableOperand.prototype.destroy = function () {
	
};

VariableOperand.init = function () {
	return this;
	
};

VariableOperand.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/VariableOperand"), false);
	
};

VariableOperand.prototype.mutator__js_class = function () {
	
};

VariableOperand.prototype.super = function () {
	
};

novaConstructors.newVariableOperand = function () {
	var __value = new VariableOperand()
	NovaObject.call(__value);
	VariableOperand.prototype.super.apply(__value, [].slice.call(arguments));
	return VariableOperand.init.call(__value);
	
};

var Vector = function () {
	this.data = null;
	
	
};

Vector.prototype = Object.create(NovaObject.prototype);
Vector.prototype.constructor = Vector;


Vector.prototype.destroy = function () {
	
};

Vector.init0 = function (size) {
	return Vector.init1.call(this, novaConstructors.newArray1Double0(size));
	return this;
	
};

Vector.init1 = function (data) {
	this.data = data;
	return this;
	
};

Vector.prototype.dotProduct = function (other) {
	var self = this;
	
	return (this.data || nova_null).sum((x, i, _3) => {
			return x * ((other || nova_null).data || nova_null).get(i);
			
	});
	
};

Vector.prototype.innerProduct = function (other) {
	return this.dotProduct(other);
	
};

Vector.prototype.scale = function (scalar) {
	var self = this;
	
	return (this.data || nova_null).forEach1((n, i, d) => {
			(d || nova_null).set(i, n * scalar);
			
	});
	
};

Vector.prototype.normalize = function () {
	var self = this;
	
	var m;
	return (m = this.accessor_magnitude()) > 0 ? (this.data || nova_null).forEach1((n, i, d) => {
			(d || nova_null).set(i, /*Double*//*Double*/n / m);
			
	}) : (this.data || nova_null).forEach1((n, i, d) => {
			(d || nova_null).set(i, 0);
			
	});
	
};

Vector.prototype.toString = function () {
	return novaConstructors.newString2("<").plus0(((this.data.join(novaConstructors.newString2(", "))) || nova_null).plus0(novaConstructors.newString2(">")));
	
};

Vector.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/Vector"), false);
	
};

Vector.prototype.mutator__js_class = function () {
	
};

Vector.prototype.accessor_magnitude = function () {
	var self = this;
	
	return NovaMath.sqrt((this.data || nova_null).sum((n, _2, _3) => {
				return n * n;
				
	}));
	
};

Vector.prototype.mutator_magnitude = function () {
	
};

Vector.prototype.super = function () {
	
};

novaConstructors.newVector0 = function (size) {
	var __value = new Vector()
	NovaObject.call(__value);
	Vector.prototype.super.apply(__value, [].slice.call(arguments));
	return Vector.init0.call(__value, size);
	
};

novaConstructors.newVector1 = function (data) {
	var __value = new Vector()
	NovaObject.call(__value);
	Vector.prototype.super.apply(__value, [].slice.call(arguments));
	return Vector.init1.call(__value, data);
	
};

var Vector2D = function () {
	this.y = 0;
	
	
};

Vector2D.prototype = Object.create(Vector.prototype);
Vector2D.prototype.constructor = Vector2D;


Vector2D.prototype.destroy = function () {
	
};

Vector2D.init = function () {
	return Vector.init0.call(this, 2);
	return this;
	
};

Vector2D.init0 = function (x, y) {
	return Vector2D.init.call(this);
	this.mutator_x(x);
	this.mutator_y(y);
	return this;
	
};

Vector2D.prototype.dotProduct = function (other) {
	return this.super_dotProduct(other);
	
};

Vector2D.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/Vector2D"), false);
	
};

Vector2D.prototype.mutator__js_class = function () {
	
};

Vector2D.prototype.accessor_x = function () {
	return (this.data || nova_null).get(0);
	
};

Vector2D.prototype.mutator_x = function (value) {
	(this.data || nova_null).set(0, value);
	return value;
	
};

Vector2D.prototype.accessor_y = function () {
	return (this.data || nova_null).get(1);
	
};

Vector2D.prototype.mutator_y = function (value) {
	(this.data || nova_null).set(1, value);
	return value;
	
};

Vector2D.prototype.super = function () {
	
};

novaConstructors.newVector2D0 = function () {
	var __value = new Vector2D()
	Vector.call(__value);
	Vector2D.prototype.super.apply(__value, [].slice.call(arguments));
	return Vector2D.init.call(__value);
	
};

novaConstructors.newVector2D1 = function (x, y) {
	var __value = new Vector2D()
	Vector.call(__value);
	Vector2D.prototype.super.apply(__value, [].slice.call(arguments));
	return Vector2D.init0.call(__value, x, y);
	
};

var Vector3D = function () {
	this.y = 0;
	this._js_class = null;
	
	
};

Vector3D.prototype = Object.create(Vector.prototype);
Vector3D.prototype.constructor = Vector3D;


Vector3D.prototype.destroy = function () {
	
};

Vector3D.init = function () {
	return Vector.init0.call(this, 3);
	return this;
	
};

Vector3D.init0 = function (x, y, z) {
	return Vector3D.init.call(this);
	this.mutator_x(x);
	this.mutator_y(y);
	this.mutator_z(z);
	return this;
	
};

Vector3D.prototype.crossProduct = function (other) {
	return novaConstructors.newVector3D1(this.accessor_y() * (other || nova_null).accessor_z() - this.accessor_z() * (other || nova_null).accessor_y(), this.accessor_z() * (other || nova_null).accessor_x() - this.accessor_x() * (other || nova_null).accessor_z(), this.accessor_x() * (other || nova_null).accessor_y() - this.accessor_y() * (other || nova_null).accessor_x());
	
};

Vector3D.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/Vector3D"), false);
	
};

Vector3D.prototype.mutator__js_class = function () {
	
};

Vector3D.prototype.accessor_x = function () {
	return (this.data || nova_null).get(0);
	
};

Vector3D.prototype.mutator_x = function (value) {
	(this.data || nova_null).set(0, value);
	return value;
	
};

Vector3D.prototype.accessor_y = function () {
	return (this.data || nova_null).get(1);
	
};

Vector3D.prototype.mutator_y = function (value) {
	(this.data || nova_null).set(1, value);
	return value;
	
};

Vector3D.prototype.accessor_z = function () {
	return (this.data || nova_null).get(2);
	
};

Vector3D.prototype.mutator_z = function (value) {
	(this.data || nova_null).set(2, value);
	return value;
	
};

Vector3D.prototype.super = function () {
	
};

novaConstructors.newVector3D0 = function () {
	var __value = new Vector3D()
	Vector.call(__value);
	Vector3D.prototype.super.apply(__value, [].slice.call(arguments));
	return Vector3D.init.call(__value);
	
};

novaConstructors.newVector3D1 = function (x, y, z) {
	var __value = new Vector3D()
	Vector.call(__value);
	Vector3D.prototype.super.apply(__value, [].slice.call(arguments));
	return Vector3D.init0.call(__value, x, y, z);
	
};

var Vector4D = function () {
	this.y = 0;
	this.w = 0;
	
	
};

Vector4D.prototype = Object.create(Vector.prototype);
Vector4D.prototype.constructor = Vector4D;


Vector4D.prototype.destroy = function () {
	
};

Vector4D.init = function () {
	return Vector.init0.call(this, 4);
	return this;
	
};

Vector4D.init0 = function (x, y, z, w) {
	return Vector4D.init.call(this);
	this.mutator_x(x);
	this.mutator_y(y);
	this.mutator_z(z);
	this.mutator_w(w);
	return this;
	
};

Vector4D.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/Vector4D"), false);
	
};

Vector4D.prototype.mutator__js_class = function () {
	
};

Vector4D.prototype.accessor_x = function () {
	return (this.data || nova_null).get(0);
	
};

Vector4D.prototype.mutator_x = function (value) {
	(this.data || nova_null).set(0, value);
	return value;
	
};

Vector4D.prototype.accessor_y = function () {
	return (this.data || nova_null).get(1);
	
};

Vector4D.prototype.mutator_y = function (value) {
	(this.data || nova_null).set(1, value);
	return value;
	
};

Vector4D.prototype.accessor_z = function () {
	return (this.data || nova_null).get(2);
	
};

Vector4D.prototype.mutator_z = function (value) {
	(this.data || nova_null).set(2, value);
	return value;
	
};

Vector4D.prototype.accessor_w = function () {
	return (this.data || nova_null).get(3);
	
};

Vector4D.prototype.mutator_w = function (value) {
	(this.data || nova_null).set(3, value);
	return value;
	
};

Vector4D.prototype.super = function () {
	
};

novaConstructors.newVector4D0 = function () {
	var __value = new Vector4D()
	Vector.call(__value);
	Vector4D.prototype.super.apply(__value, [].slice.call(arguments));
	return Vector4D.init.call(__value);
	
};

novaConstructors.newVector4D1 = function (x, y, z, w) {
	var __value = new Vector4D()
	Vector.call(__value);
	Vector4D.prototype.super.apply(__value, [].slice.call(arguments));
	return Vector4D.init0.call(__value, x, y, z, w);
	
};

var Calculus = function () {
	
	
};

Calculus.prototype = Object.create(NovaObject.prototype);
Calculus.prototype.constructor = Calculus;


Calculus.prototype.destroy = function () {
	
};

Calculus.derivative = function (statement) {
	return null;
	
};

Calculus.init = function () {
	return this;
	
};

Calculus.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/calculus/Calculus"), false);
	
};

Calculus.prototype.mutator__js_class = function () {
	
};

Calculus.prototype.super = function () {
	
};

novaConstructors.newCalculus = function () {
	var __value = new Calculus()
	NovaObject.call(__value);
	Calculus.prototype.super.apply(__value, [].slice.call(arguments));
	return Calculus.init.call(__value);
	
};

var HuffmanTree = function () {
	
	
};

HuffmanTree.prototype = Object.create(Tree.prototype);
HuffmanTree.prototype.constructor = HuffmanTree;


HuffmanTree.prototype.destroy = function () {
	
};

HuffmanTree.init = function () {
	return this;
	
};

HuffmanTree.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/huffman/HuffmanTree"), false);
	
};

HuffmanTree.prototype.mutator__js_class = function () {
	
};

HuffmanTree.prototype.super = function () {
	
};

novaConstructors.newHuffmanTree = function () {
	var __value = new HuffmanTree()
	Tree.call(__value);
	HuffmanTree.prototype.super.apply(__value, [].slice.call(arguments));
	return HuffmanTree.init.call(__value);
	
};

var LogicalStatement = function () {
	this.components = null;
	this.statement = null;
	
	
};

LogicalStatement.prototype = Object.create(Statement.prototype);
LogicalStatement.prototype.constructor = LogicalStatement;


LogicalStatement.prototype.destroy = function () {
	
};

LogicalStatement.init = function (statement) {
	this.statement = statement;
	this.components = novaConstructors.newArray();
	return this;
	
};

LogicalStatement.prototype.toString = function () {
	return this.statement;
	
};

LogicalStatement.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/logic/LogicalStatement"), false);
	
};

LogicalStatement.prototype.mutator__js_class = function () {
	
};

LogicalStatement.prototype.super = function () {
	
};

novaConstructors.newLogicalStatement = function (statement) {
	var __value = new LogicalStatement()
	Statement.call(__value);
	LogicalStatement.prototype.super.apply(__value, [].slice.call(arguments));
	return LogicalStatement.init.call(__value, statement);
	
};

var Conclusion = function () {
	
	
};

Conclusion.prototype = Object.create(LogicalStatement.prototype);
Conclusion.prototype.constructor = Conclusion;


Conclusion.prototype.destroy = function () {
	
};

Conclusion.init = function (statement) {
	return LogicalStatement.init.call(this, statement);
	return this;
	
};

Conclusion.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/logic/Conclusion"), false);
	
};

Conclusion.prototype.mutator__js_class = function () {
	
};

Conclusion.prototype.super = function () {
	
};

novaConstructors.newConclusion = function (statement) {
	var __value = new Conclusion()
	LogicalStatement.call(__value);
	Conclusion.prototype.super.apply(__value, [].slice.call(arguments));
	return Conclusion.init.call(__value, statement);
	
};

var Hypothesis = function () {
	
	
};

Hypothesis.prototype = Object.create(LogicalStatement.prototype);
Hypothesis.prototype.constructor = Hypothesis;


Hypothesis.prototype.destroy = function () {
	
};

Hypothesis.init = function (statement) {
	return LogicalStatement.init.call(this, statement);
	return this;
	
};

Hypothesis.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/logic/Hypothesis"), false);
	
};

Hypothesis.prototype.mutator__js_class = function () {
	
};

Hypothesis.prototype.super = function () {
	
};

novaConstructors.newHypothesis = function (statement) {
	var __value = new Hypothesis()
	LogicalStatement.call(__value);
	Hypothesis.prototype.super.apply(__value, [].slice.call(arguments));
	return Hypothesis.init.call(__value, statement);
	
};

var InvalidFormulaException = function () {
	
	
};

InvalidFormulaException.prototype = Object.create(Exception.prototype);
InvalidFormulaException.prototype.constructor = InvalidFormulaException;


InvalidFormulaException.prototype.destroy = function () {
	
};

InvalidFormulaException.init = function (message) {
	return Exception.init.call(this, message);
	return this;
	
};

InvalidFormulaException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/logic/InvalidFormulaException"), false);
	
};

InvalidFormulaException.prototype.mutator__js_class = function () {
	
};

InvalidFormulaException.prototype.super = function () {
	
};

novaConstructors.newInvalidFormulaException = function (message) {
	var __value = new InvalidFormulaException()
	Exception.call(__value);
	InvalidFormulaException.prototype.super.apply(__value, [].slice.call(arguments));
	return InvalidFormulaException.init.call(__value, message);
	
};

var StatementComponent = function () {
	
	
};

StatementComponent.prototype = Object.create(NovaObject.prototype);
StatementComponent.prototype.constructor = StatementComponent;


StatementComponent.prototype.destroy = function () {
	
};

StatementComponent.init = function () {
	return this;
	
};

StatementComponent.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/logic/StatementComponent"), false);
	
};

StatementComponent.prototype.mutator__js_class = function () {
	
};

StatementComponent.prototype.super = function () {
	
};

novaConstructors.newStatementComponent = function () {
	var __value = new StatementComponent()
	NovaObject.call(__value);
	StatementComponent.prototype.super.apply(__value, [].slice.call(arguments));
	return StatementComponent.init.call(__value);
	
};

var LogicalConnective = function () {
	
	
};

LogicalConnective.prototype = Object.create(StatementComponent.prototype);
LogicalConnective.prototype.constructor = LogicalConnective;


LogicalConnective.prototype.destroy = function () {
	
};

LogicalConnective.init = function () {
	return this;
	
};

LogicalConnective.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/logic/LogicalConnective"), false);
	
};

LogicalConnective.prototype.mutator__js_class = function () {
	
};

LogicalConnective.prototype.super = function () {
	
};

novaConstructors.newLogicalConnective = function () {
	var __value = new LogicalConnective()
	StatementComponent.call(__value);
	LogicalConnective.prototype.super.apply(__value, [].slice.call(arguments));
	return LogicalConnective.init.call(__value);
	
};

var StatementGroup = function () {
	this.statement = null;
	this.bounds = null;
	
	
};

StatementGroup.prototype = Object.create(NovaObject.prototype);
StatementGroup.prototype.constructor = StatementGroup;


StatementGroup.prototype.destroy = function () {
	
};

StatementGroup.init = function (statement, bounds) {
	this.statement = statement;
	this.bounds = bounds;
	return this;
	
};

StatementGroup.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/logic/StatementGroup"), false);
	
};

StatementGroup.prototype.mutator__js_class = function () {
	
};

StatementGroup.prototype.super = function () {
	
};

novaConstructors.newStatementGroup = function (statement, bounds) {
	var __value = new StatementGroup()
	NovaObject.call(__value);
	StatementGroup.prototype.super.apply(__value, [].slice.call(arguments));
	return StatementGroup.init.call(__value, statement, bounds);
	
};

var StatementLetter = function () {
	this.letter = null;
	this.representation = null;
	
	
};

StatementLetter.prototype = Object.create(StatementComponent.prototype);
StatementLetter.prototype.constructor = StatementLetter;


StatementLetter.prototype.destroy = function () {
	
};

StatementLetter.init = function (letter, representation) {
	this.letter = letter;
	this.representation = representation;
	return this;
	
};

StatementLetter.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/logic/StatementLetter"), false);
	
};

StatementLetter.prototype.mutator__js_class = function () {
	
};

StatementLetter.prototype.super = function () {
	
};

novaConstructors.newStatementLetter = function (letter, representation) {
	var __value = new StatementLetter()
	StatementComponent.call(__value);
	StatementLetter.prototype.super.apply(__value, [].slice.call(arguments));
	return StatementLetter.init.call(__value, letter, representation);
	
};

var WFF = function () {
	this.hypotheses = null;
	this.conclusion = null;
	this.wff = null;
	this.letters = null;
	
	
};

WFF.prototype = Object.create(NovaObject.prototype);
WFF.prototype.constructor = WFF;


WFF.prototype.destroy = function () {
	
};

WFF.init = function (wff, letters) {
	this.wff = wff;
	this.letters = letters;
	wff = (wff || nova_null).trim();
	this.hypotheses = novaConstructors.newArray();
	this.decodeFormula();
	return this;
	
};

WFF.prototype.decodeFormula = function () {
	var conclusionGroup;
	var conclusion;
	var statements;
	conclusionGroup = this.searchForConclusion(this.wff);
	if ((conclusionGroup) === null) {
		throw novaConstructors.newInvalidFormulaException(novaConstructors.newString2("No valid conclusion found"));
	}
	conclusion = (conclusionGroup || nova_null).statement;
	NovaConsole.writeLine1(novaConstructors.newString2("Conclusion: ").plus0((conclusion || nova_null).toString()));
	this.wff = ((conclusionGroup || nova_null).bounds || nova_null).extractPreString(this.wff);
	statements = this.decodeHypotheses(this.wff);
	var i;
	i = 0;
	for (; i < (statements || nova_null).accessor_count(); i++) {
		var group;
		group = (statements || nova_null).get(i);
		(this.hypotheses || nova_null).add0((group || nova_null).statement);
	}
	var n;
	n = 0;
	for (; n < (this.hypotheses || nova_null).accessor_count(); n++) {
		NovaConsole.writeLine2((this.hypotheses || nova_null).get(n));
	}
	
};

WFF.prototype.searchForConclusion = function (wff) {
	var index;
	var conclusionStart;
	var bounds;
	var conclusion;
	index = (wff || nova_null).lastIndexOf1(novaConstructors.newString2("->"));
	if (index < 0) {
		return null;
	}
	if (((wff || nova_null).chars || nova_null).accessor_last() === ')') {
	var first;
	first = WFF.findEndingMatch(wff, '(', ')', (wff || nova_null).count - 1, -1);}
conclusionStart = WFF.nextNonWhitespaceIndex(wff, index + 2, 1);
bounds = novaConstructors.newBounds(conclusionStart, (wff || nova_null).count);
conclusion = novaConstructors.newConclusion((bounds || nova_null).extractString(wff));
(bounds || nova_null).start = WFF.nextNonWhitespaceIndex(wff, index - 1, -1) + 1;
return novaConstructors.newStatementGroup(conclusion, bounds);
};

WFF.prototype.decodeHypotheses = function (wff) {
	var list;
	var next;
	var prev;
	var index;
	list = novaConstructors.newArray();
	next = 0;
	prev = 0;
	index = (wff || nova_null).indexOf2(novaConstructors.newString2("&"));
	while (index >= 0) {
		next = WFF.nextNonWhitespaceIndex(wff, index - 1, -1);
		(list || nova_null).add0(this.generateHypothesis(wff, prev, next + 1));
		prev = WFF.nextNonWhitespaceIndex(wff, index + 1, 1);
		index = (wff || nova_null).indexOf2(novaConstructors.newString2("&"), prev + 1);
	}
	(list || nova_null).add0(this.generateHypothesis(wff, prev, (wff || nova_null).count));
	return list;
	
};

WFF.prototype.generateHypothesis = function (wff, start, end) {
	var bounds;
	var h;
	bounds = novaConstructors.newBounds(start, end);
	h = novaConstructors.newHypothesis((bounds || nova_null).extractString(wff));
	return novaConstructors.newStatementGroup(h, bounds);
	
};

WFF.prototype.searchForStatement = function (wff) {
	return null;
	
};

WFF.nextNonWhitespaceIndex = function (wff, index, direction) {
	return WFF.nextWhitespaceIndex1(wff, index, direction, true);
	
};

WFF.nextWhitespaceIndex0 = function (wff, index, direction) {
	return WFF.nextWhitespaceIndex1(wff, index, direction, false);
	
};

WFF.nextWhitespaceIndex1 = function (wff, index, direction, opposite, defaultReturnValue) {
	var i;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	i = index;
	while (i < (wff || nova_null).count && i >= 0) {
		var c;
		c = ((wff || nova_null).chars || nova_null).get(i);
		if ((WFF.whitespace || nova_null).contains(c) != opposite) {
			return i;
		}
		i += direction;
	}
	return defaultReturnValue;
	
};

WFF.containsChar = function (needle, chars) {
	var i;
	i = 0;
	for (; i < (chars || nova_null).accessor_count(); i++) {
		if (needle === (chars || nova_null).data[i]) {
			return true;
		}
	}
	return false;
	
};

WFF.findEndingMatch = function (wff, start, end, index, direction, defaultReturnValue) {
	var scope;
	var i;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	if (direction < 0) {
		var temp;
		temp = start;
		start = end;
		end = temp;
	}
	scope = 0;
	i = index;
	while (i < (wff || nova_null).count && i >= 0) {
		var c;
		c = ((wff || nova_null).chars || nova_null).get(i);
		if ((c) == start) {
			scope++;
			
		} else if ((c) == end) {
			scope--;
			
		}
		
		if (scope === 0) {
			return i;
		}
		i += direction;
	}
	return defaultReturnValue;
	
};

WFF.generated29 = function () {
	var temp;
	temp = [];
	temp[0] = ' ';
	temp[1] = '\t';
	temp[2] = '\n';
	temp[3] = '\r';
	return novaConstructors.newArray1Char1(temp, 4);
	
};

WFF.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/math/logic/WFF"), false);
	
};

WFF.prototype.mutator__js_class = function () {
	
};

WFF.prototype.super = function () {
	
};

novaConstructors.newWFF = function (wff, letters) {
	var __value = new WFF()
	NovaObject.call(__value);
	WFF.prototype.super.apply(__value, [].slice.call(arguments));
	return WFF.init.call(__value, wff, letters);
	
};

var Class = function () {
	this.extension = null;
	this.interfaces = null;
	this.fields = null;
	this.functionMap = null;
	this.propertyMap = null;
	this.isInterface = 0;
	this.location = null;
	this.name = null;
	
	
};

Class.prototype = Object.create(NovaObject.prototype);
Class.prototype.constructor = Class;


Class.prototype.destroy = function () {
	
};

Class.init = function (location, isInterface) {
	this.location = location;
	this.isInterface = isInterface;
	return this;
	
};

Class.prototype.isOfType = function (other) {
	var self = this;
	
	return (other || nova_null).isInterface ? this.isOfTypeInterface(other) || (this.extension) != null && (this.extension || nova_null).isOfType(other) : this.isOfTypeClass(other) || (this.interfaces || nova_null).any0((_1, _2, _3) => {
			return (_1 || nova_null).isOfTypeClass(other);
			
	});
	
};

Class.prototype.isOfTypeClass = function (other) {
	var current;
	current = this;
	while ((current) != null) {
		if (current === other) {
			return true;
		}
		current = (current || nova_null).extension;
	}
	return false;
	
};

Class.prototype.isOfTypeInterface = function (other) {
	var self = this;
	
	var current;
	current = this;
	while ((current) != null) {
		if (((current || nova_null).interfaces || nova_null).any0((i, _2, _3) => {
					return i === other || (i || nova_null).isOfTypeInterface(other);
					
		})) {
			return true;
		}
		current = (current || nova_null).extension;
	}
	return false;
	
};

Class.prototype.getClassesOfType = function (baseType) {
	var self = this;
	
	return (Class.ALL || nova_null).filter0((_1, _2, _3) => {
			return (_1 || nova_null).isOfType(baseType);
			
	});
	
};

Class.prototype.toString = function () {
	return novaConstructors.newString2("Class \"").plus0(((this.location) || nova_null).plus0(novaConstructors.newString2("\"")));
	
};

Class.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/meta/Class"), false);
	
};

Class.prototype.mutator__js_class = function () {
	
};

Class.prototype.accessor_package = function () {
	return (this.location || nova_null).substring(0, (this.location || nova_null).lastIndexOf1(novaConstructors.newString2("/"), undefined, 0));
	
};

Class.prototype.mutator_package = function () {
	
};

Class.prototype.accessor_name = function () {
	return (this.location || nova_null).substring((this.location || nova_null).lastIndexOf1(novaConstructors.newString2("/")) + 1);
	
};

Class.prototype.mutator_name = function () {
	
};

Class.prototype.super = function () {
	this.interfaces = novaConstructors.newArray().toImmutable();
	this.fields = novaConstructors.newArray0(0).toImmutable();
	
};

novaConstructors.newClass = function (location, isInterface) {
	var __value = new Class()
	NovaObject.call(__value);
	Class.prototype.super.apply(__value, [].slice.call(arguments));
	return Class.init.call(__value, location, isInterface);
	
};

var Field = function () {
	this.name = null;
	this.type = null;
	
	
};

Field.prototype = Object.create(NovaObject.prototype);
Field.prototype.constructor = Field;


Field.prototype.destroy = function () {
	
};

Field.init = function (name, type) {
	this.name = name;
	this.type = type;
	return this;
	
};

Field.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/meta/Field"), false);
	
};

Field.prototype.mutator__js_class = function () {
	
};

Field.prototype.super = function () {
	
};

novaConstructors.newField = function (name, type) {
	var __value = new Field()
	NovaObject.call(__value);
	Field.prototype.super.apply(__value, [].slice.call(arguments));
	return Field.init.call(__value, name, type);
	
};

var FunctionMap = function () {
	
	
};

FunctionMap.prototype = Object.create(NovaObject.prototype);
FunctionMap.prototype.constructor = FunctionMap;


FunctionMap.prototype.destroy = function () {
	
};

FunctionMap.init = function () {
	return this;
	
};

FunctionMap.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/meta/FunctionMap"), false);
	
};

FunctionMap.prototype.mutator__js_class = function () {
	
};

FunctionMap.prototype.super = function () {
	
};

novaConstructors.newFunctionMap = function () {
	var __value = new FunctionMap()
	NovaObject.call(__value);
	FunctionMap.prototype.super.apply(__value, [].slice.call(arguments));
	return FunctionMap.init.call(__value);
	
};

var GenericArgument = function () {
	this.value = null;
	
	
};

GenericArgument.prototype = Object.create(NovaObject.prototype);
GenericArgument.prototype.constructor = GenericArgument;


GenericArgument.prototype.destroy = function () {
	
};

GenericArgument.init = function (value) {
	this.value = value;
	return this;
	
};

GenericArgument.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/meta/GenericArgument"), false);
	
};

GenericArgument.prototype.mutator__js_class = function () {
	
};

GenericArgument.prototype.super = function () {
	
};

novaConstructors.newGenericArgument = function (value) {
	var __value = new GenericArgument()
	NovaObject.call(__value);
	GenericArgument.prototype.super.apply(__value, [].slice.call(arguments));
	return GenericArgument.init.call(__value, value);
	
};

var GenericParameter = function () {
	this.value = null;
	this.defaultValue = null;
	
	
};

GenericParameter.prototype = Object.create(NovaObject.prototype);
GenericParameter.prototype.constructor = GenericParameter;


GenericParameter.prototype.destroy = function () {
	
};

GenericParameter.init = function (value, defaultValue) {
	this.value = value;
	this.defaultValue = defaultValue;
	return this;
	
};

GenericParameter.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/meta/GenericParameter"), false);
	
};

GenericParameter.prototype.mutator__js_class = function () {
	
};

GenericParameter.prototype.super = function () {
	
};

novaConstructors.newGenericParameter = function (value, defaultValue) {
	var __value = new GenericParameter()
	NovaObject.call(__value);
	GenericParameter.prototype.super.apply(__value, [].slice.call(arguments));
	return GenericParameter.init.call(__value, value, defaultValue);
	
};

var InvalidLibraryException = function () {
	
	
};

InvalidLibraryException.prototype = Object.create(Exception.prototype);
InvalidLibraryException.prototype.constructor = InvalidLibraryException;


InvalidLibraryException.prototype.destroy = function () {
	
};

InvalidLibraryException.init = function (message) {
	return Exception.init.call(this, message);
	return this;
	
};

InvalidLibraryException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/meta/InvalidLibraryException"), false);
	
};

InvalidLibraryException.prototype.mutator__js_class = function () {
	
};

InvalidLibraryException.prototype.super = function () {
	
};

novaConstructors.newInvalidLibraryException = function (message) {
	var __value = new InvalidLibraryException()
	Exception.call(__value);
	InvalidLibraryException.prototype.super.apply(__value, [].slice.call(arguments));
	return InvalidLibraryException.init.call(__value, message);
	
};

var Library = function () {
	this.handle = null;
	this.library = null;
	this.loadedLibrary = null;
	
	
};

Library.prototype = Object.create(NovaObject.prototype);
Library.prototype.constructor = Library;


Library.prototype.destroy = function () {
	
};

Library.init = function (location) {
	this.library = novaConstructors.newFile1(location);
	return this;
	
};

Library.prototype.getInstance = function (classLocation) {
	var constructor;
	constructor = this.getConstructor(classLocation);
	return constructor();
	
};

Library.prototype.getConstructor = function (classLocation) {
	var constructor;
	constructor = this.getFunction0(novaConstructors.newString2("construct"), classLocation);
	
};

Library.prototype.formatFunctionName0 = function (functionName, reference) {
	var static;
	var _js_class;
	static = ((reference || nova_null).accessor__js_class() || nova_null).isOfType(Class);
	_js_class = static ? reference : (reference || nova_null).accessor__js_class();
	return this.formatFunctionName1(functionName, (_js_class || nova_null).location, static);
	
};

Library.prototype.formatFunctionName1 = function (functionName, classLocation, static) {
	var location;
	var dot;
	var packageEnd;
	var package;
	var className;
	var name;
	static = typeof static === 'undefined' ? true : static;
	location = ((classLocation) || nova_null).plus0(novaConstructors.newString2(".").plus0(((functionName) || nova_null).plus0(novaConstructors.newString2(""))));
	dot = (location || nova_null).indexOf1('.');
	if (dot <= 0) {
		throw novaConstructors.newInvalidLibraryException(novaConstructors.newString2("Invalid function request: { name: ").plus0(((functionName) || nova_null).plus0(novaConstructors.newString2(", location: ").plus0(((location) || nova_null).plus0(novaConstructors.newString2(" }"))))));
	}
	packageEnd = (location || nova_null).lastIndexOf0('/');
	package = packageEnd > 0 ? (((location || nova_null).substring(undefined, packageEnd) || nova_null).replace1(novaConstructors.newString2("/"), novaConstructors.newString2("_")) || nova_null).plus0(novaConstructors.newString2("_Nova_")) : novaConstructors.newString2("");
	className = (((location || nova_null).substring(packageEnd + 1, dot) || nova_null).replace1(novaConstructors.newString2("/"), novaConstructors.newString2("_")) || nova_null).plus0(novaConstructors.newString2("_"));
	name = novaConstructors.newString2("Nova_").plus0((location || nova_null).substring(dot + 1));
	return (package || nova_null).plus0((className || nova_null).plus0(((static ? novaConstructors.newString2("static_") : novaConstructors.newString2("")) || nova_null).plus0(name)));
	
};

Library.prototype.getFunction0 = function (functionName, classLocation) {
	return this.getFunctionHandle(this.formatFunctionName1(functionName, classLocation, true), null);
	
};

Library.prototype.getFunction1 = function (functionName, reference) {
	return this.getFunctionHandle(this.formatFunctionName0(functionName, reference), reference);
	
};

Library.prototype.getFunctionHandle = function (location, reference) {
	return null;
	
};

Library.prototype.load = function () {
	if ((this.loadFile()) != null) {
	}
	return this;
	
};

Library.prototype.loadFile = function () {
	var libFile;
	if (!(this.library || nova_null).accessor_exists()) {
		throw novaConstructors.newInvalidLibraryException(novaConstructors.newString2("Library '").plus0(((this.library.accessor_name()) || nova_null).plus0(novaConstructors.newString2("' does not exist at location '").plus0(((this.library.location) || nova_null).plus0(novaConstructors.newString2("'"))))));
	}
	libFile = this.library;
	if ((libFile || nova_null).accessor_isDirectory()) {
		if ((libFile = Library.loadFromSource(libFile)) != null) {
			this.loadedLibrary = libFile;
		} else {
			throw novaConstructors.newInvalidLibraryException(novaConstructors.newString2("Failed to load library '").plus0(((this.library.location) || nova_null).plus0(novaConstructors.newString2("' from source"))));
		}
	} else {
		this.loadedLibrary = libFile;
	}
	if ((this.loadedLibrary) === null) {
		throw novaConstructors.newInvalidLibraryException(novaConstructors.newString2("Failed to load library '").plus0(((this.library.location) || nova_null).plus0(novaConstructors.newString2("'"))));
	}
	return this.loadedLibrary;
	
};

Library.loadFromSource = function (source) {
	var path;
	var existingLibFile;
	var process;
	var char;
	var libFile;
	path = ((source || nova_null).location || nova_null).substring(undefined, ((source || nova_null).location || nova_null).lastIndexOf0('/') + 1);
	existingLibFile = novaConstructors.newFile1((path || nova_null).plus0((novaConstructors.newString2("lib").plus0(((source.accessor_rootName()) || nova_null).plus0(novaConstructors.newString2(""))) || nova_null).plus0(Library.EXTENSION)));
	if ((existingLibFile || nova_null).accessor_isFile()) {
		return existingLibFile;
	}
	process = System.execute0(novaConstructors.newString2("novac ").plus0(((source.location) || nova_null).plus0(novaConstructors.newString2(" -library -o ").plus0(((path) || nova_null).plus0(novaConstructors.newString2("lib").plus0((source.accessor_rootName())))))));
	while ((char = ((process || nova_null).reader || nova_null).readChar()) != 0) {
		NovaConsole.write8(char);
	}
	libFile = novaConstructors.newFile1((path || nova_null).plus0((novaConstructors.newString2("lib").plus0(((source.accessor_rootName()) || nova_null).plus0(novaConstructors.newString2(""))) || nova_null).plus0(Library.EXTENSION)));
	if (!(libFile || nova_null).accessor_isFile()) {
		throw novaConstructors.newInvalidLibraryException(novaConstructors.newString2("Failed to build library '").plus0(((source.location) || nova_null).plus0(novaConstructors.newString2("' from nova source to '").plus0(((libFile.location) || nova_null).plus0(novaConstructors.newString2("'"))))));
	}
	return libFile;
	
};

Library.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/meta/Library"), false);
	
};

Library.prototype.mutator__js_class = function () {
	
};

Library.prototype.super = function () {
	
};

novaConstructors.newLibrary = function (location) {
	var __value = new Library()
	NovaObject.call(__value);
	Library.prototype.super.apply(__value, [].slice.call(arguments));
	return Library.init.call(__value, location);
	
};

var PropertyMap = function () {
	
	
};

PropertyMap.prototype = Object.create(NovaObject.prototype);
PropertyMap.prototype.constructor = PropertyMap;


PropertyMap.prototype.destroy = function () {
	
};

PropertyMap.init = function () {
	return this;
	
};

PropertyMap.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/meta/PropertyMap"), false);
	
};

PropertyMap.prototype.mutator__js_class = function () {
	
};

PropertyMap.prototype.super = function () {
	
};

novaConstructors.newPropertyMap = function () {
	var __value = new PropertyMap()
	NovaObject.call(__value);
	PropertyMap.prototype.super.apply(__value, [].slice.call(arguments));
	return PropertyMap.init.call(__value);
	
};

var Type = function () {
	this.value = null;
	this.genericArguments = null;
	
	
};

Type.prototype = Object.create(NovaObject.prototype);
Type.prototype.constructor = Type;


Type.prototype.destroy = function () {
	
};

Type.init = function (value, genericArguments) {
	this.value = value;
	this.genericArguments = genericArguments;
	return this;
	
};

Type.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/meta/Type"), false);
	
};

Type.prototype.mutator__js_class = function () {
	
};

Type.prototype.super = function () {
	
};

novaConstructors.newType = function (value, genericArguments) {
	var __value = new Type()
	NovaObject.call(__value);
	Type.prototype.super.apply(__value, [].slice.call(arguments));
	return Type.init.call(__value, value, genericArguments);
	
};

var Socket = function () {
	this.ip = null;
	this.port = 0;
	
	
};

Socket.prototype = Object.create(NovaObject.prototype);
Socket.prototype.constructor = Socket;


Socket.prototype.destroy = function () {
	
};

Socket.init = function (ip, port) {
	this.ip = ip;
	this.port = port;
	return this;
	
};

Socket.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/network/Socket"), false);
	
};

Socket.prototype.mutator__js_class = function () {
	
};

Socket.prototype.super = function () {
	
};

novaConstructors.newSocket = function (ip, port) {
	var __value = new Socket()
	NovaObject.call(__value);
	Socket.prototype.super.apply(__value, [].slice.call(arguments));
	return Socket.init.call(__value, ip, port);
	
};

var ClientSocket = function () {
	this.socket = null;
	this.connection = null;
	
	
};

ClientSocket.prototype = Object.create(Socket.prototype);
ClientSocket.prototype.constructor = ClientSocket;


ClientSocket.prototype.destroy = function () {
	
};

ClientSocket.init = function () {
	return this;
	
};

ClientSocket.prototype.connect = function (ipAddress, port) {
	this.socket = nova_clientsocket_connect(((ipAddress || nova_null).chars || nova_null).data, port);
	if (this.socket === 0) {
		return false;
	}
	this.connection = novaConstructors.newConnectionSocket(this.socket);
	return true;
	
};

ClientSocket.prototype.close = function () {
	var result;
	result = nova_socket_close(this.socket);
	if (result === 0) {
		return false;
	}
	return true;
	
};

ClientSocket.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/network/ClientSocket"), false);
	
};

ClientSocket.prototype.mutator__js_class = function () {
	
};

ClientSocket.prototype.super = function () {
	
};

novaConstructors.newClientSocket = function () {
	var __value = new ClientSocket()
	Socket.call(__value);
	ClientSocket.prototype.super.apply(__value, [].slice.call(arguments));
	return ClientSocket.init.call(__value);
	
};

var ConnectionSocket = function () {
	this.inputBuffer = null;
	this.socket = null;
	this.connected = 0;
	this.in = null;
	this.out = null;
	
	
};

ConnectionSocket.prototype = Object.create(Socket.prototype);
ConnectionSocket.prototype.constructor = ConnectionSocket;


ConnectionSocket.prototype.destroy = function () {
	
};

ConnectionSocket.init = function (socket) {
	this.socket = socket;
	this.in = novaConstructors.newNetworkInputStream(this);
	this.out = novaConstructors.newNetworkOutputStream(this);
	this.connected = true;
	return this;
	
};

ConnectionSocket.prototype.close = function () {
	this.connected = false;
	nova_socket_close(this.socket);
	
};

ConnectionSocket.prototype.validateConnection = function () {
	if (this.connected) {
		var message;
		message = this.readString1(false);
		if (this.connected) {
			(this.inputBuffer || nova_null).enqueue(message);
			return true;
		}
	}
	return false;
	
};

ConnectionSocket.prototype.readString0 = function () {
	return this.readString1(true);
	
};

ConnectionSocket.prototype.readString1 = function (checkBuffer) {
	if (!checkBuffer || (this.inputBuffer || nova_null).accessor_empty()) {
		var data;
		data = nova_socket_receive(this.socket);
		if (data === 0) {
			this.connected = false;
			return null;
		}
		return novaConstructors.newString2(data);
	}
	return (this.inputBuffer || nova_null).dequeue();
	
};

ConnectionSocket.prototype.write = function (data) {
	return nova_socket_send(this.socket, ((data || nova_null).chars || nova_null).data) === 1;
	
};

ConnectionSocket.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/network/ConnectionSocket"), false);
	
};

ConnectionSocket.prototype.mutator__js_class = function () {
	
};

ConnectionSocket.prototype.super = function () {
	this.inputBuffer = novaConstructors.newQueue();
	
};

novaConstructors.newConnectionSocket = function (socket) {
	var __value = new ConnectionSocket()
	Socket.call(__value);
	ConnectionSocket.prototype.super.apply(__value, [].slice.call(arguments));
	return ConnectionSocket.init.call(__value, socket);
	
};

var NetworkInputStream = function () {
	this.socket = null;
	
	
};

NetworkInputStream.prototype = Object.create(NovaObject.prototype);
NetworkInputStream.prototype.constructor = NetworkInputStream;


NetworkInputStream.prototype.destroy = function () {
	
};

NetworkInputStream.init = function (socket) {
	this.socket = socket;
	return this;
	
};

NetworkInputStream.prototype.readString = function () {
	return (this.socket || nova_null).readString0();
	
};

NetworkInputStream.prototype.readBytes = function () {
	return null;
	
};

NetworkInputStream.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/network/NetworkInputStream"), false);
	
};

NetworkInputStream.prototype.mutator__js_class = function () {
	
};

NetworkInputStream.prototype.super = function () {
	
};

novaConstructors.newNetworkInputStream = function (socket) {
	var __value = new NetworkInputStream()
	NovaObject.call(__value);
	NetworkInputStream.prototype.super.apply(__value, [].slice.call(arguments));
	return NetworkInputStream.init.call(__value, socket);
	
};

var NetworkOutputStream = function () {
	this.socket = null;
	
	
};

NetworkOutputStream.prototype = Object.create(NovaObject.prototype);
NetworkOutputStream.prototype.constructor = NetworkOutputStream;


NetworkOutputStream.prototype.destroy = function () {
	
};

NetworkOutputStream.init = function (socket) {
	this.socket = socket;
	return this;
	
};

NetworkOutputStream.prototype.write = function (data) {
	(this.socket || nova_null).write(data);
	return this;
	
};

NetworkOutputStream.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/network/NetworkOutputStream"), false);
	
};

NetworkOutputStream.prototype.mutator__js_class = function () {
	
};

NetworkOutputStream.prototype.super = function () {
	
};

novaConstructors.newNetworkOutputStream = function (socket) {
	var __value = new NetworkOutputStream()
	NovaObject.call(__value);
	NetworkOutputStream.prototype.super.apply(__value, [].slice.call(arguments));
	return NetworkOutputStream.init.call(__value, socket);
	
};

var ServerSocket = function () {
	this.serverSocket = null;
	this.requests = null;
	
	
};

ServerSocket.prototype = Object.create(Socket.prototype);
ServerSocket.prototype.constructor = ServerSocket;


ServerSocket.prototype.destroy = function () {
	
};

ServerSocket.init = function () {
	return this;
	
};

ServerSocket.prototype.start = function (port) {
	this.serverSocket = nova_serversocket_start(port);
	if (this.serverSocket === 0) {
		return null;
	}
	return this;
	
};

ServerSocket.prototype.close = function () {
	var result;
	result = nova_socket_close(this.serverSocket);
	if (result === 0) {
		return false;
	}
	this.serverSocket = novaConstructors.newByte(0);
	return true;
	
};

ServerSocket.prototype.acceptClient = function () {
	var clientSocket;
	if (!this.accessor_open()) {
		throw novaConstructors.newClosedStreamException(novaConstructors.newString2("ServerSocket not started"));
	}
	clientSocket = nova_serversocket_accept(this.serverSocket);
	if (clientSocket != 0) {
		return novaConstructors.newConnectionSocket(clientSocket);
	}
	return null;
	
};

ServerSocket.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/network/ServerSocket"), false);
	
};

ServerSocket.prototype.mutator__js_class = function () {
	
};

ServerSocket.prototype.accessor_open = function () {
	return this.serverSocket != 0;
	
};

ServerSocket.prototype.mutator_open = function () {
	
};

ServerSocket.prototype.super = function () {
	this.requests = novaConstructors.newArray();
	
};

novaConstructors.newServerSocket = function () {
	var __value = new ServerSocket()
	Socket.call(__value);
	ServerSocket.prototype.super.apply(__value, [].slice.call(arguments));
	return ServerSocket.init.call(__value);
	
};

var GreaterThanOperator = function () {
	
	
};

GreaterThanOperator.prototype.constructor = GreaterThanOperator;


GreaterThanOperator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/operators/GreaterThanOperator"), false);
	
};

GreaterThanOperator.prototype.mutator__js_class = function () {
	
};

var GreaterThanOrEqualToOperator = function () {
	
	
};

GreaterThanOrEqualToOperator.prototype.constructor = GreaterThanOrEqualToOperator;


GreaterThanOrEqualToOperator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/operators/GreaterThanOrEqualToOperator"), false);
	
};

GreaterThanOrEqualToOperator.prototype.mutator__js_class = function () {
	
};

var LessThanOperator = function () {
	
	
};

LessThanOperator.prototype.constructor = LessThanOperator;


LessThanOperator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/operators/LessThanOperator"), false);
	
};

LessThanOperator.prototype.mutator__js_class = function () {
	
};

var LessThanOrEqualToOperator = function () {
	
	
};

LessThanOrEqualToOperator.prototype.constructor = LessThanOrEqualToOperator;


LessThanOrEqualToOperator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/operators/LessThanOrEqualToOperator"), false);
	
};

LessThanOrEqualToOperator.prototype.mutator__js_class = function () {
	
};

var MinusEqualsOperator = function () {
	
	
};

MinusEqualsOperator.prototype.constructor = MinusEqualsOperator;


MinusEqualsOperator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/operators/MinusEqualsOperator"), false);
	
};

MinusEqualsOperator.prototype.mutator__js_class = function () {
	
};

var MinusOperator = function () {
	
	
};

MinusOperator.prototype.constructor = MinusOperator;


MinusOperator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/operators/MinusOperator"), false);
	
};

MinusOperator.prototype.mutator__js_class = function () {
	
};

var MultiplyEqualsOperator = function () {
	
	
};

MultiplyEqualsOperator.prototype.constructor = MultiplyEqualsOperator;


MultiplyEqualsOperator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/operators/MultiplyEqualsOperator"), false);
	
};

MultiplyEqualsOperator.prototype.mutator__js_class = function () {
	
};

var NotEqualToOperator = function () {
	
	
};

NotEqualToOperator.prototype.constructor = NotEqualToOperator;


NotEqualToOperator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/operators/NotEqualToOperator"), false);
	
};

NotEqualToOperator.prototype.mutator__js_class = function () {
	
};

var Package = function () {
	
	
};

Package.prototype = Object.create(NovaObject.prototype);
Package.prototype.constructor = Package;


Package.prototype.destroy = function () {
	
};

Package.init = function () {
	return this;
	
};

Package.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/package/Package"), false);
	
};

Package.prototype.mutator__js_class = function () {
	
};

Package.prototype.super = function () {
	
};

novaConstructors.newPackage = function () {
	var __value = new Package()
	NovaObject.call(__value);
	Package.prototype.super.apply(__value, [].slice.call(arguments));
	return Package.init.call(__value);
	
};

var Primitive = function () {
	
	
};

Primitive.prototype = Object.create(NovaObject.prototype);
Primitive.prototype.constructor = Primitive;


Primitive.prototype.destroy = function () {
	
};

Primitive.init = function () {
	return this;
	
};

Primitive.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/Primitive"), false);
	
};

Primitive.prototype.mutator__js_class = function () {
	
};

Primitive.prototype.super = function () {
	
};

novaConstructors.newPrimitive = function () {
	var __value = new Primitive()
	NovaObject.call(__value);
	Primitive.prototype.super.apply(__value, [].slice.call(arguments));
	return Primitive.init.call(__value);
	
};

var Bool = function () {
	this.value = 0;
	
	
};

Bool.prototype = Object.create(Primitive.prototype);
Bool.prototype.constructor = Bool;


Bool.prototype.destroy = function () {
	
};

Bool.init = function (value) {
	this.value = value;
	return this;
	
};

Bool.prototype.compareTo0 = function (other) {
	return this.value === ((other) || nova_null).value;
	
};

Bool.prototype.toString = function () {
	return Bool.toString(this.value);
	
};

Bool.toString = function (value) {
	return value ? novaConstructors.newString2("true") : novaConstructors.newString2("false");
	
};

Bool.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/Bool"), false);
	
};

Bool.prototype.mutator__js_class = function () {
	
};

Bool.prototype.super = function () {
	
};

novaConstructors.newBool = function (value) {
	var __value = new Bool()
	Primitive.call(__value);
	Bool.prototype.super.apply(__value, [].slice.call(arguments));
	return Bool.init.call(__value, value);
	
};

var Null = function () {
	
	
};

Null.prototype = Object.create(NovaString.prototype);
Null.prototype.constructor = Null;


Null.prototype.destroy = function () {
	
};

Null.init = function () {
	return this;
	
};

Null.prototype.concat = function (other) {
	return novaConstructors.newString2("null").plus0(((other) || nova_null).plus0(novaConstructors.newString2("")));
	
};

Null.prototype.toString = function () {
	return novaConstructors.newString2("null");
	
};

Null.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/Null"), false);
	
};

Null.prototype.mutator__js_class = function () {
	
};

Null.prototype.super = function () {
	
};

novaConstructors.newNull = function () {
	var __value = new Null()
	NovaString.call(__value);
	Null.prototype.super.apply(__value, [].slice.call(arguments));
	return Null.init.call(__value);
	
};

var Number = function () {
	this.integerValue = 0;
	
	
};

Number.prototype = Object.create(Primitive.prototype);
Number.prototype.constructor = Number;


Number.prototype.destroy = function () {
	
};

Number.init = function () {
	return this;
	
};

Number.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/number/Number"), false);
	
};

Number.prototype.mutator__js_class = function () {
	
};

Number.prototype.accessor_realValue = function () {
	return 0;
	
};

Number.prototype.mutator_realValue = function () {
	
};

Number.prototype.accessor_integerValue = function () {
	return 0;
	
};

Number.prototype.mutator_integerValue = function () {
	
};

Number.prototype.super = function () {
	
};

novaConstructors.newNumber = function () {
	var __value = new Number()
	Primitive.call(__value);
	Number.prototype.super.apply(__value, [].slice.call(arguments));
	return Number.init.call(__value);
	
};

var Integer = function () {
	
	
};

Integer.prototype.constructor = Integer;


Integer.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/number/Integer"), false);
	
};

Integer.prototype.mutator__js_class = function () {
	
};

var NovaByte = function () {
	this.integerValue = 0;
	this.value = 0;
	
	
};

NovaByte.prototype = Object.create(Number.prototype);
NovaByte.prototype.constructor = NovaByte;


NovaByte.prototype.destroy = function () {
	
};

NovaByte.init = function (value) {
	this.value = value;
	return this;
	
};

NovaByte.prototype.compareTo0 = function (other) {
	return (other || nova_null).compareToInteger(this.value);
	
};

NovaByte.prototype.compareToReal = function (other) {
	return this.value - other;
	
};

NovaByte.prototype.compareToInteger = function (other) {
	return this.value - other;
	
};

NovaByte.compareTo = function (value, other) {
	return (other || nova_null).compareToInteger(value);
	
};

NovaByte.compareToReal = function (value, other) {
	return value - other;
	
};

NovaByte.compareToInteger = function (value, other) {
	return value - other;
	
};

NovaByte.prototype.multiply0 = function (other) {
	return novaConstructors.newLong((other || nova_null).multiplyInteger(this.value));
	
};

NovaByte.prototype.multiplyReal = function (other) {
	return this.value * other;
	
};

NovaByte.prototype.multiplyInteger = function (other) {
	return this.value * other;
	
};

NovaByte.prototype.plus0 = function (other) {
	return novaConstructors.newLong((other || nova_null).plusInteger(this.value));
	
};

NovaByte.prototype.plusReal = function (other) {
	return this.value + other;
	
};

NovaByte.prototype.plusInteger = function (other) {
	return this.value + other;
	
};

NovaByte.prototype.plusEquals0 = function (other) {
	return novaConstructors.newLong((other || nova_null).plusEqualsInteger(this.value));
	
};

NovaByte.prototype.plusEqualsReal = function (other) {
	return this.value += other;
	
};

NovaByte.prototype.plusEqualsInteger = function (other) {
	return this.value += other;
	
};

NovaByte.prototype.minus = function (other) {
	return novaConstructors.newLong((other || nova_null).minusInteger(this.value));
	
};

NovaByte.prototype.minusReal = function (other) {
	return this.value - other;
	
};

NovaByte.prototype.minusInteger = function (other) {
	return this.value - other;
	
};

NovaByte.prototype.minusEquals = function (other) {
	return novaConstructors.newLong((other || nova_null).minusEqualsInteger(this.value));
	
};

NovaByte.prototype.minusEqualsReal = function (other) {
	return this.value -= other;
	
};

NovaByte.prototype.minusEqualsInteger = function (other) {
	return this.value -= other;
	
};

NovaByte.prototype.multiplyEquals = function (other) {
	return novaConstructors.newLong((other || nova_null).multiplyEqualsInteger(this.value));
	
};

NovaByte.prototype.multiplyEqualsReal = function (other) {
	return this.value *= other;
	
};

NovaByte.prototype.multiplyEqualsInteger = function (other) {
	return this.value *= other;
	
};

NovaByte.prototype.equals0 = function (other) {
	return (other || nova_null).equalsInteger(this.value);
	
};

NovaByte.prototype.equalsReal = function (other) {
	return this.value === other;
	
};

NovaByte.prototype.equalsInteger = function (other) {
	return this.value === other;
	
};

NovaByte.equals = function (value, other) {
	return (other || nova_null).equalsInteger(value);
	
};

NovaByte.equalsReal = function (value, other) {
	return value === other;
	
};

NovaByte.equalsInteger = function (value, other) {
	return value === other;
	
};

NovaByte.prototype.toString = function () {
	return NovaByte.toString(this.value);
	
};

NovaByte.numDigits = function (number) {
	return NovaLong.numDigits(number);
	
};

NovaByte.toString = function (value) {
	return NovaLong.toString(value);
	
};

NovaByte.hashCodeLong = function (value) {
	return NovaMath.abs0(value);
	
};

NovaByte.plus = function (a, b) {
	return a + b;
	
};

NovaByte.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/number/Byte"), false);
	
};

NovaByte.prototype.mutator__js_class = function () {
	
};

NovaByte.prototype.accessor_realValue = function () {
	return this.value;
	
};

NovaByte.prototype.mutator_realValue = function () {
	
};

NovaByte.prototype.accessor_integerValue = function () {
	return this.value;
	
};

NovaByte.prototype.mutator_integerValue = function () {
	
};

NovaByte.prototype.super = function () {
	
};

novaConstructors.newByte = function (value) {
	var __value = new NovaByte()
	Number.call(__value);
	NovaByte.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaByte.init.call(__value, value);
	
};

var Char = function () {
	this.integerValue = 0;
	this.value = 0;
	
	
};

Char.prototype = Object.create(Number.prototype);
Char.prototype.constructor = Char;


Char.prototype.destroy = function () {
	
};

Char.init = function (value) {
	this.value = value;
	return this;
	
};

Char.toLowerCase = function (c) {
	var id;
	id = c.charCodeAt(0);
	if (id >= 65 && id <= 90) {
		return String.fromCharCode((id + 32));
	}
	return c;
	
};

Char.toUpperCase = function (c) {
	var id;
	id = c.charCodeAt(0);
	if (id >= 97 && id <= 122) {
		return String.fromCharCode((id - 32));
	}
	return c;
	
};

Char.prototype.repeat = function (times) {
	return Char.repeat(this.value, times);
	
};

Char.repeat = function (value, times) {
	return Char.toString((value)).plus0(novaConstructors.newString2("")).repeat(times);
	
};

Char.prototype.toLowerCase = function () {
	return Char.toLowerCase(this.value);
	
};

Char.prototype.toUpperCase = function () {
	return Char.toUpperCase(this.value);
	
};

Char.prototype.compareTo0 = function (other) {
	return (other || nova_null).compareToInteger(this.value);
	
};

Char.prototype.compareToReal = function (other) {
	return this.value.charCodeAt(0) - other;
	
};

Char.prototype.compareToInteger = function (other) {
	return this.value.charCodeAt(0) - other;
	
};

Char.compareTo = function (value, other) {
	return (other || nova_null).compareToInteger(value);
	
};

Char.compareToReal = function (value, other) {
	return value.charCodeAt(0) - other;
	
};

Char.compareToInteger = function (value, other) {
	return value.charCodeAt(0) - other;
	
};

Char.prototype.multiply0 = function (other) {
	return novaConstructors.newLong((other || nova_null).multiplyInteger(this.value));
	
};

Char.prototype.multiplyReal = function (other) {
	return this.value.charCodeAt(0) * other;
	
};

Char.prototype.multiplyInteger = function (other) {
	return this.value.charCodeAt(0) * other;
	
};

Char.prototype.plus0 = function (other) {
	return novaConstructors.newLong((other || nova_null).plusInteger(this.value));
	
};

Char.prototype.plusReal = function (other) {
	return this.value.charCodeAt(0) + other;
	
};

Char.prototype.plusInteger = function (other) {
	return this.value.charCodeAt(0) + other;
	
};

Char.prototype.plusEquals0 = function (other) {
	return novaConstructors.newLong((other || nova_null).plusEqualsInteger(this.value));
	
};

Char.prototype.plusEqualsReal = function (other) {
	return this.value.charCodeAt(0) += other;
	
};

Char.prototype.plusEqualsInteger = function (other) {
	return this.value.charCodeAt(0) += other;
	
};

Char.prototype.minus = function (other) {
	return novaConstructors.newLong((other || nova_null).minusInteger(this.value));
	
};

Char.prototype.minusReal = function (other) {
	return this.value.charCodeAt(0) - other;
	
};

Char.prototype.minusInteger = function (other) {
	return this.value.charCodeAt(0) - other;
	
};

Char.prototype.minusEquals = function (other) {
	return novaConstructors.newLong((other || nova_null).minusEqualsInteger(this.value));
	
};

Char.prototype.minusEqualsReal = function (other) {
	return this.value.charCodeAt(0) -= other;
	
};

Char.prototype.minusEqualsInteger = function (other) {
	return this.value.charCodeAt(0) -= other;
	
};

Char.prototype.multiplyEquals = function (other) {
	return novaConstructors.newLong((other || nova_null).multiplyEqualsInteger(this.value));
	
};

Char.prototype.multiplyEqualsReal = function (other) {
	return this.value.charCodeAt(0) *= other;
	
};

Char.prototype.multiplyEqualsInteger = function (other) {
	return this.value.charCodeAt(0) *= other;
	
};

Char.prototype.equals0 = function (other) {
	return (other || nova_null).equalsInteger(this.value);
	
};

Char.prototype.equalsReal = function (other) {
	return this.value === other;
	
};

Char.prototype.equalsInteger = function (other) {
	return this.value === other;
	
};

Char.equals = function (value, other) {
	return (other || nova_null).equalsInteger(value);
	
};

Char.equalsReal = function (value, other) {
	return value === other;
	
};

Char.equalsInteger = function (value, other) {
	return value === other;
	
};

Char.prototype.toString = function () {
	return Char.toString(this.value);
	
};

Char.toString = function (c) {
	return novaConstructors.newString0(c);
	
};

Char.hashCodeLong = function (value) {
	return NovaMath.abs0(value);
	
};

Char.plus = function (a, b) {
	return a.charCodeAt(0) + b;
	
};

Char.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/number/Char"), false);
	
};

Char.prototype.mutator__js_class = function () {
	
};

Char.prototype.accessor_realValue = function () {
	return this.value;
	
};

Char.prototype.mutator_realValue = function () {
	
};

Char.prototype.accessor_integerValue = function () {
	return this.value;
	
};

Char.prototype.mutator_integerValue = function () {
	
};

Char.prototype.super = function () {
	
};

novaConstructors.newChar = function (value) {
	var __value = new Char()
	Number.call(__value);
	Char.prototype.super.apply(__value, [].slice.call(arguments));
	return Char.init.call(__value, value);
	
};

var RealNumber = function () {
	
	
};

RealNumber.prototype.constructor = RealNumber;


RealNumber.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/number/RealNumber"), false);
	
};

RealNumber.prototype.mutator__js_class = function () {
	
};

var NovaDouble = function () {
	this.integerValue = 0;
	this.value = 0;
	
	
};

NovaDouble.prototype = Object.create(Number.prototype);
NovaDouble.prototype.constructor = NovaDouble;


NovaDouble.prototype.destroy = function () {
	
};

NovaDouble.init = function (value) {
	this.value = value;
	return this;
	
};

NovaDouble.numDigits = function (number) {
	var size;
	size = number < 0 ? 2 : 1;
	number /= 10;
	while (number > 0) {
		number /= 10;
		size++;
	}
	return size;
	
};

NovaDouble.genString = function (buffer, lastIndex) {
	buffer = realloc(buffer, ++lastIndex + 1);
	buffer[lastIndex] = '\0';
	return novaConstructors.newString2(buffer);
	
};

NovaDouble.genBuffer = function (value) {
	var size;
	var buffer;
	size = 11 + 1 + 15;
	buffer = [];
	sprintf(buffer, novaConstructors.newString2("%.15f"), value);
	return buffer;
	
};

NovaDouble.repetition = function (buffer, start) {
	var index;
	var c;
	index = start;
	c = buffer[index];
	while (buffer[--index] === c); return start - index - 1;
	
};

NovaDouble.lastSignificantDigit = function (buffer, start) {
	while (buffer[start--] === '0'); return start + 1;
	
};

NovaDouble.toCharArray = function (value) {
	return value.toString();
	
};

NovaDouble.toString = function (value) {
	return novaConstructors.newString2(NovaDouble.toCharArray(value));
	
};

NovaDouble.parseDouble = function (str) {
	throw novaConstructors.newUnimplementedForTargetException();
	
};

NovaDouble.prototype.withinTolerance = function (target, tolerance) {
	return NovaDouble.withinTolerance(this.value, target, tolerance);
	
};

NovaDouble.withinTolerance = function (value, target, tolerance) {
	tolerance = typeof tolerance === 'undefined' ? 0.00000001 : tolerance;
	return (value - target) < tolerance && (value - target) > -tolerance;
	
};

NovaDouble.prototype.compareTo0 = function (other) {
	return (other || nova_null).compareToReal(this.value);
	
};

NovaDouble.prototype.compareToReal = function (other) {
	return this.value - other;
	
};

NovaDouble.prototype.compareToInteger = function (other) {
	return this.value - other;
	
};

NovaDouble.compareTo0 = function (value, other) {
	return (other || nova_null).compareToReal(value);
	
};

NovaDouble.compareToReal = function (value, other) {
	return value - other;
	
};

NovaDouble.compareToInteger = function (value, other) {
	return value - other;
	
};

NovaDouble.prototype.plus0 = function (other) {
	return novaConstructors.newDouble((other || nova_null).plusReal(this.value));
	
};

NovaDouble.prototype.plusReal = function (other) {
	return this.value + other;
	
};

NovaDouble.prototype.plusInteger = function (other) {
	return this.value + other;
	
};

NovaDouble.prototype.plusEquals0 = function (other) {
	return novaConstructors.newDouble((other || nova_null).plusEqualsReal(this.value));
	
};

NovaDouble.prototype.plusEqualsReal = function (other) {
	return this.value += other;
	
};

NovaDouble.prototype.plusEqualsInteger = function (other) {
	return this.value += other;
	
};

NovaDouble.prototype.minus = function (other) {
	return novaConstructors.newDouble((other || nova_null).minusReal(this.value));
	
};

NovaDouble.prototype.minusReal = function (other) {
	return this.value - other;
	
};

NovaDouble.prototype.minusInteger = function (other) {
	return this.value - other;
	
};

NovaDouble.prototype.minusEquals = function (other) {
	return novaConstructors.newDouble((other || nova_null).minusEqualsReal(this.value));
	
};

NovaDouble.prototype.minusEqualsReal = function (other) {
	return this.value -= other;
	
};

NovaDouble.prototype.minusEqualsInteger = function (other) {
	return this.value -= other;
	
};

NovaDouble.prototype.multiply0 = function (other) {
	return novaConstructors.newDouble((other || nova_null).multiplyReal(this.value));
	
};

NovaDouble.prototype.multiplyReal = function (other) {
	return this.value * other;
	
};

NovaDouble.prototype.multiplyInteger = function (other) {
	return this.value * other;
	
};

NovaDouble.prototype.multiplyEquals = function (other) {
	return novaConstructors.newDouble((other || nova_null).multiplyEqualsReal(this.value));
	
};

NovaDouble.prototype.multiplyEqualsReal = function (other) {
	return this.value *= other;
	
};

NovaDouble.prototype.multiplyEqualsInteger = function (other) {
	return this.value *= other;
	
};

NovaDouble.prototype.equals0 = function (other) {
	return (other || nova_null).equalsReal(this.value);
	
};

NovaDouble.prototype.equalsReal = function (other) {
	return this.value === other;
	
};

NovaDouble.prototype.equalsInteger = function (other) {
	return this.value === other;
	
};

NovaDouble.equals = function (value, other) {
	return (other || nova_null).equalsReal(value);
	
};

NovaDouble.equalsReal = function (value, other) {
	return value === other;
	
};

NovaDouble.equalsInteger = function (value, other) {
	return value === other;
	
};

NovaDouble.prototype.toString = function () {
	return NovaDouble.toString(this.value);
	
};

NovaDouble.hashCodeLong = function (value) {
	return NovaMath.abs0(value);
	
};

NovaDouble.plus = function (a, b) {
	return a + b;
	
};

NovaDouble.compareTo1 = function (a, b) {
	return a - b;
	
};

NovaDouble.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/number/Double"), false);
	
};

NovaDouble.prototype.mutator__js_class = function () {
	
};

NovaDouble.prototype.accessor_realValue = function () {
	return this.value;
	
};

NovaDouble.prototype.mutator_realValue = function () {
	
};

NovaDouble.prototype.accessor_integerValue = function () {
	return this.value;
	
};

NovaDouble.prototype.mutator_integerValue = function () {
	
};

NovaDouble.prototype.super = function () {
	
};

novaConstructors.newDouble = function (value) {
	var __value = new NovaDouble()
	Number.call(__value);
	NovaDouble.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaDouble.init.call(__value, value);
	
};

var NovaFloat = function () {
	this.integerValue = 0;
	this.value = 0;
	
	
};

NovaFloat.prototype = Object.create(Number.prototype);
NovaFloat.prototype.constructor = NovaFloat;


NovaFloat.prototype.destroy = function () {
	
};

NovaFloat.init = function (value) {
	this.value = value;
	return this;
	
};

NovaFloat.prototype.withinTolerance = function (target, tolerance) {
	return NovaFloat.withinTolerance(this.value, target, tolerance);
	
};

NovaFloat.withinTolerance = function (value, target, tolerance) {
	tolerance = typeof tolerance === 'undefined' ? 0.00000001 : tolerance;
	return (value - target) < tolerance && (value - target) > -tolerance;
	
};

NovaFloat.prototype.compareTo0 = function (other) {
	return (other || nova_null).compareToReal(this.value);
	
};

NovaFloat.prototype.compareToReal = function (other) {
	return this.value - other;
	
};

NovaFloat.prototype.compareToInteger = function (other) {
	return this.value - other;
	
};

NovaFloat.compareTo = function (value, other) {
	return (other || nova_null).compareToReal(value);
	
};

NovaFloat.compareToReal = function (value, other) {
	return value - other;
	
};

NovaFloat.compareToInteger = function (value, other) {
	return value - other;
	
};

NovaFloat.prototype.plus0 = function (other) {
	return novaConstructors.newDouble((other || nova_null).plusReal(this.value));
	
};

NovaFloat.prototype.plusReal = function (other) {
	return this.value + other;
	
};

NovaFloat.prototype.plusInteger = function (other) {
	return this.value + other;
	
};

NovaFloat.prototype.plusEquals0 = function (other) {
	return novaConstructors.newDouble((other || nova_null).plusEqualsReal(this.value));
	
};

NovaFloat.prototype.plusEqualsReal = function (other) {
	return this.value += other;
	
};

NovaFloat.prototype.plusEqualsInteger = function (other) {
	return this.value += other;
	
};

NovaFloat.prototype.minus = function (other) {
	return novaConstructors.newDouble((other || nova_null).minusReal(this.value));
	
};

NovaFloat.prototype.minusReal = function (other) {
	return this.value - other;
	
};

NovaFloat.prototype.minusInteger = function (other) {
	return this.value - other;
	
};

NovaFloat.prototype.minusEquals = function (other) {
	return novaConstructors.newDouble((other || nova_null).minusEqualsReal(this.value));
	
};

NovaFloat.prototype.minusEqualsReal = function (other) {
	return this.value -= other;
	
};

NovaFloat.prototype.minusEqualsInteger = function (other) {
	return this.value -= other;
	
};

NovaFloat.prototype.multiply0 = function (other) {
	return novaConstructors.newDouble((other || nova_null).multiplyReal(this.value));
	
};

NovaFloat.prototype.multiplyReal = function (other) {
	return this.value * other;
	
};

NovaFloat.prototype.multiplyInteger = function (other) {
	return this.value * other;
	
};

NovaFloat.prototype.multiplyEquals = function (other) {
	return novaConstructors.newDouble((other || nova_null).multiplyEqualsReal(this.value));
	
};

NovaFloat.prototype.multiplyEqualsReal = function (other) {
	return this.value *= other;
	
};

NovaFloat.prototype.multiplyEqualsInteger = function (other) {
	return this.value *= other;
	
};

NovaFloat.prototype.equals0 = function (other) {
	return (other || nova_null).equalsReal(this.value);
	
};

NovaFloat.prototype.equalsReal = function (other) {
	return this.value === other;
	
};

NovaFloat.prototype.equalsInteger = function (other) {
	return this.value === other;
	
};

NovaFloat.equals = function (value, other) {
	return (other || nova_null).equalsReal(value);
	
};

NovaFloat.equalsReal = function (value, other) {
	return value === other;
	
};

NovaFloat.equalsInteger = function (value, other) {
	return value === other;
	
};

NovaFloat.prototype.toString = function () {
	return NovaFloat.toString(this.value);
	
};

NovaFloat.numDigits = function (number) {
	return NovaDouble.numDigits(number);
	
};

NovaFloat.toString = function (value) {
	return NovaDouble.toString(value);
	
};

NovaFloat.hashCodeLong = function (value) {
	return NovaMath.abs0(value);
	
};

NovaFloat.plus = function (a, b) {
	return a + b;
	
};

NovaFloat.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/number/Float"), false);
	
};

NovaFloat.prototype.mutator__js_class = function () {
	
};

NovaFloat.prototype.accessor_realValue = function () {
	return this.value;
	
};

NovaFloat.prototype.mutator_realValue = function () {
	
};

NovaFloat.prototype.accessor_integerValue = function () {
	return this.value;
	
};

NovaFloat.prototype.mutator_integerValue = function () {
	
};

NovaFloat.prototype.super = function () {
	
};

novaConstructors.newFloat = function (value) {
	var __value = new NovaFloat()
	Number.call(__value);
	NovaFloat.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaFloat.init.call(__value, value);
	
};

var NovaInt = function () {
	this.realValue = 0;
	this.value = 0;
	
	
};

NovaInt.prototype = Object.create(Number.prototype);
NovaInt.prototype.constructor = NovaInt;


NovaInt.prototype.destroy = function () {
	
};

NovaInt.init = function (value) {
	this.value = value;
	return this;
	
};

NovaInt.prototype.compareTo0 = function (other) {
	return (other || nova_null).compareToInteger(this.value);
	
};

NovaInt.prototype.compareToReal = function (other) {
	return this.value - other;
	
};

NovaInt.prototype.compareToInteger = function (other) {
	return this.value - other;
	
};

NovaInt.compareTo0 = function (value, other) {
	return (other || nova_null).compareToInteger(value);
	
};

NovaInt.compareToReal = function (value, other) {
	return value - other;
	
};

NovaInt.compareToInteger = function (value, other) {
	return value - other;
	
};

NovaInt.prototype.plus0 = function (other) {
	return novaConstructors.newLong((other || nova_null).plusInteger(this.value));
	
};

NovaInt.prototype.plusReal = function (other) {
	return this.value + other;
	
};

NovaInt.prototype.plusInteger = function (other) {
	return this.value + other;
	
};

NovaInt.prototype.plusEquals0 = function (other) {
	return novaConstructors.newLong((other || nova_null).plusEqualsInteger(this.value));
	
};

NovaInt.prototype.plusEqualsReal = function (other) {
	return this.value += other;
	
};

NovaInt.prototype.plusEqualsInteger = function (other) {
	return this.value += other;
	
};

NovaInt.prototype.minus = function (other) {
	return novaConstructors.newLong((other || nova_null).minusInteger(this.value));
	
};

NovaInt.prototype.minusReal = function (other) {
	return this.value - other;
	
};

NovaInt.prototype.minusInteger = function (other) {
	return this.value - other;
	
};

NovaInt.prototype.minusEquals = function (other) {
	return novaConstructors.newLong((other || nova_null).minusEqualsInteger(this.value));
	
};

NovaInt.prototype.minusEqualsReal = function (other) {
	return this.value -= other;
	
};

NovaInt.prototype.minusEqualsInteger = function (other) {
	return this.value -= other;
	
};

NovaInt.prototype.multiply0 = function (other) {
	return novaConstructors.newLong((other || nova_null).multiplyInteger(this.value));
	
};

NovaInt.prototype.multiplyReal = function (other) {
	return this.value * other;
	
};

NovaInt.prototype.multiplyInteger = function (other) {
	return this.value * other;
	
};

NovaInt.prototype.multiplyEquals = function (other) {
	return novaConstructors.newLong((other || nova_null).multiplyEqualsInteger(this.value));
	
};

NovaInt.prototype.multiplyEqualsReal = function (other) {
	return this.value *= other;
	
};

NovaInt.prototype.multiplyEqualsInteger = function (other) {
	return this.value *= other;
	
};

NovaInt.prototype.equals0 = function (other) {
	return (other || nova_null).equalsInteger(this.value);
	
};

NovaInt.prototype.equalsReal = function (other) {
	return this.value === other;
	
};

NovaInt.prototype.equalsInteger = function (other) {
	return this.value === other;
	
};

NovaInt.equals0 = function (value, other) {
	return (other || nova_null).equalsInteger(value);
	
};

NovaInt.equalsReal = function (value, other) {
	return value === other;
	
};

NovaInt.equalsInteger = function (value, other) {
	return value === other;
	
};

NovaInt.prototype.toString = function () {
	return NovaInt.toString(this.value);
	
};

NovaInt.numDigits = function (number) {
	return NovaLong.numDigits(number);
	
};

NovaInt.toString = function (value) {
	return NovaLong.toString(value);
	
};

NovaInt.parseInt = function (num) {
	return atoi(((num || nova_null).chars || nova_null).data);
	
};

NovaInt.hashCodeLong = function (value) {
	return NovaMath.abs1(value);
	
};

NovaInt.plus = function (a, b) {
	return a + b;
	
};

NovaInt.compareTo1 = function (a, b) {
	return a - b;
	
};

NovaInt.prototype.compareTo1 = function (other) {
	return NovaByte.compareToInteger(other, this.value);
	
};

NovaInt.prototype.equals1 = function (other) {
	return NovaInt.equalsInteger(other, this.value);
	
};

NovaInt.equals1 = function (value, other) {
	return NovaInt.equalsInteger(other, value);
	
};

NovaInt.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/number/Int"), false);
	
};

NovaInt.prototype.mutator__js_class = function () {
	
};

NovaInt.prototype.accessor_hashCodeLong = function () {
	return this.value;
	
};

NovaInt.prototype.mutator_hashCodeLong = function () {
	
};

NovaInt.prototype.accessor_realValue = function () {
	return this.value;
	
};

NovaInt.prototype.mutator_realValue = function () {
	
};

NovaInt.prototype.accessor_integerValue = function () {
	return this.value;
	
};

NovaInt.prototype.mutator_integerValue = function () {
	
};

NovaInt.prototype.super = function () {
	
};

novaConstructors.newInt = function (value) {
	var __value = new NovaInt()
	Number.call(__value);
	NovaInt.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaInt.init.call(__value, value);
	
};

var NovaLong = function () {
	this.integerValue = 0;
	this.value = 0;
	
	
};

NovaLong.prototype = Object.create(Number.prototype);
NovaLong.prototype.constructor = NovaLong;


NovaLong.prototype.destroy = function () {
	
};

NovaLong.init = function (value) {
	this.value = value;
	return this;
	
};

NovaLong.numDigits = function (number) {
	var size;
	size = number < 0 ? 2 : 1;
	number /= 10;
	while (number != 0) {
		number /= 10;
		size++;
	}
	return size;
	
};

NovaLong.toString = function (value) {
	return novaConstructors.newString2(NovaLong.toCharArray(value));
	
};

NovaLong.toCharArray = function (value) {
	return value.toString();
	
};

NovaLong.prototype.compareTo0 = function (other) {
	return (other || nova_null).compareToInteger(this.value);
	
};

NovaLong.prototype.compareToReal = function (other) {
	return this.value - other;
	
};

NovaLong.prototype.compareToInteger = function (other) {
	return this.value - other;
	
};

NovaLong.compareTo = function (value, other) {
	return (other || nova_null).compareToInteger(value);
	
};

NovaLong.compareToReal = function (value, other) {
	return value - other;
	
};

NovaLong.compareToInteger = function (value, other) {
	return value - other;
	
};

NovaLong.prototype.plus0 = function (other) {
	return novaConstructors.newLong((other || nova_null).plusInteger(this.value));
	
};

NovaLong.prototype.plusReal = function (other) {
	return this.value + other;
	
};

NovaLong.prototype.plusInteger = function (other) {
	return this.value + other;
	
};

NovaLong.prototype.plusEquals0 = function (other) {
	return novaConstructors.newLong((other || nova_null).plusEqualsInteger(this.value));
	
};

NovaLong.prototype.plusEqualsReal = function (other) {
	return this.value += other;
	
};

NovaLong.prototype.plusEqualsInteger = function (other) {
	return this.value += other;
	
};

NovaLong.prototype.minus = function (other) {
	return novaConstructors.newLong((other || nova_null).minusInteger(this.value));
	
};

NovaLong.prototype.minusReal = function (other) {
	return this.value - other;
	
};

NovaLong.prototype.minusInteger = function (other) {
	return this.value - other;
	
};

NovaLong.prototype.minusEquals = function (other) {
	return novaConstructors.newLong((other || nova_null).minusEqualsInteger(this.value));
	
};

NovaLong.prototype.minusEqualsReal = function (other) {
	return this.value -= other;
	
};

NovaLong.prototype.minusEqualsInteger = function (other) {
	return this.value -= other;
	
};

NovaLong.prototype.multiply0 = function (other) {
	return novaConstructors.newLong((other || nova_null).multiplyInteger(this.value));
	
};

NovaLong.prototype.multiplyReal = function (other) {
	return this.value * other;
	
};

NovaLong.prototype.multiplyInteger = function (other) {
	return this.value * other;
	
};

NovaLong.prototype.multiplyEquals = function (other) {
	return novaConstructors.newLong((other || nova_null).multiplyEqualsInteger(this.value));
	
};

NovaLong.prototype.multiplyEqualsReal = function (other) {
	return this.value *= other;
	
};

NovaLong.prototype.multiplyEqualsInteger = function (other) {
	return this.value *= other;
	
};

NovaLong.prototype.equals0 = function (other) {
	return (other || nova_null).equalsInteger(this.value);
	
};

NovaLong.prototype.equalsReal = function (other) {
	return this.value === other;
	
};

NovaLong.prototype.equalsInteger = function (other) {
	return this.value === other;
	
};

NovaLong.equals0 = function (value, other) {
	return (other || nova_null).equalsInteger(value);
	
};

NovaLong.equalsReal = function (value, other) {
	return value === other;
	
};

NovaLong.equalsInteger = function (value, other) {
	return value === other;
	
};

NovaLong.prototype.toString = function () {
	return NovaLong.toString(this.value);
	
};

NovaLong.hashCodeLong = function (value) {
	return NovaMath.abs0(value);
	
};

NovaLong.plus = function (a, b) {
	return a + b;
	
};

NovaLong.prototype.equals1 = function (other) {
	return NovaLong.equalsInteger(other, this.value);
	
};

NovaLong.equals1 = function (value, other) {
	return NovaLong.equalsInteger(other, value);
	
};

NovaLong.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/number/Long"), false);
	
};

NovaLong.prototype.mutator__js_class = function () {
	
};

NovaLong.prototype.accessor_realValue = function () {
	return this.value;
	
};

NovaLong.prototype.mutator_realValue = function () {
	
};

NovaLong.prototype.accessor_integerValue = function () {
	return this.value;
	
};

NovaLong.prototype.mutator_integerValue = function () {
	
};

NovaLong.prototype.super = function () {
	
};

novaConstructors.newLong = function (value) {
	var __value = new NovaLong()
	Number.call(__value);
	NovaLong.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaLong.init.call(__value, value);
	
};

var NovaShort = function () {
	this.integerValue = 0;
	this.value = 0;
	
	
};

NovaShort.prototype = Object.create(Number.prototype);
NovaShort.prototype.constructor = NovaShort;


NovaShort.prototype.destroy = function () {
	
};

NovaShort.init = function (value) {
	this.value = value;
	return this;
	
};

NovaShort.prototype.compareTo0 = function (other) {
	return (other || nova_null).compareToInteger(this.value);
	
};

NovaShort.prototype.compareToReal = function (other) {
	return this.value - other;
	
};

NovaShort.prototype.compareToInteger = function (other) {
	return this.value - other;
	
};

NovaShort.compareTo = function (value, other) {
	return (other || nova_null).compareToInteger(value);
	
};

NovaShort.compareToReal = function (value, other) {
	return value - other;
	
};

NovaShort.compareToInteger = function (value, other) {
	return value - other;
	
};

NovaShort.prototype.plus0 = function (other) {
	return novaConstructors.newLong((other || nova_null).plusInteger(this.value));
	
};

NovaShort.prototype.plusReal = function (other) {
	return this.value + other;
	
};

NovaShort.prototype.plusInteger = function (other) {
	return this.value + other;
	
};

NovaShort.prototype.plusEquals0 = function (other) {
	return novaConstructors.newLong((other || nova_null).plusEqualsInteger(this.value));
	
};

NovaShort.prototype.plusEqualsReal = function (other) {
	return this.value += other;
	
};

NovaShort.prototype.plusEqualsInteger = function (other) {
	return this.value += other;
	
};

NovaShort.prototype.minus = function (other) {
	return novaConstructors.newLong((other || nova_null).minusInteger(this.value));
	
};

NovaShort.prototype.minusReal = function (other) {
	return this.value - other;
	
};

NovaShort.prototype.minusInteger = function (other) {
	return this.value - other;
	
};

NovaShort.prototype.minusEquals = function (other) {
	return novaConstructors.newLong((other || nova_null).minusEqualsInteger(this.value));
	
};

NovaShort.prototype.minusEqualsReal = function (other) {
	return this.value -= other;
	
};

NovaShort.prototype.minusEqualsInteger = function (other) {
	return this.value -= other;
	
};

NovaShort.prototype.multiply0 = function (other) {
	return novaConstructors.newLong((other || nova_null).multiplyInteger(this.value));
	
};

NovaShort.prototype.multiplyReal = function (other) {
	return this.value * other;
	
};

NovaShort.prototype.multiplyInteger = function (other) {
	return this.value * other;
	
};

NovaShort.prototype.multiplyEquals = function (other) {
	return novaConstructors.newLong((other || nova_null).multiplyEqualsInteger(this.value));
	
};

NovaShort.prototype.multiplyEqualsReal = function (other) {
	return this.value *= other;
	
};

NovaShort.prototype.multiplyEqualsInteger = function (other) {
	return this.value *= other;
	
};

NovaShort.prototype.equals0 = function (other) {
	return (other || nova_null).equalsInteger(this.value);
	
};

NovaShort.prototype.equalsReal = function (other) {
	return this.value === other;
	
};

NovaShort.prototype.equalsInteger = function (other) {
	return this.value === other;
	
};

NovaShort.equals = function (value, other) {
	return (other || nova_null).equalsInteger(value);
	
};

NovaShort.equalsReal = function (value, other) {
	return value === other;
	
};

NovaShort.equalsInteger = function (value, other) {
	return value === other;
	
};

NovaShort.prototype.toString = function () {
	return NovaShort.toString(this.value);
	
};

NovaShort.numDigits = function (number) {
	return NovaLong.numDigits(number);
	
};

NovaShort.toString = function (value) {
	return NovaLong.toString(value);
	
};

NovaShort.hashCodeLong = function (value) {
	return NovaMath.abs0(value);
	
};

NovaShort.plus = function (a, b) {
	return a + b;
	
};

NovaShort.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/primitive/number/Short"), false);
	
};

NovaShort.prototype.mutator__js_class = function () {
	
};

NovaShort.prototype.accessor_realValue = function () {
	return this.value;
	
};

NovaShort.prototype.mutator_realValue = function () {
	
};

NovaShort.prototype.accessor_integerValue = function () {
	return this.value;
	
};

NovaShort.prototype.mutator_integerValue = function () {
	
};

NovaShort.prototype.super = function () {
	
};

novaConstructors.newShort = function (value) {
	var __value = new NovaShort()
	Number.call(__value);
	NovaShort.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaShort.init.call(__value, value);
	
};

var Process = function () {
	this.reader = null;
	
	
};

Process.prototype = Object.create(NovaObject.prototype);
Process.prototype.constructor = Process;


Process.prototype.destroy = function () {
	
};

Process.init = function (reader) {
	this.reader = reader;
	return this;
	
};

Process.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/process/Process"), false);
	
};

Process.prototype.mutator__js_class = function () {
	
};

Process.prototype.super = function () {
	
};

novaConstructors.newProcess = function (reader) {
	var __value = new Process()
	NovaObject.call(__value);
	Process.prototype.super.apply(__value, [].slice.call(arguments));
	return Process.init.call(__value, reader);
	
};

var Match = function () {
	this.match = null;
	this.source = null;
	this.start = 0;
	this.end = 0;
	
	
};

Match.prototype = Object.create(NovaObject.prototype);
Match.prototype.constructor = Match;


Match.prototype.destroy = function () {
	
};

Match.init = function (source, start, end) {
	this.source = source;
	this.start = start;
	this.end = end;
	return this;
	
};

Match.prototype.toString = function () {
	return this.accessor_match();
	
};

Match.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/regex/Match"), false);
	
};

Match.prototype.mutator__js_class = function () {
	
};

Match.prototype.accessor_count = function () {
	return this.end - this.start;
	
};

Match.prototype.mutator_count = function () {
	
};

Match.prototype.accessor_match = function () {
	return (this.source || nova_null).substring(this.start, this.end);
	
};

Match.prototype.mutator_match = function () {
	
};

Match.prototype.super = function () {
	
};

novaConstructors.newMatch = function (source, start, end) {
	var __value = new Match()
	NovaObject.call(__value);
	Match.prototype.super.apply(__value, [].slice.call(arguments));
	return Match.init.call(__value, source, start, end);
	
};

var Pattern = function () {
	this.pattern = null;
	
	
};

Pattern.prototype = Object.create(NovaObject.prototype);
Pattern.prototype.constructor = Pattern;


Pattern.prototype.destroy = function () {
	
};

Pattern.init = function (pattern) {
	this.pattern = pattern;
	return this;
	
};

Pattern.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/regex/Pattern"), false);
	
};

Pattern.prototype.mutator__js_class = function () {
	
};

Pattern.prototype.super = function () {
	
};

novaConstructors.newPattern = function (pattern) {
	var __value = new Pattern()
	NovaObject.call(__value);
	Pattern.prototype.super.apply(__value, [].slice.call(arguments));
	return Pattern.init.call(__value, pattern);
	
};

var Regex = function () {
	
	
};

Regex.prototype = Object.create(NovaObject.prototype);
Regex.prototype.constructor = Regex;


Regex.prototype.destroy = function () {
	
};

Regex.containsMatch0 = function (pattern, search) {
	return Regex.containsMatch1((pattern || nova_null).pattern, search);
	
};

Regex.containsMatch1 = function (regex, search) {
	return (Regex.getMatches1(regex, search) || nova_null).accessor_count() > 0;
	
};

Regex.getMatches0 = function (pattern, search) {
	return Regex.getMatches1((pattern || nova_null).pattern, search);
	
};

Regex.getMatches1 = function (regex, search) {
	return novaConstructors.newArray();
	
};

Regex.init = function () {
	return this;
	
};

Regex.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/regex/Regex"), false);
	
};

Regex.prototype.mutator__js_class = function () {
	
};

Regex.prototype.super = function () {
	
};

novaConstructors.newRegex = function () {
	var __value = new Regex()
	NovaObject.call(__value);
	Regex.prototype.super.apply(__value, [].slice.call(arguments));
	return Regex.init.call(__value);
	
};

var MD5 = function () {
	
	
};

MD5.prototype = Object.create(NovaObject.prototype);
MD5.prototype.constructor = MD5;


MD5.prototype.destroy = function () {
	
};

MD5.encrypt = function (str) {
	return null;
	
};

MD5.init = function () {
	return this;
	
};

MD5.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/security/MD5"), false);
	
};

MD5.prototype.mutator__js_class = function () {
	
};

MD5.prototype.super = function () {
	
};

novaConstructors.newMD5 = function () {
	var __value = new MD5()
	NovaObject.call(__value);
	MD5.prototype.super.apply(__value, [].slice.call(arguments));
	return MD5.init.call(__value);
	
};

var Sha256 = function () {
	
	
};

Sha256.prototype = Object.create(NovaObject.prototype);
Sha256.prototype.constructor = Sha256;


Sha256.prototype.destroy = function () {
	
};

Sha256.prototype.digest = function (msg) {
	var hash;
	hash = this.generated54();
	return (hash || nova_null).join(novaConstructors.newString2(""));
	
};

Sha256.prototype.rotr = function (n, x) {
	return (x >>> n) | (x << (32 - n));
	
};

Sha256.prototype.l1 = function (x) {
	return this.rotr(2, x) ^ this.rotr(13, x) ^ this.rotr(22, x);
	
};

Sha256.prototype.l2 = function (x) {
	return this.rotr(6, x) ^ this.rotr(11, x) ^ this.rotr(25, x);
	
};

Sha256.prototype.l3 = function (x) {
	return this.rotr(7, x) ^ this.rotr(18, x) ^ (x >>> 3);
	
};

Sha256.prototype.l4 = function (x) {
	return this.rotr(17, x) ^ this.rotr(19, x) ^ (x >>> 10);
	
};

Sha256.prototype.l5 = function (x, y, z) {
	return (x & y) ^ (~x & z);
	
};

Sha256.prototype.l6 = function (x, y, z) {
	return (x & y) ^ (x & z) ^ (y & z);
	
};

Sha256.init = function () {
	return this;
	
};

Sha256.generated30 = function () {
	var temp;
	temp = [];
	temp[0] = 0x428a2f98;
	temp[1] = 0x71374491;
	temp[2] = 0xb5c0fbcf;
	temp[3] = 0xe9b5dba5;
	temp[4] = 0x3956c25b;
	temp[5] = 0x59f111f1;
	temp[6] = 0x923f82a4;
	temp[7] = 0xab1c5ed5;
	temp[8] = 0xd807aa98;
	temp[9] = 0x12835b01;
	temp[10] = 0x243185be;
	temp[11] = 0x550c7dc3;
	temp[12] = 0x72be5d74;
	temp[13] = 0x80deb1fe;
	temp[14] = 0x9bdc06a7;
	temp[15] = 0xc19bf174;
	temp[16] = 0xe49b69c1;
	temp[17] = 0xefbe4786;
	temp[18] = 0x0fc19dc6;
	temp[19] = 0x240ca1cc;
	temp[20] = 0x2de92c6f;
	temp[21] = 0x4a7484aa;
	temp[22] = 0x5cb0a9dc;
	temp[23] = 0x76f988da;
	temp[24] = 0x983e5152;
	temp[25] = 0xa831c66d;
	temp[26] = 0xb00327c8;
	temp[27] = 0xbf597fc7;
	temp[28] = 0xc6e00bf3;
	temp[29] = 0xd5a79147;
	temp[30] = 0x06ca6351;
	temp[31] = 0x14292967;
	temp[32] = 0x27b70a85;
	temp[33] = 0x2e1b2138;
	temp[34] = 0x4d2c6dfc;
	temp[35] = 0x53380d13;
	temp[36] = 0x650a7354;
	temp[37] = 0x766a0abb;
	temp[38] = 0x81c2c92e;
	temp[39] = 0x92722c85;
	temp[40] = 0xa2bfe8a1;
	temp[41] = 0xa81a664b;
	temp[42] = 0xc24b8b70;
	temp[43] = 0xc76c51a3;
	temp[44] = 0xd192e819;
	temp[45] = 0xd6990624;
	temp[46] = 0xf40e3585;
	temp[47] = 0x106aa070;
	temp[48] = 0x19a4c116;
	temp[49] = 0x1e376c08;
	temp[50] = 0x2748774c;
	temp[51] = 0x34b0bcb5;
	temp[52] = 0x391c0cb3;
	temp[53] = 0x4ed8aa4a;
	temp[54] = 0x5b9cca4f;
	temp[55] = 0x682e6ff3;
	temp[56] = 0x748f82ee;
	temp[57] = 0x78a5636f;
	temp[58] = 0x84c87814;
	temp[59] = 0x8cc70208;
	temp[60] = 0x90befffa;
	temp[61] = 0xa4506ceb;
	temp[62] = 0xbef9a3f7;
	temp[63] = 0xc67178f2;
	return novaConstructors.newArray1Long1(temp, 64);
	
};

Sha256.prototype.generated54 = function () {
	var temp;
	temp = [];
	temp[0] = 0x6a09e667;
	temp[1] = 0xbb67ae85;
	temp[2] = 0x3c6ef372;
	temp[3] = 0xa54ff53a;
	temp[4] = 0x510e527f;
	temp[5] = 0x9b05688c;
	temp[6] = 0x1f83d9ab;
	temp[7] = 0x5be0cd19;
	return novaConstructors.newArray1Long1(temp, 8);
	
};

Sha256.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/security/Sha256"), false);
	
};

Sha256.prototype.mutator__js_class = function () {
	
};

Sha256.prototype.super = function () {
	
};

novaConstructors.newSha256 = function () {
	var __value = new Sha256()
	NovaObject.call(__value);
	Sha256.prototype.super.apply(__value, [].slice.call(arguments));
	return Sha256.init.call(__value);
	
};

var JsonSerializer = function () {
	
	
};

JsonSerializer.prototype = Object.create(NovaObject.prototype);
JsonSerializer.prototype.constructor = JsonSerializer;


JsonSerializer.prototype.destroy = function () {
	
};

JsonSerializer.prototype.serialize = function (object) {
	
};

JsonSerializer.prototype.parse0 = function (file) {
	return this.parse1(novaConstructors.newFileReader(file).readAllContents());
	
};

JsonSerializer.prototype.parse1 = function (json) {
	if (this.isObject(json)) {
		return this.parseObject0(json);
	} else if (this.isArray(json)) {
	}
	else {
		throw novaConstructors.newInvalidParseException();
	}
	
};

JsonSerializer.prototype.parseValue = function (value) {
	if (this.isObject(value)) {
		return this.parseObject0(value);
	} else if (this.isArray(value)) {
	}
	else if (this.isString(value)) {
	}
	else {
		return value;
	}
	
};

JsonSerializer.prototype.parseArray = function (json) {
	var self = this;
	
	var trimmed;
	var contents;
	var values;
	trimmed = (json || nova_null).trim();
	if ((trimmed || nova_null).accessor_first() != '[') {
		throw novaConstructors.newInvalidParseException(novaConstructors.newString2("Not a JSON array"));
	} else if ((trimmed || nova_null).accessor_last() != ']') {
	}
	contents = (trimmed || nova_null).trimEnds(1, true);
	values = (contents || nova_null).splitAtCommas(undefined, true);
	return (values || nova_null).map0((_1, _2, _3) => {
			return self.parseValue(_1);
			
	});
	return null;
	
};

JsonSerializer.prototype.isObject = function (json) {
	var trimmed;
	return ((trimmed = (json || nova_null).trim()) || nova_null).accessor_first() === '{' && (trimmed || nova_null).findEndingMatch0(0, '{', '}') === (trimmed || nova_null).count - 1;
};

JsonSerializer.prototype.isArray = function (json) {
	var trimmed;
	return ((trimmed = (json || nova_null).trim()) || nova_null).accessor_first() === '[' && (trimmed || nova_null).findEndingMatch0(0, '[', ']') === (trimmed || nova_null).count - 1;
	
};

JsonSerializer.prototype.isSingleQuoteString = function (json) {
	var trimmed;
	return ((trimmed = (json || nova_null).trim()) || nova_null).accessor_first() === '\'' && (trimmed || nova_null).findEndingSingleQuote(0) === (trimmed || nova_null).count - 1;
	
};

JsonSerializer.prototype.isDoubleQuoteString = function (json) {
	var trimmed;
	return ((trimmed = (json || nova_null).trim()) || nova_null).accessor_first() === '"' && (trimmed || nova_null).findEndingQuote(0) === (trimmed || nova_null).count - 1;
	
};

JsonSerializer.prototype.isString = function (json) {
	return this.isSingleQuoteString(json) || this.isDoubleQuoteString(json);
	
};

JsonSerializer.prototype.parseObject0 = function (json) {
	return this.parseObject1(json, novaConstructors.newHashMap0(5, 5));
	
};

JsonSerializer.prototype.parseObject1 = function (json, map) {
	var self = this;
	
	var trimmed;
	var contents;
	var properties;
	trimmed = (json || nova_null).trim();
	if ((trimmed || nova_null).accessor_first() != '{') {
		throw novaConstructors.newInvalidParseException(novaConstructors.newString2("Not a JSON object"));
	} else if ((trimmed || nova_null).accessor_last() != '}') {
}
contents = (trimmed || nova_null).trimEnds(1, true);
properties = (contents || nova_null).splitAtCommas(undefined, true);
(properties || nova_null).forEach0((prop, _2, _3) => {
		var colonIndex;
		var split;
		colonIndex = (prop || nova_null).findCharOnTopLevel0(':');
		split = JsonSerializer.generated55(((prop || nova_null).substring(0, colonIndex) || nova_null).trim(), ((prop || nova_null).substring(colonIndex + 1) || nova_null).trim());
		if (self.isString((split || nova_null).accessor_first())) {
			(split || nova_null).set0(0, ((split || nova_null).accessor_first() || nova_null).trimEnds(1));
		}
		(map || nova_null).set((split || nova_null).accessor_first(), self.parseValue((split || nova_null).accessor_last()));
		
});
return map;
};

JsonSerializer.init = function () {
	return this;
	
};

JsonSerializer.generated55 = function (value0, value1) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	return novaConstructors.newArray1(temp, 2);
	
};

JsonSerializer.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/serialization/JsonSerializer"), false);
	
};

JsonSerializer.prototype.mutator__js_class = function () {
	
};

JsonSerializer.prototype.super = function () {
	
};

novaConstructors.newJsonSerializer = function () {
	var __value = new JsonSerializer()
	NovaObject.call(__value);
	JsonSerializer.prototype.super.apply(__value, [].slice.call(arguments));
	return JsonSerializer.init.call(__value);
	
};

var InvalidParseException = function () {
	
	
};

InvalidParseException.prototype = Object.create(Exception.prototype);
InvalidParseException.prototype.constructor = InvalidParseException;


InvalidParseException.prototype.destroy = function () {
	
};

InvalidParseException.init = function (message) {
	message = typeof message === 'undefined' ? novaConstructors.newString2("Invalid parse") : message;
	return Exception.init.call(this, message);
	return this;
	
};

InvalidParseException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/serialization/JsonSerializer.InvalidParseException"), false);
	
};

InvalidParseException.prototype.mutator__js_class = function () {
	
};

InvalidParseException.prototype.super = function () {
	
};

novaConstructors.newInvalidParseException = function (message) {
	var __value = new InvalidParseException()
	Exception.call(__value);
	InvalidParseException.prototype.super.apply(__value, [].slice.call(arguments));
	return InvalidParseException.init.call(__value, message);
	
};

var MissingMatchingTokenException = function () {
	
	
};

MissingMatchingTokenException.prototype = Object.create(InvalidParseException.prototype);
MissingMatchingTokenException.prototype.constructor = MissingMatchingTokenException;


MissingMatchingTokenException.prototype.destroy = function () {
	
};

MissingMatchingTokenException.init = function (token) {
	return InvalidParseException.init.call(this, novaConstructors.newString2("Missing matching '").plus0(Char.toString((token)).plus0(novaConstructors.newString2("' token"))));
	return this;
	
};

MissingMatchingTokenException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/serialization/JsonSerializer.MissingMatchingTokenException"), false);
	
};

MissingMatchingTokenException.prototype.mutator__js_class = function () {
	
};

MissingMatchingTokenException.prototype.super = function () {
	
};

novaConstructors.newMissingMatchingTokenException = function (token) {
	var __value = new MissingMatchingTokenException()
	InvalidParseException.call(__value);
	MissingMatchingTokenException.prototype.super.apply(__value, [].slice.call(arguments));
	return MissingMatchingTokenException.init.call(__value, token);
	
};

var SyntaxStringFunctions = function () {
	this.isNumber = 0;
	this.firstWord = null;
	
	
};

SyntaxStringFunctions.prototype.constructor = SyntaxStringFunctions;


SyntaxStringFunctions.prototype.containsAllWhitespaceAfter = function (index, direction) {
	direction = typeof direction === 'undefined' ? 1 : direction;
	var i;
	i = index;
	for (; i < this.count && i >= 0; i += direction) {
		if (!(SyntaxStringFunctions.WHITESPACE || nova_null).contains((this.chars || nova_null).get(i))) {
			return false;
		}
	}
	return true;
	
};

SyntaxStringFunctions.prototype.getArrayAccesses = function () {
	var array;
	var bracketIndex;
	array = null;
	bracketIndex = this.count - 1;
	while ((this.chars || nova_null).get(bracketIndex) === ']') {
		var start;
		var old;
		start = this.findEndingMatch0(bracketIndex, '[', ']', -1);
		old = bracketIndex;
		bracketIndex = start - 1;
		if (start > 0) {
			if ((this.chars || nova_null).get(bracketIndex) === ')' || (this.chars || nova_null).get(bracketIndex) === ']' || (this.substring(undefined, start) || nova_null).accessor_isIdentifier()) {
			var nova_local_0;
			array = (nova_local_0 = array) != null ? nova_local_0 : novaConstructors.newArray();
			(array || nova_null).add1(0, (this.substring(start + 1, old) || nova_null).trim());
		} else if ((array) != null) {
		}
	}
	if (bracketIndex <= 1 || (this.chars || nova_null).get(bracketIndex) != ']') {
		break;
	}
}
return novaConstructors.newTuple22Int(array, bracketIndex + 1);
};

SyntaxStringFunctions.prototype.containsWord = function (search, start) {
	start = typeof start === 'undefined' ? 0 : start;
	return this.nextWordIndex(search, start) >= 0;
	
};

SyntaxStringFunctions.prototype.nextWordIndex = function (search, start, defaultReturnValue) {
	var index;
	start = typeof start === 'undefined' ? 0 : start;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	index = this.indexOf2(search, start);
	while (index >= 0) {
		if ((index === 0 || (SyntaxStringFunctions.WHITESPACE || nova_null).contains((this.chars || nova_null).get(index - 1))) && (index + (search || nova_null).count >= this.count || (SyntaxStringFunctions.WHITESPACE || nova_null).contains((this.chars || nova_null).get(index + (search || nova_null).count)))) {
			return index;
		}
		index = this.indexOf2(search, index + (search || nova_null).count + 1);
	}
	return defaultReturnValue;
	
};

SyntaxStringFunctions.prototype.nextWord = function (start, direction, defaultReturnValue) {
	var wordStartIndex;
	start = typeof start === 'undefined' ? 0 : start;
	direction = typeof direction === 'undefined' ? 1 : direction;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? null : defaultReturnValue;
	wordStartIndex = this.nextNonWhitespaceIndex(start, direction);
	if (wordStartIndex >= 0) {
		var wordEndIndex;
		wordEndIndex = this.nextWhitespaceIndex(wordStartIndex, direction);
		if (direction < 0) {
			var temp;
			temp = wordStartIndex + 1;
			wordStartIndex = wordEndIndex + 1;
			wordEndIndex = temp;
		}
		return this.substring(wordStartIndex, wordEndIndex);
	}
	return defaultReturnValue;
	
};

SyntaxStringFunctions.prototype.nextNonWhitespaceChar = function (start, defaultReturnValue) {
	var index;
	start = typeof start === 'undefined' ? 0 : start;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? 0 : defaultReturnValue;
	index = this.nextNonWhitespaceIndex(start);
	if (index >= 0) {
		return (this.chars || nova_null).get(index);
	}
	return defaultReturnValue;
	
};

SyntaxStringFunctions.prototype.nextNonWhitespaceIndex = function (start, direction, defaultReturnValue) {
	start = typeof start === 'undefined' ? 0 : start;
	direction = typeof direction === 'undefined' ? 1 : direction;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	return this.nextIndexThatContains(SyntaxStringFunctions.WHITESPACE, start, true, direction, defaultReturnValue);
	
};

SyntaxStringFunctions.prototype.nextWhitespaceIndex = function (start, direction, defaultReturnValue) {
	start = typeof start === 'undefined' ? 0 : start;
	direction = typeof direction === 'undefined' ? 1 : direction;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	return this.nextIndexThatContains(SyntaxStringFunctions.WHITESPACE, start, false, direction, defaultReturnValue);
	
};

SyntaxStringFunctions.prototype.nextIndexThatDoesntContain = function (searchChars, start, direction, defaultReturnValue) {
	start = typeof start === 'undefined' ? 0 : start;
	direction = typeof direction === 'undefined' ? 1 : direction;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	return this.nextIndexThatContains(searchChars, start, true, direction, defaultReturnValue);
	
};

SyntaxStringFunctions.prototype.nextIndexThatContains = function (searchChars, start, opposite, direction, defaultReturnValue) {
	start = typeof start === 'undefined' ? 0 : start;
	opposite = typeof opposite === 'undefined' ? false : opposite;
	direction = typeof direction === 'undefined' ? 1 : direction;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	while (start < this.count && start >= 0 && (searchChars || nova_null).contains((this.chars || nova_null).get(start)) === opposite) {
		start += direction;
	}
	if (start <= this.count && start >= 0) {
		return start;
	}
	return defaultReturnValue;
	
};

SyntaxStringFunctions.prototype.nextLetterIndex = function (start, direction, opposite, bound) {
	start = typeof start === 'undefined' ? 0 : start;
	direction = typeof direction === 'undefined' ? 1 : direction;
	opposite = typeof opposite === 'undefined' ? false : opposite;
	bound = typeof bound === 'undefined' ? false : bound;
	while (start >= 0 && start < this.count) {
		var c;
		c = (this.chars || nova_null).get(start);
		if (((SyntaxStringFunctions.WHITESPACE || nova_null).contains(c) || (SyntaxStringFunctions.SYMBOLS_CHARS || nova_null).contains(c)) === opposite) {
			return start;
		}
		start += direction;
	}
	if (bound) {
		if (direction > 0) {
			return this.count;
		}
		return 0;
	}
	return -1;
	
};

SyntaxStringFunctions.prototype.isSurroundedByQuotes = function () {
	return this.count >= 2 && (this.chars || nova_null).accessor_first() === '"' && (this.chars || nova_null).accessor_last() === '"';
	
};

SyntaxStringFunctions.prototype.removeSurroundingQuotes = function () {
	var input;
	input = this;
	while ((input || nova_null).isSurroundedByQuotes()) {
		input = (input || nova_null).substring(1, (input || nova_null).count - 1);
	}
	return input;
	
};

SyntaxStringFunctions.prototype.containsString0 = function (needles, index) {
	var self = this;
	
	index = typeof index === 'undefined' ? 0 : index;
	return (needles || nova_null).any0((_1, _2, _3) => {
			return self.containsString1(_1, index);
			
	});
	
};

SyntaxStringFunctions.prototype.containsString1 = function (needle, index) {
	index = typeof index === 'undefined' ? 0 : index;
	var i;
	i = 0;
	for (; i < (needle || nova_null).count; i++) {
		if (i + index >= this.count || (this.chars || nova_null).get(i + index) != (needle || nova_null).get(i)) {
			return false;
		}
	}
	return true;
	
};

SyntaxStringFunctions.defaultCharacterCheck = function (value, c, start, direction) {
	direction = typeof direction === 'undefined' ? 1 : direction;
	start += direction;
	if (start > 0 && (value || nova_null).get(start - 1) === '\\' && (value || nova_null).get(start - 2) != '\\') {
		return start + direction;
	}
	return start;
	
};

SyntaxStringFunctions.prototype.findEndingChar = function (c, start, direction, advance, defaultReturnValue) {
	direction = typeof direction === 'undefined' ? 1 : direction;
	advance = typeof advance === 'undefined' ? SyntaxStringFunctions.defaultCharacterCheck : advance;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	if (start < 0 || start >= this.count) {
		return -1;
	}
	start = advance(this, (this.chars || nova_null).get(start), start, direction);
	while (start >= 0 && start < this.count) {
		if ((this.chars || nova_null).get(start) === c) {
			return start;
		}
		start = advance(this, (this.chars || nova_null).get(start), start, direction);
	}
	return defaultReturnValue;
	
};

SyntaxStringFunctions.prototype.findEndingQuote = function (start, direction) {
	direction = typeof direction === 'undefined' ? 1 : direction;
	return this.findEndingStringChar('"', start, direction);
	
};

SyntaxStringFunctions.prototype.findEndingSingleQuote = function (start, direction) {
	direction = typeof direction === 'undefined' ? 1 : direction;
	return this.findEndingStringChar('\'', start, direction);
	
};

SyntaxStringFunctions.prototype.findEndingStringChar = function (c, start, direction) {
	var self = this;
	
	direction = typeof direction === 'undefined' ? 1 : direction;
	return this.findEndingChar(c, start, direction, (str, c, i, dir) => {
			i += dir;
			if (dir > 0 && i < (str || nova_null).count - 3 && (str || nova_null).get(i) === '#' && (str || nova_null).get(i + 1) === '{') {
				return (i = (str || nova_null).findEndingChar('}', i + dir, dir)) >= 0 ? i + dir : i;
		}
		return SyntaxStringFunctions.defaultCharacterCheck(str, c, i - dir, dir);
		
});
};

SyntaxStringFunctions.prototype.findEndingMatch0 = function (index, start, end, direction, escapeChar) {
	direction = typeof direction === 'undefined' ? 1 : direction;
	escapeChar = typeof escapeChar === 'undefined' ? '\0' : escapeChar;
	return this.findEndingMatch1(index, Char.toString((start)).plus0(novaConstructors.newString2("")), Char.toString((end)).plus0(novaConstructors.newString2("")), direction, escapeChar);
	
};

SyntaxStringFunctions.prototype.findEndingMatch1 = function (index, start, end, direction, escapeChar, defaultReturnValue) {
	var scope;
	direction = typeof direction === 'undefined' ? 1 : direction;
	escapeChar = typeof escapeChar === 'undefined' ? '\0' : escapeChar;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	if (direction < 0) {
		var temp;
		temp = start;
		start = end;
		end = temp;
	}
	scope = 0;
	while (index >= 0 && index < this.count) {
		var c;
		c = (this.chars || nova_null).get(index);
		if (c === escapeChar && direction > 0) {
			if (index < this.count - 1) {
				if (this.containsString1(start, index + 1)) {
					index++;
				}
			}
		} else if (this.containsString1(start, index) && (direction > 0 || index > 0 && (this.chars || nova_null).get(index - 1) != escapeChar) && (!(start || nova_null).equals0(end) || scope === 0)) {
		}
		else if (this.containsString1(end, index) && (direction > 0 || index > 0 && (this.chars || nova_null).get(index - 1) != escapeChar)) {
		}
		else if (c === '"') {
		}
		else if (c === '\'') {
		}
		index += direction;
	}
	return defaultReturnValue;
	
};

SyntaxStringFunctions.prototype.splitAtDotOperator = function (defaultReturnValue) {
	var prev;
	var dot;
	var fragments;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? null : defaultReturnValue;
	prev = 0;
	dot = this.findDotOperatorIndex();
	fragments = novaConstructors.newArray();
	while (dot > 0) {
		(fragments || nova_null).add0(this.substring(prev, dot));
		prev = dot + 1;
		dot = this.findDotOperatorIndex(prev);
	}
	if (prev > 0) {
		(fragments || nova_null).add0(this.substring(prev));
		return fragments;
	} else {
		return defaultReturnValue;
	}
	
};

SyntaxStringFunctions.prototype.splitValues = function () {
	return this.split(novaConstructors.newPattern(novaConstructors.newString2("\\s+")));
	
};

SyntaxStringFunctions.prototype.splitAtCommas = function (searchGenerics, allowTrailing) {
	var strs;
	var oldIndex;
	var index;
	var last;
	searchGenerics = typeof searchGenerics === 'undefined' ? false : searchGenerics;
	allowTrailing = typeof allowTrailing === 'undefined' ? false : allowTrailing;
	strs = novaConstructors.newArray();
	if ((this.trim() || nova_null).count === 0) {
		return strs;
	}
	oldIndex = 0;
	index = -1;
	while ((index = this.findCharOnTopLevel0(',', index + 1, searchGenerics)) >= 0) {
		(strs || nova_null).add0((this.substring(oldIndex, index) || nova_null).trim());
		oldIndex = index + 1;
	}
	last = (this.substring(oldIndex) || nova_null).trim();
	if (!allowTrailing || (last || nova_null).count > 0) {
		(strs || nova_null).add0(last);
	}
	return strs;
	
};

SyntaxStringFunctions.prototype.findCharOnTopLevel0 = function (needle, start, searchGenerics) {
	var array;
	start = typeof start === 'undefined' ? 0 : start;
	searchGenerics = typeof searchGenerics === 'undefined' ? false : searchGenerics;
	array = novaConstructors.newArray0(1);
	(array || nova_null).add0(Char.toString((needle)).plus0(novaConstructors.newString2("")));
	return this.findStringOnTopLevel1(array, start, searchGenerics);
	
};

SyntaxStringFunctions.prototype.findCharOnTopLevel1 = function (needles, start, searchGenerics) {
	var array;
	var nova_local_0;
	start = typeof start === 'undefined' ? 0 : start;
	searchGenerics = typeof searchGenerics === 'undefined' ? false : searchGenerics;
	array = novaConstructors.newArray0((needles || nova_null).accessor_count());
	nova_local_0 = ((needles) || nova_null).accessor_iterator();
	while ((nova_local_0 || nova_null).accessor_hasNext()) {
		needle = (nova_local_0 || nova_null).accessor_next();
		(array || nova_null).add0(Char.toString((needle)).plus0(novaConstructors.newString2("")));
	}
	return this.findStringOnTopLevel1(array, start, searchGenerics);
	
};

SyntaxStringFunctions.prototype.findWordOnTopLevel = function (word, start, searchGenerics, defaultReturnValue) {
	var index;
	start = typeof start === 'undefined' ? 0 : start;
	searchGenerics = typeof searchGenerics === 'undefined' ? false : searchGenerics;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	index = this.findStringOnTopLevel0(word, start, searchGenerics, defaultReturnValue);
	while (index >= 0 && ((index > 0 && !(SyntaxStringFunctions.WORD_BOUNDARIES || nova_null).contains((this.chars || nova_null).get(index - 1))) || (index + (word || nova_null).count < this.count - 1 && !(SyntaxStringFunctions.WORD_BOUNDARIES || nova_null).contains((this.chars || nova_null).get(index + (word || nova_null).count))))) {
		index = this.findStringOnTopLevel0(word, index + (word || nova_null).count + 1, searchGenerics, defaultReturnValue);
	}
	return index;
	
};

SyntaxStringFunctions.prototype.findStringOnTopLevel0 = function (needle, start, searchGenerics, defaultReturnValue) {
	start = typeof start === 'undefined' ? 0 : start;
	searchGenerics = typeof searchGenerics === 'undefined' ? false : searchGenerics;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	return this.findStringOnTopLevel1(this.generated2(needle), start, searchGenerics, defaultReturnValue);
	
};

SyntaxStringFunctions.prototype.findStringOnTopLevel1 = function (needles, start, searchGenerics, defaultReturnValue) {
	start = typeof start === 'undefined' ? 0 : start;
	searchGenerics = typeof searchGenerics === 'undefined' ? false : searchGenerics;
	defaultReturnValue = typeof defaultReturnValue === 'undefined' ? -1 : defaultReturnValue;
	while (start < this.count) {
		var c;
		c = (this.chars || nova_null).get(start);
		if (this.containsString0(needles, start)) {
			return start;
		} else {
			switch ((c)) {
				case '"':
				start = this.findEndingQuote(start) + 1;
				
				break;
				case '\'':
				start = this.findEndingSingleQuote(start) + 1;
				
				break;
				case '(':
				start = this.findEndingMatch0(start, '(', ')') + 1;
			
			break;
			case '{':
			start = this.findEndingMatch0(start, '{', '}') + 1;
		
		break;
		case '[':
		start = this.findEndingMatch0(start, '[', ']') + 1;
		
		break;
		case '<':
		if (searchGenerics) {
			start = this.findEndingMatch0(start, '<', '>');
		}
		
		default:
		start++;
		
	}
	if (start <= 0) {
		return -1;
	}
}}
return defaultReturnValue;
};

SyntaxStringFunctions.prototype.findGroupedSymbols = function (start, direction) {
	start = typeof start === 'undefined' ? 0 : start;
	direction = typeof direction === 'undefined' ? 1 : direction;
	return this.findGroupedChars(SyntaxStringFunctions.SYMBOLS_CHARS, start, direction);
	
};

SyntaxStringFunctions.prototype.findGroupedChars = function (chars, start, direction) {
	var index;
	start = typeof start === 'undefined' ? 0 : start;
	direction = typeof direction === 'undefined' ? 1 : direction;
	index = start;
	while (index < this.count && index >= 0 && (chars || nova_null).contains((this.chars || nova_null).get(index))) {
		index += direction;
	}
	if (direction < 0) {
		return this.substring(index + 1, start + 1);
	}
	return this.substring(start, index);
	
};

SyntaxStringFunctions.prototype.searchGenericType = function (start, backwards) {
	backwards = typeof backwards === 'undefined' ? true : backwards;
	if (backwards) {
		var stack;
		var index;
		stack = 0;
		index = 0;
		var i;
		i = start;
		for (; i >= 0; i--) {
			var c;
			c = (this.chars || nova_null).get(i);
			if (c === '>') {
				index = stack === 0 ? i : index;
				stack++;
			} else if (c === '<') {
			}
			if (stack === 0) {
				if (index > 0) {
					return this.substring(i + 1, index);
				}
				return null;
			}
		}
	} else {
	}
	return null;
	
};

SyntaxStringFunctions.prototype.findDotOperatorIndex = function (start) {
	start = typeof start === 'undefined' ? 0 : start;
	return this.findCharOnTopLevel0('.', start);
	
};

SyntaxStringFunctions.prototype.generated2 = function (value0) {
	var temp;
	temp = [];
	temp[0] = value0;
	return novaConstructors.newArray1(temp, 1);
	
};

SyntaxStringFunctions.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/serialization/SyntaxStringFunctions"), false);
	
};

SyntaxStringFunctions.prototype.mutator__js_class = function () {
	
};

SyntaxStringFunctions.prototype.accessor_isIdentifier = function () {
	return this.count > 0 && this.matches(novaConstructors.newPattern(novaConstructors.newString2("[A-Za-z_][A-Za-z0-9_]*")));
	
};

SyntaxStringFunctions.prototype.mutator_isIdentifier = function () {
	
};

SyntaxStringFunctions.prototype.accessor_isNumber = function () {
	return this.count > 0 && this.matches(novaConstructors.newPattern(novaConstructors.newString2("-?[0-9]+")));
	
};

SyntaxStringFunctions.prototype.mutator_isNumber = function () {
	
};

SyntaxStringFunctions.prototype.accessor_isBool = function () {
	return this.equals0(novaConstructors.newString2("true")) || this.equals0(novaConstructors.newString2("false"));
	
};

SyntaxStringFunctions.prototype.mutator_isBool = function () {
	
};

SyntaxStringFunctions.prototype.accessor_firstWord = function () {
	return this.nextWord();
	
};

SyntaxStringFunctions.prototype.mutator_firstWord = function () {
	
};

SyntaxStringFunctions.prototype.super = function () {
	
};

var UIAction = function () {
	
	
};

UIAction.prototype = Object.create(UIComponent.prototype);
UIAction.prototype.constructor = UIAction;


UIAction.prototype.onAction = function () {
	var self = this;
	
	(this.accessor_listeners() || nova_null).forEach0((_1, _2, _3) => {
			_1();
			
	});
	
};

UIAction.prototype.addActionListener = function (func) {
	(this.accessor_listeners() || nova_null).add0(func);
	
};

UIAction.prototype.accessor_listeners = function () {
	return null;
	
};

UIAction.prototype.mutator_listeners = function (value) {
	return value;
	
};

UIAction.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/UIAction"), false);
	
};

UIAction.prototype.mutator__js_class = function () {
	
};

var Button = function () {
	this.type = 0;
	this.state = 0;
	this.listeners = null;
	this.text = null;
	
	
};

Button.prototype = Object.create(Panel.prototype);
Button.prototype.constructor = Button;


Button.prototype.destroy = function () {
	
};

Button.init = function (x, y, width, height, text, type, state) {
	text = typeof text === 'undefined' ? novaConstructors.newString2("") : text;
	type = typeof type === 'undefined' ? 0 : type;
	state = typeof state === 'undefined' ? 0 : state;
	this.type = type;
	this.state = state;
	return Panel.init.call(this, x, y, width, height);
	this.text = text;
	return this;
	
};

Button.prototype.draw = function () {
	
};

Button.prototype.onAdded = function () {
	this.super_onAdded();
	
};

Button.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/Button"), false);
	
};

Button.prototype.mutator__js_class = function () {
	
};

Button.prototype.accessor_listeners = function () {
	return this.listeners;
	
};

Button.prototype.mutator_listeners = function (value) {
	this.listeners = value;
	return value;
	
};

Button.prototype.super = function () {
	this.mutator_listeners(novaConstructors.newArray());
	
};

novaConstructors.newButton = function (x, y, width, height, text, type, state) {
	var __value = new Button()
	Panel.call(__value);
	Button.prototype.super.apply(__value, [].slice.call(arguments));
	return Button.init.call(__value, x, y, width, height, text, type, state);
	
};

var Color = function () {
	this.r = 0;
	this.g = 0;
	this.b = 0;
	
	
};

Color.prototype = Object.create(NovaObject.prototype);
Color.prototype.constructor = Color;


Color.prototype.destroy = function () {
	
};

Color.init = function () {
	return Color.init0.call(this, 0);
	return this;
	
};

Color.init0 = function (grayscale) {
	return Color.init1.call(this, grayscale, grayscale, grayscale);
	return this;
	
};

Color.init1 = function (r, g, b) {
	this.b = b;
	this.g = g;
	this.r = r;
	this.g = g;
	this.b = b;
	return this;
	
};

Color.prototype.toImmutable = function () {
	return novaConstructors.newImmutableColor0(this);
	
};

Color.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/Color"), false);
	
};

Color.prototype.mutator__js_class = function () {
	
};

Color.prototype.super = function () {
	
};

novaConstructors.newColor = function () {
	var __value = new Color()
	NovaObject.call(__value);
	Color.prototype.super.apply(__value, [].slice.call(arguments));
	return Color.init.call(__value);
	
};

novaConstructors.newColor0 = function (grayscale) {
	var __value = new Color()
	NovaObject.call(__value);
	Color.prototype.super.apply(__value, [].slice.call(arguments));
	return Color.init0.call(__value, grayscale);
	
};

novaConstructors.newColor1 = function (r, g, b) {
	var __value = new Color()
	NovaObject.call(__value);
	Color.prototype.super.apply(__value, [].slice.call(arguments));
	return Color.init1.call(__value, r, g, b);
	
};

var Frame = function () {
	this.windowInstance = null;
	this._js_class = null;
	
	
};

Frame.prototype = Object.create(Panel.prototype);
Frame.prototype.constructor = Frame;


Frame.prototype.destroy = function () {
	
};

Frame.init = function (windowInstance) {
	this.windowInstance = windowInstance;
	return this;
	
};

Frame.prototype.draw = function () {
	
};

Frame.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/Frame"), false);
	
};

Frame.prototype.mutator__js_class = function () {
	
};

Frame.prototype.accessor_window = function () {
	return this.windowInstance;
	
};

Frame.prototype.mutator_window = function () {
	
};

Frame.prototype.super = function () {
	
};

novaConstructors.newFrame = function (windowInstance) {
	var __value = new Frame()
	Panel.call(__value);
	Frame.prototype.super.apply(__value, [].slice.call(arguments));
	return Frame.init.call(__value, windowInstance);
	
};

var ImmutableColor = function () {
	this.r = 0;
	this.g = 0;
	this.b = 0;
	
	
};

ImmutableColor.prototype = Object.create(NovaObject.prototype);
ImmutableColor.prototype.constructor = ImmutableColor;


ImmutableColor.prototype.destroy = function () {
	
};

ImmutableColor.init0 = function (color) {
	return ImmutableColor.init3.call(this, (color || nova_null).r, (color || nova_null).g, (color || nova_null).b);
	return this;
	
};

ImmutableColor.init1 = function () {
	return ImmutableColor.init3.call(this, 0, 0, 0);
	return this;
	
};

ImmutableColor.init2 = function (grayscale) {
	return ImmutableColor.init3.call(this, grayscale, grayscale, grayscale);
	return this;
	
};

ImmutableColor.init3 = function (r, g, b) {
	this.r = r;
	this.g = g;
	this.b = b;
	return this;
	
};

ImmutableColor.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/ImmutableColor"), false);
	
};

ImmutableColor.prototype.mutator__js_class = function () {
	
};

ImmutableColor.prototype.super = function () {
	
};

novaConstructors.newImmutableColor0 = function (color) {
	var __value = new ImmutableColor()
	NovaObject.call(__value);
	ImmutableColor.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableColor.init0.call(__value, color);
	
};

novaConstructors.newImmutableColor1 = function () {
	var __value = new ImmutableColor()
	NovaObject.call(__value);
	ImmutableColor.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableColor.init1.call(__value);
	
};

novaConstructors.newImmutableColor2 = function (grayscale) {
	var __value = new ImmutableColor()
	NovaObject.call(__value);
	ImmutableColor.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableColor.init2.call(__value, grayscale);
	
};

novaConstructors.newImmutableColor3 = function (r, g, b) {
	var __value = new ImmutableColor()
	NovaObject.call(__value);
	ImmutableColor.prototype.super.apply(__value, [].slice.call(arguments));
	return ImmutableColor.init3.call(__value, r, g, b);
	
};

var Label = function () {
	this.text = null;
	this.width = 0;
	this.height = 0;
	
	
};

Label.prototype = Object.create(UIComponent.prototype);
Label.prototype.constructor = Label;


Label.prototype.destroy = function () {
	
};

Label.init = function (text, x, y) {
	this.text = text;
	return UIComponent.init.call(this, x, y);
	return this;
	
};

Label.prototype.onAdded = function () {
	this.super_onAdded();
	this.draw_baseUIComponent();
	
};

Label.prototype.draw = function () {
	
};

Label.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/Label"), false);
	
};

Label.prototype.mutator__js_class = function () {
	
};

Label.prototype.super = function () {
	
};

novaConstructors.newLabel = function (text, x, y) {
	var __value = new Label()
	UIComponent.call(__value);
	Label.prototype.super.apply(__value, [].slice.call(arguments));
	return Label.init.call(__value, text, x, y);
	
};

var Screen = function () {
	
	
};

Screen.prototype = Object.create(NovaObject.prototype);
Screen.prototype.constructor = Screen;


Screen.prototype.destroy = function () {
	
};

Screen.init = function () {
	return this;
	
};

Screen.accessor_dimensions = function () {
	var width;
	var height;
	return novaConstructors.newPair1Int2Int(width, height);
	
};

Screen.prototype.mutator_dimensions = function () {
	
};

Screen.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/Screen"), false);
	
};

Screen.prototype.mutator__js_class = function () {
	
};

Screen.accessor_width = function () {
	return (Screen.accessor_dimensions() || nova_null).key;
	
};

Screen.prototype.mutator_width = function () {
	
};

Screen.accessor_height = function () {
	return (Screen.accessor_dimensions() || nova_null).value;
	
};

Screen.prototype.mutator_height = function () {
	
};

Screen.prototype.super = function () {
	
};

novaConstructors.newScreen = function () {
	var __value = new Screen()
	NovaObject.call(__value);
	Screen.prototype.super.apply(__value, [].slice.call(arguments));
	return Screen.init.call(__value);
	
};

var ScrollBar = function () {
	
	
};

ScrollBar.prototype = Object.create(UIComponent.prototype);
ScrollBar.prototype.constructor = ScrollBar;


ScrollBar.prototype.destroy = function () {
	
};

ScrollBar.init = function (x, y) {
	return UIComponent.init.call(this, x, y);
	return this;
	
};

ScrollBar.prototype.onAdded = function () {
	
};

ScrollBar.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/ScrollBar"), false);
	
};

ScrollBar.prototype.mutator__js_class = function () {
	
};

ScrollBar.prototype.super = function () {
	
};

novaConstructors.newScrollBar = function (x, y) {
	var __value = new ScrollBar()
	UIComponent.call(__value);
	ScrollBar.prototype.super.apply(__value, [].slice.call(arguments));
	return ScrollBar.init.call(__value, x, y);
	
};

var WindowThread = function () {
	this.window = null;
	
	
};

WindowThread.prototype = Object.create(Thread.prototype);
WindowThread.prototype.constructor = WindowThread;


WindowThread.prototype.destroy = function () {
	
};

WindowThread.init = function (window) {
	this.window = window;
	return this;
	
};

WindowThread.prototype.run = function () {
	var paintFunc;
	var addedFunc;
	paintFunc = function () { var self = this.window.frame; return self.paint.call(self); };
	addedFunc = function () { var self = ((this.window || nova_null).frame); return self.onAdded.call(self); };
	
};

WindowThread.prototype.show = function () {
	return this;
	
};

WindowThread.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/star/WindowThread"), false);
	
};

WindowThread.prototype.mutator__js_class = function () {
	
};

WindowThread.prototype.super = function () {
	
};

novaConstructors.newWindowThread = function (window) {
	var __value = new WindowThread()
	Thread.call(__value);
	WindowThread.prototype.super.apply(__value, [].slice.call(arguments));
	return WindowThread.init.call(__value, window);
	
};

var ThreadLocal = function () {
	this.map = null;
	
	
};

ThreadLocal.prototype = Object.create(NovaObject.prototype);
ThreadLocal.prototype.constructor = ThreadLocal;


ThreadLocal.prototype.destroy = function () {
	
};

ThreadLocal.init = function (value) {
	value = typeof value === 'undefined' ? null : value;
	this.set(value);
	return this;
	
};

ThreadLocal.prototype.get = function () {
	return (this.map || nova_null).get(Thread.accessor_id());
	
};

ThreadLocal.prototype.set = function (value) {
	return (this.map || nova_null).set(Thread.accessor_id(), value);
	
};

ThreadLocal.prototype.remove = function () {
	return (this.map || nova_null).remove(Thread.accessor_id());
	
};

ThreadLocal.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/thread/ThreadLocal"), false);
	
};

ThreadLocal.prototype.mutator__js_class = function () {
	
};

ThreadLocal.prototype.super = function () {
	this.map = novaConstructors.newHashMap1Long0();
	
};

novaConstructors.newThreadLocal = function (value) {
	var __value = new ThreadLocal()
	NovaObject.call(__value);
	ThreadLocal.prototype.super.apply(__value, [].slice.call(arguments));
	return ThreadLocal.init.call(__value, value);
	
};

var ThreadLocal1Int = function () {
	this.map = null;
	
	
};

ThreadLocal1Int.prototype = Object.create(NovaObject.prototype);
ThreadLocal1Int.prototype.constructor = ThreadLocal1Int;


ThreadLocal1Int.prototype.destroy = function () {
	
};

ThreadLocal1Int.init = function (value) {
	value = typeof value === 'undefined' ? null : value;
	this.set(value);
	return this;
	
};

ThreadLocal1Int.prototype.get = function () {
	return (this.map || nova_null).get(Thread.accessor_id());
	
};

ThreadLocal1Int.prototype.set = function (value) {
	return (this.map || nova_null).set(Thread.accessor_id(), value);
	
};

ThreadLocal1Int.prototype.remove = function () {
	return (this.map || nova_null).remove(Thread.accessor_id());
	
};

ThreadLocal1Int.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/thread/ThreadLocal"), false);
	
};

ThreadLocal1Int.prototype.super = function () {
	this.map = novaConstructors.newHashMap1Long2Int0();
	
};

novaConstructors.newThreadLocal1Int = function (value) {
	var __value = new ThreadLocal1Int()
	NovaObject.call(__value);
	ThreadLocal1Int.prototype.super.apply(__value, [].slice.call(arguments));
	return ThreadLocal1Int.init.call(__value, value);
	
};

var Async = function () {
	
	
};

Async.prototype = Object.create(NovaObject.prototype);
Async.prototype.constructor = Async;


Async.prototype.destroy = function () {
	
};

Async.execute = function (func) {
	var thread;
	var task;
	thread = novaConstructors.newThread0(func);
	task = novaConstructors.newTask(thread);
	(thread || nova_null).start();
	return task;
	
};

Async.request = function (func) {
	var thread;
	var task;
	thread = novaConstructors.newThread0(func);
	task = novaConstructors.newTask(thread);
	(thread || nova_null).start();
	return task;
	
};

Async.init = function () {
	return this;
	
};

Async.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/thread/async/Async"), false);
	
};

Async.prototype.mutator__js_class = function () {
	
};

Async.prototype.super = function () {
	
};

novaConstructors.newAsync = function () {
	var __value = new Async()
	NovaObject.call(__value);
	Async.prototype.super.apply(__value, [].slice.call(arguments));
	return Async.init.call(__value);
	
};

var Task = function () {
	this.result = null;
	this.thread = null;
	
	
};

Task.prototype = Object.create(NovaObject.prototype);
Task.prototype.constructor = Task;


Task.prototype.destroy = function () {
	
};

Task.init = function (thread) {
	this.thread = thread;
	return this;
	
};

Task.prototype.waitForCompletion = function () {
	(this.thread || nova_null).join();
	
};

Task.prototype.waitForResult = function () {
	this.waitForCompletion();
	return this.result;
	
};

Task.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/thread/async/Task"), false);
	
};

Task.prototype.mutator__js_class = function () {
	
};

Task.prototype.super = function () {
	
};

novaConstructors.newTask = function (thread) {
	var __value = new Task()
	NovaObject.call(__value);
	Task.prototype.super.apply(__value, [].slice.call(arguments));
	return Task.init.call(__value, thread);
	
};

var Interval = function () {
	this.start = null;
	this.end = null;
	this.hours = 0;
	this.minutes = 0;
	this.seconds = 0;
	this.milliseconds = 0;
	this.months = 0;
	this.years = 0;
	
	
};

Interval.prototype = Object.create(NovaObject.prototype);
Interval.prototype.constructor = Interval;


Interval.prototype.destroy = function () {
	
};

Interval.init = function (start, end) {
	start = typeof start === 'undefined' ? null : start;
	end = typeof end === 'undefined' ? null : end;
	if (start === null || end === null) {
		return novaConstructors.newBoundlessInterval(start, end);
	} else {
		return novaConstructors.newBoundedInterval(start, end);
	}
	return this;
	
};

Interval.prototype.getGap = function (other) {
	if ((this.end || nova_null).lessThanOrEqualTo0((other || nova_null).start)) {
		return novaConstructors.newBoundedInterval(this.end, (other || nova_null).start);
	} else if ((this.start || nova_null).greaterThanOrEqualTo0((other || nova_null).end)) {
	}
	else {
		throw novaConstructors.newNoGapException(this, other);
	}
	
};

Interval.prototype.toString = function () {
	return novaConstructors.newString2("Interval [").plus0((((this.start) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(", ").plus0((((this.end) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2("]")))));
	
};

Interval.prototype.accessor_months = function () {
	var months;
	var current;
	months = 0;
	current = novaConstructors.newDateTime3(this.end);
	while ((this.start || nova_null).year != (current || nova_null).year || (this.start || nova_null).month != (current || nova_null).month) {
		(current || nova_null).subtractMonth();
		months++;
	}
	return months;
	
};

Interval.prototype.mutator_months = function () {
	
};

Interval.prototype.accessor_years = function () {
	var years;
	var current;
	years = 0;
	current = novaConstructors.newDateTime3(this.end);
	while ((this.start || nova_null).year != (current || nova_null).year) {
		(current || nova_null).subtractYear();
		years++;
	}
	return years;
	
};

Interval.prototype.mutator_years = function () {
	
};

Interval.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval"), false);
	
};

Interval.prototype.mutator__js_class = function () {
	
};

Interval.prototype.accessor_days = function () {
	return ~~(((this.end || nova_null).millis - (this.start || nova_null).millis) / NovaDateTime.SECS_DAY);
	
};

Interval.prototype.mutator_days = function () {
	
};

Interval.prototype.accessor_hours = function () {
	return ~~(((this.end || nova_null).millis - (this.start || nova_null).millis) / NovaDateTime.SECS_HOUR);
	
};

Interval.prototype.mutator_hours = function () {
	
};

Interval.prototype.accessor_remainingHours = function () {
	return (~~(this.accessor_hours() % 24));
	
};

Interval.prototype.mutator_remainingHours = function () {
	
};

Interval.prototype.accessor_minutes = function () {
	return ~~(((this.end || nova_null).millis - (this.start || nova_null).millis) / NovaDateTime.SECS_MINUTE);
	
};

Interval.prototype.mutator_minutes = function () {
	
};

Interval.prototype.accessor_remainingMinutes = function () {
	return (~~(this.accessor_minutes() % 60));
	
};

Interval.prototype.mutator_remainingMinutes = function () {
	
};

Interval.prototype.accessor_seconds = function () {
	return ~~(((this.end || nova_null).millis - (this.start || nova_null).millis) / 1000);
	
};

Interval.prototype.mutator_seconds = function () {
	
};

Interval.prototype.accessor_remainingSeconds = function () {
	return (~~(this.accessor_seconds() % 60));
	
};

Interval.prototype.mutator_remainingSeconds = function () {
	
};

Interval.prototype.accessor_milliseconds = function () {
	return (this.end || nova_null).millis - (this.start || nova_null).millis;
	
};

Interval.prototype.mutator_milliseconds = function () {
	
};

Interval.prototype.accessor_remainingMilliseconds = function () {
	return (~~(this.accessor_milliseconds() % 1000));
	
};

Interval.prototype.mutator_remainingMilliseconds = function () {
	
};

Interval.prototype.accessor_remainingMonths = function () {
	return ~~(this.accessor_months() % 12);
	
};

Interval.prototype.mutator_remainingMonths = function () {
	
};

Interval.prototype.super = function () {
	
};

novaConstructors.newInterval = function (start, end) {
	var __value = new Interval()
	NovaObject.call(__value);
	Interval.prototype.super.apply(__value, [].slice.call(arguments));
	return Interval.init.call(__value, start, end);
	
};

var BoundedInterval = function () {
	
	
};

BoundedInterval.prototype = Object.create(Interval.prototype);
BoundedInterval.prototype.constructor = BoundedInterval;


BoundedInterval.prototype.destroy = function () {
	
};

BoundedInterval.init = function (start, end) {
	start = typeof start === 'undefined' ? null : start;
	end = typeof end === 'undefined' ? null : end;
	this.end = end;
	this.start = start;
	if (start === null || end === null) {
		throw novaConstructors.newInvalidIntervalException(novaConstructors.newString2("Bounded interval cannot have open-ended bounds: ").plus0((((this) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	} else {
		if ((start || nova_null).greaterThan0(end)) {
			throw novaConstructors.newInvalidIntervalException(novaConstructors.newString2("Interval from ").plus0((((start) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" to ").plus0((((end) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" is invalid"))))));
		}
	}
	this.start = start;
	this.end = end;
	return this;
	
};

BoundedInterval.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/BoundedInterval"), false);
	
};

BoundedInterval.prototype.mutator__js_class = function () {
	
};

BoundedInterval.prototype.super = function () {
	
};

novaConstructors.newBoundedInterval = function (start, end) {
	var __value = new BoundedInterval()
	Interval.call(__value);
	BoundedInterval.prototype.super.apply(__value, [].slice.call(arguments));
	return BoundedInterval.init.call(__value, start, end);
	
};

var BoundlessInterval = function () {
	this.seconds = 0;
	this.milliseconds = 0;
	this.months = 0;
	this.years = 0;
	
	
};

BoundlessInterval.prototype = Object.create(Interval.prototype);
BoundlessInterval.prototype.constructor = BoundlessInterval;


BoundlessInterval.prototype.destroy = function () {
	
};

BoundlessInterval.init = function (start, end) {
	start = typeof start === 'undefined' ? null : start;
	end = typeof end === 'undefined' ? null : end;
	this.end = end;
	this.start = start;
	if (start != null && end != null) {
		throw novaConstructors.newInvalidIntervalException(novaConstructors.newString2("BoundlessInterval requires a null start or end DateTime: ").plus0((((this) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))));
	}
	this.start = start;
	this.end = end;
	return this;
	
};

BoundlessInterval.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/BoundlessInterval"), false);
	
};

BoundlessInterval.prototype.mutator__js_class = function () {
	
};

BoundlessInterval.prototype.accessor_days = function () {
	 throw novaConstructors.newInfiniteIntervalException(novaConstructors.newString2("days"));
	
};

BoundlessInterval.prototype.mutator_days = function () {
	
};

BoundlessInterval.prototype.accessor_seconds = function () {
	 throw novaConstructors.newInfiniteIntervalException(novaConstructors.newString2("seconds"));
	
};

BoundlessInterval.prototype.mutator_seconds = function () {
	
};

BoundlessInterval.prototype.accessor_remainingSeconds = function () {
	 throw novaConstructors.newInfiniteIntervalException(novaConstructors.newString2("remainingSeconds"));
	
};

BoundlessInterval.prototype.mutator_remainingSeconds = function () {
	
};

BoundlessInterval.prototype.accessor_milliseconds = function () {
	 throw novaConstructors.newInfiniteIntervalException(novaConstructors.newString2("milliseconds"));
	
};

BoundlessInterval.prototype.mutator_milliseconds = function () {
	
};

BoundlessInterval.prototype.accessor_remainingMilliseconds = function () {
	 throw novaConstructors.newInfiniteIntervalException(novaConstructors.newString2("remainingMilliseconds"));
	
};

BoundlessInterval.prototype.mutator_remainingMilliseconds = function () {
	
};

BoundlessInterval.prototype.accessor_months = function () {
	 throw novaConstructors.newInfiniteIntervalException(novaConstructors.newString2("months"));
	
};

BoundlessInterval.prototype.mutator_months = function () {
	
};

BoundlessInterval.prototype.accessor_remainingMonths = function () {
	 throw novaConstructors.newInfiniteIntervalException(novaConstructors.newString2("remainingMonths"));
	
};

BoundlessInterval.prototype.mutator_remainingMonths = function () {
	
};

BoundlessInterval.prototype.accessor_years = function () {
	 throw novaConstructors.newInfiniteIntervalException(novaConstructors.newString2("years"));
	
};

BoundlessInterval.prototype.mutator_years = function () {
	
};

BoundlessInterval.prototype.super = function () {
	
};

novaConstructors.newBoundlessInterval = function (start, end) {
	var __value = new BoundlessInterval()
	Interval.call(__value);
	BoundlessInterval.prototype.super.apply(__value, [].slice.call(arguments));
	return BoundlessInterval.init.call(__value, start, end);
	
};

var IntervalException = function () {
	
	
};

IntervalException.prototype = Object.create(Exception.prototype);
IntervalException.prototype.constructor = IntervalException;


IntervalException.prototype.destroy = function () {
	
};

IntervalException.init = function (message) {
	return Exception.init.call(this, message);
	return this;
	
};

IntervalException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.IntervalException"), false);
	
};

IntervalException.prototype.mutator__js_class = function () {
	
};

IntervalException.prototype.super = function () {
	
};

novaConstructors.newIntervalException = function (message) {
	var __value = new IntervalException()
	Exception.call(__value);
	IntervalException.prototype.super.apply(__value, [].slice.call(arguments));
	return IntervalException.init.call(__value, message);
	
};

var InfiniteIntervalException = function () {
	
	
};

InfiniteIntervalException.prototype = Object.create(IntervalException.prototype);
InfiniteIntervalException.prototype.constructor = InfiniteIntervalException;


InfiniteIntervalException.prototype.destroy = function () {
	
};

InfiniteIntervalException.init = function (property) {
	return IntervalException.init.call(this, novaConstructors.newString2("Cannot get property '").plus0(((property) || nova_null).plus0(novaConstructors.newString2("' from boundless interval (cannot return infinite integer)"))));
	return this;
	
};

InfiniteIntervalException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/BoundlessInterval.InfiniteIntervalException"), false);
	
};

InfiniteIntervalException.prototype.mutator__js_class = function () {
	
};

InfiniteIntervalException.prototype.super = function () {
	
};

novaConstructors.newInfiniteIntervalException = function (property) {
	var __value = new InfiniteIntervalException()
	IntervalException.call(__value);
	InfiniteIntervalException.prototype.super.apply(__value, [].slice.call(arguments));
	return InfiniteIntervalException.init.call(__value, property);
	
};

var Timer = function () {
	this.startTime = 0;
	this.endTime = 0;
	this._js_class = null;
	
	
};

Timer.prototype = Object.create(NovaObject.prototype);
Timer.prototype.constructor = Timer;


Timer.prototype.destroy = function () {
	
};

Timer.init = function () {
	return this;
	
};

Timer.prototype.start = function () {
	this.startTime = Time.accessor_currentTimeMillis();
	this.endTime = 0;
	return this;
	
};

Timer.prototype.stop = function () {
	this.endTime = Time.accessor_currentTimeMillis();
	return this;
	
};

Timer.prototype.reset = function () {
	this.startTime = 0;
	this.endTime = 0;
	return this;
	
};

Timer.prototype.toString = function () {
	return novaConstructors.newString2("Timer { duration: ").plus0(NovaLong.toString((this.accessor_duration())).plus0(novaConstructors.newString2(" }")));
	
};

Timer.time = function (action, callback) {
	var t;
	callback = typeof callback === 'undefined' ? (_1) => {
		
	} : callback;
	t = novaConstructors.newTimer().start();
	action();
	callback((t || nova_null).stop());
	return t;
	
};

Timer.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/Timer"), false);
	
};

Timer.prototype.mutator__js_class = function () {
	
};

Timer.prototype.accessor_duration = function () {
	return this.endTime - this.startTime;
	
};

Timer.prototype.mutator_duration = function () {
	
};

Timer.prototype.super = function () {
	
};

novaConstructors.newTimer = function () {
	var __value = new Timer()
	NovaObject.call(__value);
	Timer.prototype.super.apply(__value, [].slice.call(arguments));
	return Timer.init.call(__value);
	
};

var CumulativeTimer = function () {
	this.duration = 0;
	this.iterations = 0;
	
	
};

CumulativeTimer.prototype = Object.create(Timer.prototype);
CumulativeTimer.prototype.constructor = CumulativeTimer;


CumulativeTimer.prototype.destroy = function () {
	
};

CumulativeTimer.init = function () {
	return Timer.init.call(this);
	return this;
	
};

CumulativeTimer.prototype.stop = function () {
	this.super_stop();
	this.iterations++;
	this.mutator_duration(this.accessor_duration() + this.super_accessor_duration());
	return this;
	
};

CumulativeTimer.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/CumulativeTimer"), false);
	
};

CumulativeTimer.prototype.mutator__js_class = function () {
	
};

CumulativeTimer.prototype.accessor_duration = function () {
	return this.duration;
	
};

CumulativeTimer.prototype.mutator_duration = function (value) {
	this.duration = value;
	return value;
	
};

CumulativeTimer.prototype.super = function () {
	this.iterations = 0;
	
};

novaConstructors.newCumulativeTimer = function () {
	var __value = new CumulativeTimer()
	Timer.call(__value);
	CumulativeTimer.prototype.super.apply(__value, [].slice.call(arguments));
	return CumulativeTimer.init.call(__value);
	
};

var NovaDate = function () {
	this.year = 0;
	this.month = 0;
	this.day = 0;
	this.hour = 0;
	this.minute = 0;
	this.second = 0;
	
	
};

NovaDate.prototype = Object.create(NovaObject.prototype);
NovaDate.prototype.constructor = NovaDate;


NovaDate.prototype.destroy = function () {
	
};

NovaDate.init = function () {
	this.updateTime();
	return this;
	
};

NovaDate.prototype.decodeDate = function (prototype, date) {
	
};

NovaDate.prototype.updateTime = function () {
	nova_updateTime();
	this.year = nova_getYear();
	this.month = nova_getMonth();
	this.day = nova_getDay();
	this.hour = nova_getHour();
	this.minute = nova_getMinute();
	this.second = nova_getSecond();
	
};

NovaDate.prototype.formatDate = function (str, first, second, third, fourth, fifth, sixth) {
	var data;
	first = typeof first === 'undefined' ? this.month : first;
	second = typeof second === 'undefined' ? this.day : second;
	third = typeof third === 'undefined' ? this.year : third;
	fourth = typeof fourth === 'undefined' ? this.hour : fourth;
	fifth = typeof fifth === 'undefined' ? this.minute : fifth;
	sixth = typeof sixth === 'undefined' ? second : sixth;
	data = nova_formatDate(((str || nova_null).chars || nova_null).data, first, second, third, fourth, fifth, sixth);
	return novaConstructors.newString2(data);
	
};

NovaDate.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/Date"), false);
	
};

NovaDate.prototype.mutator__js_class = function () {
	
};

NovaDate.prototype.super = function () {
	
};

novaConstructors.newDate = function () {
	var __value = new NovaDate()
	NovaObject.call(__value);
	NovaDate.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaDate.init.call(__value);
	
};

var NovaDateTime = function () {
	this.millis = 0;
	this.year = 0;
	this.month = 0;
	this.dayOfMonth = 0;
	this.dayOfYear = 0;
	this.hour = 0;
	this.minute = 0;
	this.second = 0;
	this.isLeapYear = 0;
	
	
};

NovaDateTime.prototype = Object.create(NovaObject.prototype);
NovaDateTime.prototype.constructor = NovaDateTime;


NovaDateTime.prototype.destroy = function () {
	
};

NovaDateTime.init0 = function (input, format) {
	var self = this;
	
	format = typeof format === 'undefined' ? null : format;
	if (format === null) {
		throw novaConstructors.newException(novaConstructors.newString2("implicit formats not implemented yet"));
	}
	(Regex.getMatches1(novaConstructors.newString2("yyyy"), format) || nova_null).forEach0((match, _2, _3) => {
			self.year = NovaInt.parseInt((input || nova_null).substring((match || nova_null).start, (match || nova_null).end));
			
	});
	(Regex.getMatches1(novaConstructors.newString2("MM"), format) || nova_null).forEach0((match, _2, _3) => {
			self.month = NovaInt.parseInt((input || nova_null).substring((match || nova_null).start, (match || nova_null).end));
			
	});
	(Regex.getMatches1(novaConstructors.newString2("dd"), format) || nova_null).forEach0((match, _2, _3) => {
			self.dayOfMonth = NovaInt.parseInt((input || nova_null).substring((match || nova_null).start, (match || nova_null).end));
			
	});
	return NovaDateTime.init2.call(this, this.year, this.month, this.dayOfMonth);
	return this;
	
};

NovaDateTime.init1 = function (millis) {
	var yearAndDay;
	var monthAndDay;
	this.millis = millis;
	yearAndDay = Calculator.getYearAndDay(millis);
	this.year = (yearAndDay || nova_null).accessor_first();
	this.dayOfYear = (yearAndDay || nova_null).accessor_last();
	monthAndDay = Calculator.getMonthAndDay(this.year, this.dayOfYear);
	this.month = (monthAndDay || nova_null).accessor_first();
	this.dayOfMonth = (monthAndDay || nova_null).accessor_last();
	this.hour = Calculator.getHour(millis);
	this.minute = Calculator.getMinute(millis);
	this.second = Calculator.getSecond(millis);
	this.millis = millis;
	return this;
	
};

NovaDateTime.init2 = function (year, month, dayOfMonth, hour, minute, second, millisecond) {
	year = typeof year === 'undefined' ? 0 : year;
	month = typeof month === 'undefined' ? 1 : month;
	dayOfMonth = typeof dayOfMonth === 'undefined' ? 1 : dayOfMonth;
	hour = typeof hour === 'undefined' ? 0 : hour;
	minute = typeof minute === 'undefined' ? 0 : minute;
	second = typeof second === 'undefined' ? 0 : second;
	millisecond = typeof millisecond === 'undefined' ? 0 : millisecond;
	this.second = second;
	this.minute = minute;
	this.hour = hour;
	this.dayOfMonth = dayOfMonth;
	this.month = month;
	this.year = year;
	if (month <= 0 || month > 12) {
		throw novaConstructors.newInvalidDateException(novaConstructors.newString2("Invalid month ").plus0(NovaInt.toString((month)).plus0(novaConstructors.newString2(". Must be 1-12"))));
	} else if (!Calculator.isValidDayOfMonth(year, month, dayOfMonth)) {
	}
	else if (month === 2 && dayOfMonth === 29 && !this.accessor_isLeapYear()) {
	}
	this.millis = this.calculateMillis() + millisecond;
	this.year = year;
	this.month = month;
	this.dayOfMonth = dayOfMonth;
	this.hour = hour;
	this.minute = minute;
	this.second = second;
	return this;
	
};

NovaDateTime.prototype.calculateMillis = function (year, month, dayOfMonth, hour, minute, second, millisecond) {
	year = typeof year === 'undefined' ? this.year : year;
	month = typeof month === 'undefined' ? this.month : month;
	dayOfMonth = typeof dayOfMonth === 'undefined' ? this.dayOfMonth : dayOfMonth;
	hour = typeof hour === 'undefined' ? this.hour : hour;
	minute = typeof minute === 'undefined' ? this.minute : minute;
	second = typeof second === 'undefined' ? this.second : second;
	millisecond = typeof millisecond === 'undefined' ? this.accessor_millisecond() : millisecond;
	return Calculator.getYearMillis(year) + Calculator.getMonthMillis(year, month) + Calculator.getDayMillis(dayOfMonth) + Calculator.getHourMillis(hour) + Calculator.getMinuteMillis(minute) + Calculator.getSecondMillis(second) + Calculator.getMillisecondMillis(millisecond);
	
};

NovaDateTime.init3 = function (dateTime) {
	return NovaDateTime.init1.call(this, (dateTime || nova_null).millis);
	return this;
	
};

NovaDateTime.prototype.addMonth = function () {
	this.addMonths(1);
	
};

NovaDateTime.prototype.addMonths = function (months) {
	var days;
	if (months > 0) {
		this.year += ~~((months + this.month - 1) / 12);
		this.month = ~~((this.month - 1 + months) % 12);
	} else {
		this.month = this.month - 1 + months;
		while (this.month < 0) {
			this.month = this.month + 12;
			this.year--;
		}
	}
	++this.month;
	days = (Calculator.getMonthDays(this.year) || nova_null).get(this.month - 1);
	if (this.dayOfMonth > days) {
		this.dayOfYear -= this.dayOfMonth - days;
		this.dayOfMonth = days;
	}
	this.millis = this.calculateMillis();
	
};

NovaDateTime.prototype.subtractMonth = function () {
	this.subtractMonths(1);
	
};

NovaDateTime.prototype.subtractMonths = function (months) {
	this.addMonths(-months);
	
};

NovaDateTime.prototype.addYear = function () {
	this.addYears(1);
	
};

NovaDateTime.prototype.addYears = function (years) {
	this.year += years;
	if (this.month === 2 && this.dayOfMonth === 29 && !Calculator.isLeapYear(this.year)) {
		this.dayOfMonth--;
		this.dayOfYear--;
	}
	this.millis = this.calculateMillis();
	
};

NovaDateTime.prototype.subtractYear = function () {
	this.subtractYears(1);
	
};

NovaDateTime.prototype.subtractYears = function (years) {
	this.addYears(-years);
	
};

NovaDateTime.prototype.compareTo0 = function (other) {
	return (this.millis - (other || nova_null).millis);
	
};

NovaDateTime.prototype.lessThan0 = function (other) {
	return this.millis < (other || nova_null).millis;
	
};

NovaDateTime.prototype.lessThanOrEqualTo0 = function (other) {
	return this.millis <= (other || nova_null).millis;
	
};

NovaDateTime.prototype.greaterThan0 = function (other) {
	return this.millis > (other || nova_null).millis;
	
};

NovaDateTime.prototype.greaterThanOrEqualTo0 = function (other) {
	return this.millis >= (other || nova_null).millis;
	
};

NovaDateTime.prototype.toString = function () {
	return this.toString0(novaConstructors.newString2("MM/dd/yyyy"));
	
};

NovaDateTime.prototype.toString0 = function (format) {
	var monthString;
	var dayOfMonthString;
	monthString = ((this.month < 10 ? novaConstructors.newString2("0") : novaConstructors.newString2("")) || nova_null).plus0(NovaInt.toString(this.month));
	dayOfMonthString = ((this.dayOfMonth < 10 ? novaConstructors.newString2("0") : novaConstructors.newString2("")) || nova_null).plus0(NovaInt.toString(this.dayOfMonth));
	return NovaInt.toString((this.year)).plus0(novaConstructors.newString2("-").plus0(((monthString) || nova_null).plus0(novaConstructors.newString2("-").plus0(((dayOfMonthString) || nova_null).plus0(novaConstructors.newString2(""))))));
	
};

NovaDateTime.generated31 = function () {
	var temp;
	temp = [];
	temp[0] = 31;
	temp[1] = 28;
	temp[2] = 31;
	temp[3] = 30;
	temp[4] = 31;
	temp[5] = 30;
	temp[6] = 31;
	temp[7] = 31;
	temp[8] = 30;
	temp[9] = 31;
	temp[10] = 30;
	temp[11] = 31;
	return novaConstructors.newArray1Byte1(temp, 12);
	
};

NovaDateTime.generated32 = function () {
	var temp;
	temp = [];
	temp[0] = 31;
	temp[1] = 29;
	temp[2] = 31;
	temp[3] = 30;
	temp[4] = 31;
	temp[5] = 30;
	temp[6] = 31;
	temp[7] = 31;
	temp[8] = 30;
	temp[9] = 31;
	temp[10] = 30;
	temp[11] = 31;
	return novaConstructors.newArray1Byte1(temp, 12);
	
};

NovaDateTime.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime"), false);
	
};

NovaDateTime.prototype.mutator__js_class = function () {
	
};

NovaDateTime.prototype.accessor_millisecond = function () {
	return ~~(this.millis % 1000);
	
};

NovaDateTime.prototype.mutator_millisecond = function () {
	
};

NovaDateTime.prototype.accessor_isLeapYear = function () {
	return Calculator.isLeapYear(this.year);
	
};

NovaDateTime.prototype.mutator_isLeapYear = function () {
	
};

NovaDateTime.prototype.super = function () {
	
};

novaConstructors.newDateTime0 = function (input, format) {
	var __value = new NovaDateTime()
	NovaObject.call(__value);
	NovaDateTime.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaDateTime.init0.call(__value, input, format);
	
};

novaConstructors.newDateTime1 = function (millis) {
	var __value = new NovaDateTime()
	NovaObject.call(__value);
	NovaDateTime.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaDateTime.init1.call(__value, millis);
	
};

novaConstructors.newDateTime2 = function (year, month, dayOfMonth, hour, minute, second, millisecond) {
	var __value = new NovaDateTime()
	NovaObject.call(__value);
	NovaDateTime.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaDateTime.init2.call(__value, year, month, dayOfMonth, hour, minute, second, millisecond);
	
};

novaConstructors.newDateTime3 = function (dateTime) {
	var __value = new NovaDateTime()
	NovaObject.call(__value);
	NovaDateTime.prototype.super.apply(__value, [].slice.call(arguments));
	return NovaDateTime.init3.call(__value, dateTime);
	
};

var InvalidDateException = function () {
	
	
};

InvalidDateException.prototype = Object.create(Exception.prototype);
InvalidDateException.prototype.constructor = InvalidDateException;


InvalidDateException.prototype.destroy = function () {
	
};

InvalidDateException.init = function (message) {
	return Exception.init.call(this, message);
	return this;
	
};

InvalidDateException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateException"), false);
	
};

InvalidDateException.prototype.mutator__js_class = function () {
	
};

InvalidDateException.prototype.super = function () {
	
};

novaConstructors.newInvalidDateException = function (message) {
	var __value = new InvalidDateException()
	Exception.call(__value);
	InvalidDateException.prototype.super.apply(__value, [].slice.call(arguments));
	return InvalidDateException.init.call(__value, message);
	
};

var InvalidDateFormatException = function () {
	
	
};

InvalidDateFormatException.prototype = Object.create(InvalidDateException.prototype);
InvalidDateFormatException.prototype.constructor = InvalidDateFormatException;


InvalidDateFormatException.prototype.destroy = function () {
	
};

InvalidDateFormatException.init = function (message) {
	return InvalidDateException.init.call(this, message);
	return this;
	
};

InvalidDateFormatException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.InvalidDateFormatException"), false);
	
};

InvalidDateFormatException.prototype.mutator__js_class = function () {
	
};

InvalidDateFormatException.prototype.super = function () {
	
};

novaConstructors.newInvalidDateFormatException = function (message) {
	var __value = new InvalidDateFormatException()
	InvalidDateException.call(__value);
	InvalidDateFormatException.prototype.super.apply(__value, [].slice.call(arguments));
	return InvalidDateFormatException.init.call(__value, message);
	
};

var Calculator = function () {
	
	
};

Calculator.prototype = Object.create(NovaObject.prototype);
Calculator.prototype.constructor = Calculator;


Calculator.prototype.destroy = function () {
	
};

Calculator.getLeapYearCount = function (year, inclusive) {
	var sum;
	inclusive = typeof inclusive === 'undefined' ? true : inclusive;
	sum = 0;
	var i;
	i = 1970;
	for (; i < (inclusive ? year + 1 : year); i++) {
		if (Calculator.isLeapYear(i)) {
			sum++;
		}
	}
	return sum;
	
};

Calculator.getYearMillis = function (year) {
	var millis;
	--year;
	millis = 0;
	while (year >= NovaDateTime.EPOCH_YEAR) {
		millis += Calculator.getYearSize(year) * 24 * 60 * 60 * 1000;
		--year;
	}
	return millis;
	
};

Calculator.getMonthMillis = function (year, month) {
	var millis;
	--month;
	millis = 0;
	while (month > 0) {
		millis += (Calculator.getMonthDays(year).get(month - 1)) * 24 * 60 * 60 * 1000;
		--month;
	}
	return millis;
	
};

Calculator.getDayMillis = function (dayOfMonth) {
	return (dayOfMonth - 1) * 24 * 60 * 60 * 1000;
	
};

Calculator.getHourMillis = function (hour) {
	return hour * 60 * 60 * 1000;
	
};

Calculator.getMinuteMillis = function (minute) {
	return minute * 60 * 1000;
	
};

Calculator.getSecondMillis = function (second) {
	return second * 1000;
	
};

Calculator.getMillisecondMillis = function (millisecond) {
	return millisecond;
	
};

Calculator.getYear = function (millis) {
	return (Calculator.getYearAndDay(millis) || nova_null).accessor_first();
	
};

Calculator.getDayOfMonth = function (millis) {
	return (Calculator.getYearAndDay(millis) || nova_null).accessor_last();
	
};

Calculator.getHour = function (millis) {
	return ~~((~~(millis / (60 * 60 * 1000))) % 24);
	
};

Calculator.getMinute = function (millis) {
	return ~~((~~(millis / (60 * 1000))) % 60);
	
};

Calculator.getSecond = function (millis) {
	return ~~((~~(millis / 1000)) % 60);
	
};

Calculator.getMillisecond = function (millis) {
	return ~~(millis % 1000);
	
};

Calculator.getYearSize = function (year) {
	return Calculator.isLeapYear(year) ? 366 : 365;
	
};

Calculator.getMonthDays = function (year) {
	return Calculator.isLeapYear(year) ? NovaDateTime.LEAP_MONTH_DAYS : NovaDateTime.MONTH_DAYS;
	
};

Calculator.getYearAndDay = function (millis) {
	var year;
	var day;
	var size;
	year = NovaDateTime.EPOCH_YEAR;
	day = ~~(millis / NovaDateTime.SECS_DAY);
	while (day >= (size = Calculator.getYearSize(year))) {
		day -= size;
		year++;
	}
	return Calculator.generated56(year, day + 1);
	
};

Calculator.getMonthAndDay = function (year, yearDay) {
	var month;
	var monthDay;
	month = 0;
	monthDay = yearDay - 1;
	while (monthDay >= (Calculator.getMonthDays(year) || nova_null).get(month)) {
		monthDay -= (Calculator.getMonthDays(year) || nova_null).get(month++);
	}
	return Calculator.generated57(month + 1, monthDay + 1);
	
};

Calculator.isLeapYear = function (year) {
	return (year & 3) === 0 && ((~~(year % 25)) != 0 || (year & 15) === 0);
	
};

Calculator.isValidDayOfMonth = function (year, month, day) {
	return day > 0 && day <= (Calculator.getMonthDays(year) || nova_null).get(month - 1);
	
};

Calculator.init = function () {
	return this;
	
};

Calculator.generated56 = function (value0, value1) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	return novaConstructors.newArray1Int1(temp, 2);
	
};

Calculator.generated57 = function (value0, value1) {
	var temp;
	temp = [];
	temp[0] = value0;
	temp[1] = value1;
	return novaConstructors.newArray1Int1(temp, 2);
	
};

Calculator.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/DateTime.Calculator"), false);
	
};

Calculator.prototype.mutator__js_class = function () {
	
};

Calculator.prototype.super = function () {
	
};

novaConstructors.newCalculator = function () {
	var __value = new Calculator()
	NovaObject.call(__value);
	Calculator.prototype.super.apply(__value, [].slice.call(arguments));
	return Calculator.init.call(__value);
	
};

var InvalidIntervalException = function () {
	
	
};

InvalidIntervalException.prototype = Object.create(IntervalException.prototype);
InvalidIntervalException.prototype.constructor = InvalidIntervalException;


InvalidIntervalException.prototype.destroy = function () {
	
};

InvalidIntervalException.init = function (message) {
	return IntervalException.init.call(this, message);
	return this;
	
};

InvalidIntervalException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.InvalidIntervalException"), false);
	
};

InvalidIntervalException.prototype.mutator__js_class = function () {
	
};

InvalidIntervalException.prototype.super = function () {
	
};

novaConstructors.newInvalidIntervalException = function (message) {
	var __value = new InvalidIntervalException()
	IntervalException.call(__value);
	InvalidIntervalException.prototype.super.apply(__value, [].slice.call(arguments));
	return InvalidIntervalException.init.call(__value, message);
	
};

var NoGapException = function () {
	
	
};

NoGapException.prototype = Object.create(IntervalException.prototype);
NoGapException.prototype.constructor = NoGapException;


NoGapException.prototype.destroy = function () {
	
};

NoGapException.init = function (first, second) {
	return IntervalException.init.call(this, novaConstructors.newString2("Cannot get a gap from overlapping Intervals ").plus0((((first) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(" and ").plus0((((second) || nova_null).toString() || nova_null).plus0(novaConstructors.newString2(""))))));
	return this;
	
};

NoGapException.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/Interval.NoGapException"), false);
	
};

NoGapException.prototype.mutator__js_class = function () {
	
};

NoGapException.prototype.super = function () {
	
};

novaConstructors.newNoGapException = function (first, second) {
	var __value = new NoGapException()
	IntervalException.call(__value);
	NoGapException.prototype.super.apply(__value, [].slice.call(arguments));
	return NoGapException.init.call(__value, first, second);
	
};

var Time = function () {
	
	
};

Time.prototype = Object.create(NovaObject.prototype);
Time.prototype.constructor = Time;


Time.prototype.destroy = function () {
	
};

Time.init = function () {
	return this;
	
};

Time.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/time/Time"), false);
	
};

Time.prototype.mutator__js_class = function () {
	
};

Time.accessor_currentTimeMillis = function () {
	return new Date().getTime();
	
};

Time.prototype.mutator_currentTimeMillis = function () {
	
};

Time.prototype.super = function () {
	
};

novaConstructors.newTime = function () {
	var __value = new Time()
	NovaObject.call(__value);
	Time.prototype.super.apply(__value, [].slice.call(arguments));
	return Time.init.call(__value);
	
};

var Json = function () {
	
	
};

Json.prototype = Object.create(HashMap.prototype);
Json.prototype.constructor = Json;


Json.prototype.destroy = function () {
	
};

Json.prototype.toString = function () {
	return novaConstructors.newString2("{}");
	
};

Json.init = function () {
	return this;
	
};

Json.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/web/js/json/Json"), false);
	
};

Json.prototype.mutator__js_class = function () {
	
};

Json.prototype.super = function () {
	
};

novaConstructors.newJson = function () {
	var __value = new Json()
	HashMap.call(__value);
	Json.prototype.super.apply(__value, [].slice.call(arguments));
	return Json.init.call(__value);
	
};

var Svg = function () {
	this.root = null;
	
	
};

Svg.prototype = Object.create(NovaObject.prototype);
Svg.prototype.constructor = Svg;


Svg.prototype.destroy = function () {
	
};

Svg.init = function () {
	this.root = novaConstructors.newSvgMainComponent();
	return this;
	
};

Svg.prototype.generateOutput = function (writer) {
	(this.root || nova_null).generateOutput(writer);
	
};

Svg.prototype.generateHTMLOutput = function (writer) {
	(writer || nova_null).write(novaConstructors.newString2("<html>\n"));
	this.generateOutput(writer);
	(writer || nova_null).write(novaConstructors.newString2("</html>"));
	
};

Svg.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/web/svg/Svg"), false);
	
};

Svg.prototype.mutator__js_class = function () {
	
};

Svg.prototype.super = function () {
	
};

novaConstructors.newSvg = function () {
	var __value = new Svg()
	NovaObject.call(__value);
	Svg.prototype.super.apply(__value, [].slice.call(arguments));
	return Svg.init.call(__value);
	
};

var SvgComponent = function () {
	this.children = null;
	
	
};

SvgComponent.prototype = Object.create(NovaObject.prototype);
SvgComponent.prototype.constructor = SvgComponent;


SvgComponent.prototype.destroy = function () {
	
};

SvgComponent.init = function () {
	this.children = novaConstructors.newSvgComponentList();
	return this;
	
};

SvgComponent.prototype.generateOutput = function (writer) {
	NovaConsole.writeLine1(novaConstructors.newString2("This is wrong"));
	
};

SvgComponent.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/web/svg/SvgComponent"), false);
	
};

SvgComponent.prototype.mutator__js_class = function () {
	
};

SvgComponent.prototype.super = function () {
	
};

novaConstructors.newSvgComponent = function () {
	var __value = new SvgComponent()
	NovaObject.call(__value);
	SvgComponent.prototype.super.apply(__value, [].slice.call(arguments));
	return SvgComponent.init.call(__value);
	
};

var SvgCircle = function () {
	this.x = 0;
	this.y = 0;
	this.r = 0;
	
	
};

SvgCircle.prototype = Object.create(SvgComponent.prototype);
SvgCircle.prototype.constructor = SvgCircle;


SvgCircle.prototype.destroy = function () {
	
};

SvgCircle.init = function (x, y, r) {
	this.x = x;
	this.y = y;
	this.r = r;
	return this;
	
};

SvgCircle.prototype.generateOutput = function (writer) {
	(writer || nova_null).write(novaConstructors.newString2("<circle cx=\"").plus0(NovaDouble.toString((this.x)).plus0(novaConstructors.newString2("\" cy=\"").plus0(NovaDouble.toString((this.y)).plus0(novaConstructors.newString2("\" r=\"").plus0(NovaInt.toString((this.r)).plus0(novaConstructors.newString2("\" stroke=\"false\" fill=\"black\"/>\n"))))))));
	
};

SvgCircle.prototype.toString = function () {
	return novaConstructors.newString2("[Circle at (").plus0(NovaDouble.toString((this.x)).plus0(novaConstructors.newString2(", ").plus0(NovaDouble.toString((this.y)).plus0(novaConstructors.newString2(") with a radius of ").plus0(NovaInt.toString((this.r)).plus0(novaConstructors.newString2("]")))))));
	
};

SvgCircle.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/web/svg/SvgCircle"), false);
	
};

SvgCircle.prototype.mutator__js_class = function () {
	
};

SvgCircle.prototype.super = function () {
	
};

novaConstructors.newSvgCircle = function (x, y, r) {
	var __value = new SvgCircle()
	SvgComponent.call(__value);
	SvgCircle.prototype.super.apply(__value, [].slice.call(arguments));
	return SvgCircle.init.call(__value, x, y, r);
	
};

var SvgComponentList = function () {
	this.start = null;
	
	
};

SvgComponentList.prototype = Object.create(NovaObject.prototype);
SvgComponentList.prototype.constructor = SvgComponentList;


SvgComponentList.prototype.destroy = function () {
	
};

SvgComponentList.prototype.generateOutput = function (writer) {
	var current;
	current = this.start;
	while ((current) != null) {
		((current || nova_null).component || nova_null).generateOutput(writer);
		current = (current || nova_null).next;
	}
	
};

SvgComponentList.prototype.addChild = function (component) {
	var node;
	node = novaConstructors.newSvgComponentNode(component);
	if ((this.start) === null) {
		this.start = node;
	} else {
		var current;
		current = this.start;
		while ((current.next) != null) {
			current = (current || nova_null).next;
		}
		(current || nova_null).next = node;
	}
	
};

SvgComponentList.init = function () {
	return this;
	
};

SvgComponentList.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/web/svg/SvgComponentList"), false);
	
};

SvgComponentList.prototype.mutator__js_class = function () {
	
};

SvgComponentList.prototype.super = function () {
	
};

novaConstructors.newSvgComponentList = function () {
	var __value = new SvgComponentList()
	NovaObject.call(__value);
	SvgComponentList.prototype.super.apply(__value, [].slice.call(arguments));
	return SvgComponentList.init.call(__value);
	
};

var SvgComponentNode = function () {
	this.component = null;
	this.next = null;
	
	
};

SvgComponentNode.prototype = Object.create(NovaObject.prototype);
SvgComponentNode.prototype.constructor = SvgComponentNode;


SvgComponentNode.prototype.destroy = function () {
	
};

SvgComponentNode.init = function (component, next) {
	next = typeof next === 'undefined' ? null : next;
	this.component = component;
	this.next = next;
	return this;
	
};

SvgComponentNode.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/web/svg/SvgComponentNode"), false);
	
};

SvgComponentNode.prototype.mutator__js_class = function () {
	
};

SvgComponentNode.prototype.super = function () {
	
};

novaConstructors.newSvgComponentNode = function (component, next) {
	var __value = new SvgComponentNode()
	NovaObject.call(__value);
	SvgComponentNode.prototype.super.apply(__value, [].slice.call(arguments));
	return SvgComponentNode.init.call(__value, component, next);
	
};

var SvgMainComponent = function () {
	
	
};

SvgMainComponent.prototype = Object.create(SvgComponent.prototype);
SvgMainComponent.prototype.constructor = SvgMainComponent;


SvgMainComponent.prototype.destroy = function () {
	
};

SvgMainComponent.init = function () {
	this.children = novaConstructors.newSvgComponentList();
	return this;
	
};

SvgMainComponent.prototype.generateOutput = function (writer) {
	(writer || nova_null).write(novaConstructors.newString2("<?xml version = '1.0' standalone = 'no'?>\n<!DOCTYPE svg PUBLIC\"-//W3C//DTD Svg1.1//EN\" \"http://www.w3.org/Graphics/Svg/1.1/DTD/svg11.dtd\"><svg width=\"1400px\" height=\"950px\" version=\"1.1\" preserveAspectRatio=\"none\">\n"));
	(this.children || nova_null).generateOutput(writer);
	(writer || nova_null).write(novaConstructors.newString2("</svg>\n"));
	
};

SvgMainComponent.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/web/svg/SvgMainComponent"), false);
	
};

SvgMainComponent.prototype.mutator__js_class = function () {
	
};

SvgMainComponent.prototype.super = function () {
	
};

novaConstructors.newSvgMainComponent = function () {
	var __value = new SvgMainComponent()
	SvgComponent.call(__value);
	SvgMainComponent.prototype.super.apply(__value, [].slice.call(arguments));
	return SvgMainComponent.init.call(__value);
	
};

var No3 = function () {
	
	
};

No3.prototype = Object.create(NovaObject.prototype);
No3.prototype.constructor = No3;


No3.prototype.destroy = function () {
	
};

No3.select = function (selection) {
	return novaConstructors.newNo3Select(selection);
	
};

No3.selectAll = function (selection) {
	return novaConstructors.newNo3SelectAll(selection);
	
};

No3.init = function () {
	return this;
	
};

No3.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/web/svg/no3/No3"), false);
	
};

No3.prototype.mutator__js_class = function () {
	
};

No3.prototype.super = function () {
	
};

novaConstructors.newNo3 = function () {
	var __value = new No3()
	NovaObject.call(__value);
	No3.prototype.super.apply(__value, [].slice.call(arguments));
	return No3.init.call(__value);
	
};

var No3Node = function () {
	
	
};

No3Node.prototype = Object.create(NovaObject.prototype);
No3Node.prototype.constructor = No3Node;


No3Node.prototype.destroy = function () {
	
};

No3Node.init = function () {
	return this;
	
};

No3Node.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/web/svg/no3/No3Node"), false);
	
};

No3Node.prototype.mutator__js_class = function () {
	
};

No3Node.prototype.super = function () {
	
};

novaConstructors.newNo3Node = function () {
	var __value = new No3Node()
	NovaObject.call(__value);
	No3Node.prototype.super.apply(__value, [].slice.call(arguments));
	return No3Node.init.call(__value);
	
};

var No3Select = function () {
	this.selection = null;
	
	
};

No3Select.prototype = Object.create(No3Node.prototype);
No3Select.prototype.constructor = No3Select;


No3Select.prototype.destroy = function () {
	
};

No3Select.init = function (selection) {
	this.selection = selection;
	return this;
	
};

No3Select.prototype.toJs = function () {
	return novaConstructors.newString2("d3.select('").plus0(((this.selection) || nova_null).plus0(novaConstructors.newString2("')")));
	
};

No3Select.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/web/svg/no3/No3Select"), false);
	
};

No3Select.prototype.mutator__js_class = function () {
	
};

No3Select.prototype.super = function () {
	
};

novaConstructors.newNo3Select = function (selection) {
	var __value = new No3Select()
	No3Node.call(__value);
	No3Select.prototype.super.apply(__value, [].slice.call(arguments));
	return No3Select.init.call(__value, selection);
	
};

var No3SelectAll = function () {
	this.selection = null;
	
	
};

No3SelectAll.prototype = Object.create(No3Node.prototype);
No3SelectAll.prototype.constructor = No3SelectAll;


No3SelectAll.prototype.destroy = function () {
	
};

No3SelectAll.init = function (selection) {
	this.selection = selection;
	return this;
	
};

No3SelectAll.prototype.toJs = function () {
	return novaConstructors.newString2("d3.selectAll('").plus0(((this.selection) || nova_null).plus0(novaConstructors.newString2("')")));
	
};

No3SelectAll.prototype.accessor__js_class = function () {
	return novaConstructors.newClass(novaConstructors.newString2("nova/web/svg/no3/No3SelectAll"), false);
	
};

No3SelectAll.prototype.mutator__js_class = function () {
	
};

No3SelectAll.prototype.super = function () {
	
};

novaConstructors.newNo3SelectAll = function (selection) {
	var __value = new No3SelectAll()
	No3Node.call(__value);
	No3SelectAll.prototype.super.apply(__value, [].slice.call(arguments));
	return No3SelectAll.init.call(__value, selection);
	
};



Animal._js_default_baseNovaObject = NovaObject._js_default;
Animal.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Animal.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ArrayDemo._js_default_baseNovaObject = NovaObject._js_default;
ArrayDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ArrayDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Person._js_default_baseNovaObject = NovaObject._js_default;
Person.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Person.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



BodyBuilder.prototype.sayHello_basePerson = Person.prototype.sayHello;



ClosureDemo._js_default_baseNovaObject = NovaObject._js_default;
ClosureDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ClosureDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Dog.prototype.getNumLegs_baseAnimal = Animal.prototype.getNumLegs;
Dog.prototype.getNumEyes_baseAnimal = Animal.prototype.getNumEyes;
Dog.prototype.getDescription_baseAnimal = Animal.prototype.getDescription;
Dog.prototype.toString_baseAnimal = Animal.prototype.toString;



ExceptionHandlingDemo._js_default_baseNovaObject = NovaObject._js_default;
ExceptionHandlingDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ExceptionHandlingDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



FileTest._js_default_baseNovaObject = NovaObject._js_default;
FileTest.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
FileTest.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



GenericDemo._js_default_baseNovaObject = NovaObject._js_default;
GenericDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
GenericDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



HashMapDemo._js_default_baseNovaObject = NovaObject._js_default;
HashMapDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashMapDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



HashSetDemo._js_default_baseNovaObject = NovaObject._js_default;
HashSetDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashSetDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



IntegerTest._js_default_baseNovaObject = NovaObject._js_default;
IntegerTest.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
IntegerTest.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Lab._js_default_baseNovaObject = NovaObject._js_default;
Lab.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Lab.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



MathDemo._js_default_baseNovaObject = NovaObject._js_default;
MathDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
MathDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



NestTest._js_default_baseNovaObject = NovaObject._js_default;
NestTest.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NestTest.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Exception._js_default_baseNovaObject = NovaObject._js_default;
Exception.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Exception.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



NonWholeDivisionException.prototype.toString_baseException = Exception.prototype.toString;
NonWholeDivisionException.prototype.onThrown_baseException = Exception.prototype.onThrown;
NonWholeDivisionException.catchType_baseException = Exception.catchType;





PolymorphismDemo._js_default_baseNovaObject = NovaObject._js_default;
PolymorphismDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
PolymorphismDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



QueueDemo._js_default_baseNovaObject = NovaObject._js_default;
QueueDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
QueueDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Spider.prototype.getNumLegs_baseAnimal = Animal.prototype.getNumLegs;
Spider.prototype.getNumEyes_baseAnimal = Animal.prototype.getNumEyes;
Spider.prototype.getDescription_baseAnimal = Animal.prototype.getDescription;
Spider.prototype.toString_baseAnimal = Animal.prototype.toString;



Square._js_default_baseNovaObject = NovaObject._js_default;
Square.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Square.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



SvgChart._js_default_baseNovaObject = NovaObject._js_default;
SvgChart.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
SvgChart.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



SvgFractal._js_default_baseNovaObject = NovaObject._js_default;
SvgFractal.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
SvgFractal.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



T1._js_default_baseNovaObject = NovaObject._js_default;
T1.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
T1.prototype.toString_baseNovaObject = NovaObject.prototype.toString;






Test._js_default_baseNovaObject = NovaObject._js_default;
Test.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Test.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ThreadDemo._js_default_baseNovaObject = NovaObject._js_default;
ThreadDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ThreadDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Thread._js_default_baseNovaObject = NovaObject._js_default;
Thread.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Thread.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ThreadDemoImplementation.prototype.start_baseThread = Thread.prototype.start;
ThreadDemoImplementation.prototype.join_baseThread = Thread.prototype.join;
ThreadDemoImplementation.prototype.kill_baseThread = Thread.prototype.kill;
ThreadDemoImplementation.sleep_baseThread = Thread.sleep;
ThreadDemoImplementation.lock_baseThread = Thread.lock;
ThreadDemoImplementation.unlock_baseThread = Thread.unlock;
ThreadDemoImplementation.sync_baseThread = Thread.sync;
ThreadDemoImplementation.prototype.run_baseThread = Thread.prototype.run;
ThreadDemoImplementation.prototype.startRun_baseThread = Thread.prototype.startRun;



Ackermann._js_default_baseNovaObject = NovaObject._js_default;
Ackermann.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Ackermann.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Dog._js_default_baseNovaObject = NovaObject._js_default;
Dog.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Dog.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



DatabaseDemo._js_default_baseNovaObject = NovaObject._js_default;
DatabaseDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
DatabaseDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ClientDemo._js_default_baseNovaObject = NovaObject._js_default;
ClientDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ClientDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ConnectionThread.prototype.start_baseThread = Thread.prototype.start;
ConnectionThread.prototype.join_baseThread = Thread.prototype.join;
ConnectionThread.prototype.kill_baseThread = Thread.prototype.kill;
ConnectionThread.sleep_baseThread = Thread.sleep;
ConnectionThread.lock_baseThread = Thread.lock;
ConnectionThread.unlock_baseThread = Thread.unlock;
ConnectionThread.sync_baseThread = Thread.sync;
ConnectionThread.prototype.run_baseThread = Thread.prototype.run;
ConnectionThread.prototype.startRun_baseThread = Thread.prototype.startRun;



OutputThread.prototype.start_baseThread = Thread.prototype.start;
OutputThread.prototype.join_baseThread = Thread.prototype.join;
OutputThread.prototype.kill_baseThread = Thread.prototype.kill;
OutputThread.sleep_baseThread = Thread.sleep;
OutputThread.lock_baseThread = Thread.lock;
OutputThread.unlock_baseThread = Thread.unlock;
OutputThread.sync_baseThread = Thread.sync;
OutputThread.prototype.run_baseThread = Thread.prototype.run;
OutputThread.prototype.startRun_baseThread = Thread.prototype.startRun;



ServerDemo._js_default_baseNovaObject = NovaObject._js_default;
ServerDemo.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ServerDemo.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



AssignmentStability._js_default_baseNovaObject = NovaObject._js_default;
AssignmentStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
AssignmentStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



BoundedIntervalStability._js_default_baseNovaObject = NovaObject._js_default;
BoundedIntervalStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
BoundedIntervalStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



BoundlessIntervalStability._js_default_baseNovaObject = NovaObject._js_default;
BoundlessIntervalStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
BoundlessIntervalStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



CastStability._js_default_baseNovaObject = NovaObject._js_default;
CastStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
CastStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ClassWithProperties._js_default_baseNovaObject = NovaObject._js_default;
ClassWithProperties.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ClassWithProperties.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ClientThread.prototype.start_baseThread = Thread.prototype.start;
ClientThread.prototype.join_baseThread = Thread.prototype.join;
ClientThread.prototype.kill_baseThread = Thread.prototype.kill;
ClientThread.sleep_baseThread = Thread.sleep;
ClientThread.lock_baseThread = Thread.lock;
ClientThread.unlock_baseThread = Thread.unlock;
ClientThread.sync_baseThread = Thread.sync;
ClientThread.prototype.run_baseThread = Thread.prototype.run;
ClientThread.prototype.startRun_baseThread = Thread.prototype.startRun;



ClosureStability._js_default_baseNovaObject = NovaObject._js_default;
ClosureStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ClosureStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ExceptionStability._js_default_baseNovaObject = NovaObject._js_default;
ExceptionStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ExceptionStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ExternalInnerClassStability._js_default_baseNovaObject = NovaObject._js_default;
ExternalInnerClassStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ExternalInnerClassStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



FancyOutputStreamTests._js_default_baseNovaObject = NovaObject._js_default;
FancyOutputStreamTests.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
FancyOutputStreamTests.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



FileStability._js_default_baseNovaObject = NovaObject._js_default;
FileStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
FileStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



FirstClassFunctionStability._js_default_baseNovaObject = NovaObject._js_default;
FirstClassFunctionStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
FirstClassFunctionStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



InnerClassStability._js_default_baseNovaObject = NovaObject._js_default;
InnerClassStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
InnerClassStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



MyOuter._js_default_baseNovaObject = NovaObject._js_default;
MyOuter.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
MyOuter.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



MyInner._js_default_baseNovaObject = NovaObject._js_default;
MyInner.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
MyInner.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



IntervalStability._js_default_baseNovaObject = NovaObject._js_default;
IntervalStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
IntervalStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



LambdaStability._js_default_baseNovaObject = NovaObject._js_default;
LambdaStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
LambdaStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



LibraryLoadingStability._js_default_baseNovaObject = NovaObject._js_default;
LibraryLoadingStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
LibraryLoadingStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



NetworkStability._js_default_baseNovaObject = NovaObject._js_default;
NetworkStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NetworkStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Node._js_default_baseNovaObject = NovaObject._js_default;
Node.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Node.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



PolymorphicSuperClass._js_default_baseNovaObject = NovaObject._js_default;
PolymorphicSuperClass.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
PolymorphicSuperClass.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



PolymorphicSubClass.prototype.giveBirth_basePolymorphicSuperClass = PolymorphicSuperClass.prototype.giveBirth;
PolymorphicSubClass.prototype.toString_basePolymorphicSuperClass = PolymorphicSuperClass.prototype.toString;



PolymorphismStability._js_default_baseNovaObject = NovaObject._js_default;
PolymorphismStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
PolymorphismStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



PrimitiveOverloadStability._js_default_baseNovaObject = NovaObject._js_default;
PrimitiveOverloadStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
PrimitiveOverloadStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



RegexStability._js_default_baseNovaObject = NovaObject._js_default;
RegexStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
RegexStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



UncaughtExceptionHandler._js_default_baseNovaObject = NovaObject._js_default;
UncaughtExceptionHandler.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
UncaughtExceptionHandler.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



StabilityExceptionHandler.prototype.uncaughtException_baseUncaughtExceptionHandler = UncaughtExceptionHandler.prototype.uncaughtException;



StabilityTest._js_default_baseNovaObject = NovaObject._js_default;
StabilityTest.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
StabilityTest.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



StabilityTestCase._js_default_baseNovaObject = NovaObject._js_default;
StabilityTestCase.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
StabilityTestCase.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



StabilityTestException.prototype.toString_baseException = Exception.prototype.toString;
StabilityTestException.prototype.onThrown_baseException = Exception.prototype.onThrown;
StabilityTestException.catchType_baseException = Exception.catchType;



StaticImportStability._js_default_baseNovaObject = NovaObject._js_default;
StaticImportStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
StaticImportStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



SyntaxStability._js_default_baseNovaObject = NovaObject._js_default;
SyntaxStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
SyntaxStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ThreadImplementation.prototype.start_baseThread = Thread.prototype.start;
ThreadImplementation.prototype.join_baseThread = Thread.prototype.join;
ThreadImplementation.prototype.kill_baseThread = Thread.prototype.kill;
ThreadImplementation.sleep_baseThread = Thread.sleep;
ThreadImplementation.lock_baseThread = Thread.lock;
ThreadImplementation.unlock_baseThread = Thread.unlock;
ThreadImplementation.sync_baseThread = Thread.sync;
ThreadImplementation.prototype.run_baseThread = Thread.prototype.run;
ThreadImplementation.prototype.startRun_baseThread = Thread.prototype.startRun;



ThreadStability._js_default_baseNovaObject = NovaObject._js_default;
ThreadStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ThreadStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



TimeStability._js_default_baseNovaObject = NovaObject._js_default;
TimeStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
TimeStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ToStringStability._js_default_baseNovaObject = NovaObject._js_default;
ToStringStability.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ToStringStability.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



UnstableException.prototype.toString_baseException = Exception.prototype.toString;
UnstableException.prototype.onThrown_baseException = Exception.prototype.onThrown;
UnstableException.catchType_baseException = Exception.catchType;



NestException.prototype.toString_baseException = Exception.prototype.toString;
NestException.prototype.onThrown_baseException = Exception.prototype.onThrown;
NestException.catchType_baseException = Exception.catchType;






Nest._js_default_baseNovaObject = NovaObject._js_default;
Nest.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Nest.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Nest1Bool._js_default_baseNovaObject = NovaObject._js_default;
Nest1Bool.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Nest1Bool.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Nest1Int._js_default_baseNovaObject = NovaObject._js_default;
Nest1Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Nest1Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Nest1Long._js_default_baseNovaObject = NovaObject._js_default;
Nest1Long.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Nest1Long.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Nest1Char._js_default_baseNovaObject = NovaObject._js_default;
Nest1Char.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Nest1Char.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Nest1Byte._js_default_baseNovaObject = NovaObject._js_default;
Nest1Byte.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Nest1Byte.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Nest1Float._js_default_baseNovaObject = NovaObject._js_default;
Nest1Float.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Nest1Float.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



TestCase._js_default_baseNovaObject = NovaObject._js_default;
TestCase.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
TestCase.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



TestResult._js_default_baseNovaObject = NovaObject._js_default;
TestResult.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
TestResult.prototype.toString_baseNovaObject = NovaObject.prototype.toString;





TestRunnerModel._js_default_baseNovaObject = NovaObject._js_default;
TestRunnerModel.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
TestRunnerModel.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



TestSuite._js_default_baseNovaObject = NovaObject._js_default;
TestSuite.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
TestSuite.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



TestSuiteRunner.prototype.runTests = TestRunner.prototype.runTests;


TestSuiteRunnerModel.prototype.toString_baseTestRunnerModel = TestRunnerModel.prototype.toString;



UIComponent._js_default_baseNovaObject = NovaObject._js_default;
UIComponent.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
UIComponent.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Panel.prototype.onAdded_baseUIComponent = UIComponent.prototype.onAdded;
Panel.prototype.onRemoved_baseUIComponent = UIComponent.prototype.onRemoved;
Panel.prototype.draw_baseUIComponent = UIComponent.prototype.draw;
Panel.prototype.paint_baseUIComponent = UIComponent.prototype.paint;
Panel.prototype.repaint_baseUIComponent = UIComponent.prototype.repaint;

Panel.prototype.paint = UIParent.prototype.paint;
Panel.prototype.onAdded = UIParent.prototype.onAdded;
Panel.prototype.addChild = UIParent.prototype.addChild;
Panel.prototype.onRemoved = UIComponent.prototype.onRemoved;
Panel.prototype.paint = UIComponent.prototype.paint;
Panel.prototype.repaint = UIComponent.prototype.repaint;
Panel._js_default = NovaObject._js_default;
Panel.prototype.equals = NovaObject.prototype.equals;
Panel.prototype.toString = NovaObject.prototype.toString;


ResultBar.prototype.onAdded_basePanel = Panel.prototype.onAdded;
ResultBar.prototype.draw_basePanel = Panel.prototype.draw;



Window._js_default_baseNovaObject = NovaObject._js_default;
Window.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Window.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ResultWindow.prototype.show_baseWindow = Window.prototype.show;
ResultWindow.prototype.refreshPosition_baseWindow = Window.prototype.refreshPosition;
ResultWindow.prototype.center_baseWindow = Window.prototype.center;
ResultWindow.prototype.repaint_baseWindow = Window.prototype.repaint;



EmbeddedNestTest._js_default_baseNovaObject = NovaObject._js_default;
EmbeddedNestTest.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
EmbeddedNestTest.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



TypeNestTest._js_default_baseNovaObject = NovaObject._js_default;
TypeNestTest.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
TypeNestTest.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



NovaString._js_default_baseNovaObject = NovaObject._js_default;
NovaString.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NovaString.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Substring.prototype.calculateSize_baseNovaString = NovaString.prototype.calculateSize;
Substring.prototype.concat_baseNovaString = NovaString.prototype.concat;
Substring.prototype.plus0_baseNovaString = NovaString.prototype.plus0;
Substring.prototype.multiply0_baseNovaString = NovaString.prototype.multiply0;
Substring.prototype.repeat_baseNovaString = NovaString.prototype.repeat;
Substring.prototype.equals0_baseNovaString = NovaString.prototype.equals0;
Substring.prototype.replace0_baseNovaString = NovaString.prototype.replace0;
Substring.prototype.replace1_baseNovaString = NovaString.prototype.replace1;
Substring.prototype.startsWith0_baseNovaString = NovaString.prototype.startsWith0;
Substring.prototype.startsWith1_baseNovaString = NovaString.prototype.startsWith1;
Substring.prototype.startsWith2_baseNovaString = NovaString.prototype.startsWith2;
Substring.prototype.contains0_baseNovaString = NovaString.prototype.contains0;
Substring.prototype.contains1_baseNovaString = NovaString.prototype.contains1;
Substring.prototype.contains2_baseNovaString = NovaString.prototype.contains2;
Substring.prototype.endsWith0_baseNovaString = NovaString.prototype.endsWith0;
Substring.prototype.endsWith1_baseNovaString = NovaString.prototype.endsWith1;
Substring.prototype.endsWith2_baseNovaString = NovaString.prototype.endsWith2;
Substring.prototype.matches_baseNovaString = NovaString.prototype.matches;
Substring.prototype.indexOf0_baseNovaString = NovaString.prototype.indexOf0;
Substring.prototype.indexOf1_baseNovaString = NovaString.prototype.indexOf1;
Substring.prototype.indexOf2_baseNovaString = NovaString.prototype.indexOf2;
Substring.prototype.lastIndexOf0_baseNovaString = NovaString.prototype.lastIndexOf0;
Substring.prototype.lastIndexOf1_baseNovaString = NovaString.prototype.lastIndexOf1;
Substring.prototype.validateSubstringBounds_baseNovaString = NovaString.prototype.validateSubstringBounds;
Substring.prototype.substring_baseNovaString = NovaString.prototype.substring;
Substring.prototype.trimStart_baseNovaString = NovaString.prototype.trimStart;
Substring.prototype.trimEnd_baseNovaString = NovaString.prototype.trimEnd;
Substring.prototype.trimEnds_baseNovaString = NovaString.prototype.trimEnds;
Substring.prototype.trim_baseNovaString = NovaString.prototype.trim;
Substring.prototype.toLowerCase_baseNovaString = NovaString.prototype.toLowerCase;
Substring.prototype.toUpperCase_baseNovaString = NovaString.prototype.toUpperCase;
Substring.prototype.capitalize_baseNovaString = NovaString.prototype.capitalize;
Substring.prototype.transform_baseNovaString = NovaString.prototype.transform;
Substring.prototype.getStringBetween_baseNovaString = NovaString.prototype.getStringBetween;
Substring.prototype.reverse_baseNovaString = NovaString.prototype.reverse;
Substring.prototype.surroundWith_baseNovaString = NovaString.prototype.surroundWith;
Substring.prototype.compareTo0_baseNovaString = NovaString.prototype.compareTo0;
Substring.prototype.split_baseNovaString = NovaString.prototype.split;
Substring.prototype.getGroupedChars_baseNovaString = NovaString.prototype.getGroupedChars;
Substring.prototype.toString_baseNovaString = NovaString.prototype.toString;
Substring.prototype.get_baseNovaString = NovaString.prototype.get;
Substring.prototype.set_baseNovaString = NovaString.prototype.set;
Substring.generated22_baseNovaString = NovaString.generated22;



System._js_default_baseNovaObject = NovaObject._js_default;
System.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
System.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ImageTracker._js_default_baseNovaObject = NovaObject._js_default;
ImageTracker.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImageTracker.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



TrackPoint._js_default_baseNovaObject = NovaObject._js_default;
TrackPoint.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
TrackPoint.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



DBConnector._js_default_baseNovaObject = NovaObject._js_default;
DBConnector.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
DBConnector.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ResultSet._js_default_baseNovaObject = NovaObject._js_default;
ResultSet.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ResultSet.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



NovaNode._js_default_baseNovaObject = NovaObject._js_default;
NovaNode.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NovaNode.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



BinaryNode.prototype.preorder0_baseNovaNode = NovaNode.prototype.preorder0;
BinaryNode.prototype.inorder0_baseNovaNode = NovaNode.prototype.inorder0;
BinaryNode.prototype.postorder0_baseNovaNode = NovaNode.prototype.postorder0;
BinaryNode.prototype.levelorder0_baseNovaNode = NovaNode.prototype.levelorder0;
BinaryNode.prototype.preorder1_baseNovaNode = NovaNode.prototype.preorder1;
BinaryNode.prototype.inorder1_baseNovaNode = NovaNode.prototype.inorder1;
BinaryNode.prototype.postorder1_baseNovaNode = NovaNode.prototype.postorder1;
BinaryNode.prototype.levelorder1_baseNovaNode = NovaNode.prototype.levelorder1;
BinaryNode.prototype.toString_baseNovaNode = NovaNode.prototype.toString;
BinaryNode.prototype.get_baseNovaNode = NovaNode.prototype.get;
BinaryNode.prototype.set_baseNovaNode = NovaNode.prototype.set;
BinaryNode.prototype.generated53_baseNovaNode = NovaNode.prototype.generated53;



Tree._js_default_baseNovaObject = NovaObject._js_default;
Tree.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Tree.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



BinaryTree.prototype.preorder_baseTree = Tree.prototype.preorder;
BinaryTree.prototype.inorder_baseTree = Tree.prototype.inorder;
BinaryTree.prototype.postorder_baseTree = Tree.prototype.postorder;
BinaryTree.prototype.levelorder_baseTree = Tree.prototype.levelorder;



Bounds._js_default_baseNovaObject = NovaObject._js_default;
Bounds.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Bounds.prototype.toString_baseNovaObject = NovaObject.prototype.toString;





HashMap._js_default_baseNovaObject = NovaObject._js_default;
HashMap.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashMap.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

HashMap.prototype.containsAny = List.prototype.containsAny;
HashMap.prototype.filterNot = List.prototype.filterNot;
HashMap.prototype.filterNull = List.prototype.filterNull;
HashMap.prototype.filterEmpty = List.prototype.filterEmpty;
HashMap.prototype.takeLast = List.prototype.takeLast;
HashMap.prototype.skipLast = List.prototype.skipLast;
HashMap.prototype.firstOr = List.prototype.firstOr;
HashMap.prototype.firstOrThrow = List.prototype.firstOrThrow;
HashMap.prototype.firstNonNull = List.prototype.firstNonNull;
HashMap.prototype.zip0 = List.prototype.zip0;
HashMap.prototype.sum0 = List.prototype.sum0;
HashMap.prototype.sum1 = List.prototype.sum1;
HashMap.prototype.min = List.prototype.min;
HashMap.prototype.max = List.prototype.max;
HashMap.prototype.reduce = List.prototype.reduce;
HashMap.prototype.stitch = List.prototype.stitch;
HashMap.prototype.toEnglish = List.prototype.toEnglish;
HashMap.prototype.toString = List.prototype.toString;
HashMap.prototype.zip1 = List.prototype.zip1;


HashMapIterator._js_default_baseNovaObject = NovaObject._js_default;
HashMapIterator.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashMapIterator.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



HashMap1Long._js_default_baseNovaObject = NovaObject._js_default;
HashMap1Long.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashMap1Long.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

HashMap1Long.prototype.containsAny = List.prototype.containsAny;
HashMap1Long.prototype.filterNot = List.prototype.filterNot;
HashMap1Long.prototype.filterNull = List.prototype.filterNull;
HashMap1Long.prototype.filterEmpty = List.prototype.filterEmpty;
HashMap1Long.prototype.takeLast = List.prototype.takeLast;
HashMap1Long.prototype.skipLast = List.prototype.skipLast;
HashMap1Long.prototype.firstOr = List.prototype.firstOr;
HashMap1Long.prototype.firstOrThrow = List.prototype.firstOrThrow;
HashMap1Long.prototype.firstNonNull = List.prototype.firstNonNull;
HashMap1Long.prototype.zip0 = List.prototype.zip0;
HashMap1Long.prototype.sum0 = List.prototype.sum0;
HashMap1Long.prototype.sum1 = List.prototype.sum1;
HashMap1Long.prototype.min = List.prototype.min;
HashMap1Long.prototype.max = List.prototype.max;
HashMap1Long.prototype.reduce = List.prototype.reduce;
HashMap1Long.prototype.stitch = List.prototype.stitch;
HashMap1Long.prototype.toEnglish = List.prototype.toEnglish;
HashMap1Long.prototype.toString = List.prototype.toString;
HashMap1Long.prototype.zip1 = List.prototype.zip1;


HashMapIterator1Long._js_default_baseNovaObject = NovaObject._js_default;
HashMapIterator1Long.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashMapIterator1Long.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



HashMap1Int._js_default_baseNovaObject = NovaObject._js_default;
HashMap1Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashMap1Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

HashMap1Int.prototype.containsAny = List.prototype.containsAny;
HashMap1Int.prototype.filterNot = List.prototype.filterNot;
HashMap1Int.prototype.filterNull = List.prototype.filterNull;
HashMap1Int.prototype.filterEmpty = List.prototype.filterEmpty;
HashMap1Int.prototype.takeLast = List.prototype.takeLast;
HashMap1Int.prototype.skipLast = List.prototype.skipLast;
HashMap1Int.prototype.firstOr = List.prototype.firstOr;
HashMap1Int.prototype.firstOrThrow = List.prototype.firstOrThrow;
HashMap1Int.prototype.firstNonNull = List.prototype.firstNonNull;
HashMap1Int.prototype.zip0 = List.prototype.zip0;
HashMap1Int.prototype.sum0 = List.prototype.sum0;
HashMap1Int.prototype.sum1 = List.prototype.sum1;
HashMap1Int.prototype.min = List.prototype.min;
HashMap1Int.prototype.max = List.prototype.max;
HashMap1Int.prototype.reduce = List.prototype.reduce;
HashMap1Int.prototype.stitch = List.prototype.stitch;
HashMap1Int.prototype.toEnglish = List.prototype.toEnglish;
HashMap1Int.prototype.toString = List.prototype.toString;
HashMap1Int.prototype.zip1 = List.prototype.zip1;


HashMapIterator1Int._js_default_baseNovaObject = NovaObject._js_default;
HashMapIterator1Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashMapIterator1Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



HashMap1Int2Int._js_default_baseNovaObject = NovaObject._js_default;
HashMap1Int2Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashMap1Int2Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

HashMap1Int2Int.prototype.containsAny = List.prototype.containsAny;
HashMap1Int2Int.prototype.filterNot = List.prototype.filterNot;
HashMap1Int2Int.prototype.filterNull = List.prototype.filterNull;
HashMap1Int2Int.prototype.filterEmpty = List.prototype.filterEmpty;
HashMap1Int2Int.prototype.takeLast = List.prototype.takeLast;
HashMap1Int2Int.prototype.skipLast = List.prototype.skipLast;
HashMap1Int2Int.prototype.firstOr = List.prototype.firstOr;
HashMap1Int2Int.prototype.firstOrThrow = List.prototype.firstOrThrow;
HashMap1Int2Int.prototype.firstNonNull = List.prototype.firstNonNull;
HashMap1Int2Int.prototype.zip0 = List.prototype.zip0;
HashMap1Int2Int.prototype.sum0 = List.prototype.sum0;
HashMap1Int2Int.prototype.sum1 = List.prototype.sum1;
HashMap1Int2Int.prototype.min = List.prototype.min;
HashMap1Int2Int.prototype.max = List.prototype.max;
HashMap1Int2Int.prototype.reduce = List.prototype.reduce;
HashMap1Int2Int.prototype.stitch = List.prototype.stitch;
HashMap1Int2Int.prototype.toEnglish = List.prototype.toEnglish;
HashMap1Int2Int.prototype.toString = List.prototype.toString;
HashMap1Int2Int.prototype.zip1 = List.prototype.zip1;


HashMapIterator1Int2Int._js_default_baseNovaObject = NovaObject._js_default;
HashMapIterator1Int2Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashMapIterator1Int2Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



HashMap1Long2Int._js_default_baseNovaObject = NovaObject._js_default;
HashMap1Long2Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashMap1Long2Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

HashMap1Long2Int.prototype.containsAny = List.prototype.containsAny;
HashMap1Long2Int.prototype.filterNot = List.prototype.filterNot;
HashMap1Long2Int.prototype.filterNull = List.prototype.filterNull;
HashMap1Long2Int.prototype.filterEmpty = List.prototype.filterEmpty;
HashMap1Long2Int.prototype.takeLast = List.prototype.takeLast;
HashMap1Long2Int.prototype.skipLast = List.prototype.skipLast;
HashMap1Long2Int.prototype.firstOr = List.prototype.firstOr;
HashMap1Long2Int.prototype.firstOrThrow = List.prototype.firstOrThrow;
HashMap1Long2Int.prototype.firstNonNull = List.prototype.firstNonNull;
HashMap1Long2Int.prototype.zip0 = List.prototype.zip0;
HashMap1Long2Int.prototype.sum0 = List.prototype.sum0;
HashMap1Long2Int.prototype.sum1 = List.prototype.sum1;
HashMap1Long2Int.prototype.min = List.prototype.min;
HashMap1Long2Int.prototype.max = List.prototype.max;
HashMap1Long2Int.prototype.reduce = List.prototype.reduce;
HashMap1Long2Int.prototype.stitch = List.prototype.stitch;
HashMap1Long2Int.prototype.toEnglish = List.prototype.toEnglish;
HashMap1Long2Int.prototype.toString = List.prototype.toString;
HashMap1Long2Int.prototype.zip1 = List.prototype.zip1;


HashMapIterator1Long2Int._js_default_baseNovaObject = NovaObject._js_default;
HashMapIterator1Long2Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashMapIterator1Long2Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



HashSet._js_default_baseNovaObject = NovaObject._js_default;
HashSet.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
HashSet.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

HashSet.prototype.containsAny = List.prototype.containsAny;
HashSet.prototype.filterNot = List.prototype.filterNot;
HashSet.prototype.filterNull = List.prototype.filterNull;
HashSet.prototype.filterEmpty = List.prototype.filterEmpty;
HashSet.prototype.takeLast = List.prototype.takeLast;
HashSet.prototype.skipLast = List.prototype.skipLast;
HashSet.prototype.firstOr = List.prototype.firstOr;
HashSet.prototype.firstOrThrow = List.prototype.firstOrThrow;
HashSet.prototype.firstNonNull = List.prototype.firstNonNull;
HashSet.prototype.zip0 = List.prototype.zip0;
HashSet.prototype.sum0 = List.prototype.sum0;
HashSet.prototype.sum1 = List.prototype.sum1;
HashSet.prototype.min = List.prototype.min;
HashSet.prototype.max = List.prototype.max;
HashSet.prototype.reduce = List.prototype.reduce;
HashSet.prototype.stitch = List.prototype.stitch;
HashSet.prototype.toEnglish = List.prototype.toEnglish;
HashSet.prototype.toString = List.prototype.toString;
HashSet.prototype.zip1 = List.prototype.zip1;


ImmutableHashMap._js_default_baseNovaObject = NovaObject._js_default;
ImmutableHashMap.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableHashMap.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

ImmutableHashMap.prototype.containsAny = List.prototype.containsAny;
ImmutableHashMap.prototype.filterNot = List.prototype.filterNot;
ImmutableHashMap.prototype.filterNull = List.prototype.filterNull;
ImmutableHashMap.prototype.filterEmpty = List.prototype.filterEmpty;
ImmutableHashMap.prototype.takeLast = List.prototype.takeLast;
ImmutableHashMap.prototype.skipLast = List.prototype.skipLast;
ImmutableHashMap.prototype.firstOr = List.prototype.firstOr;
ImmutableHashMap.prototype.firstOrThrow = List.prototype.firstOrThrow;
ImmutableHashMap.prototype.firstNonNull = List.prototype.firstNonNull;
ImmutableHashMap.prototype.zip0 = List.prototype.zip0;
ImmutableHashMap.prototype.sum0 = List.prototype.sum0;
ImmutableHashMap.prototype.sum1 = List.prototype.sum1;
ImmutableHashMap.prototype.min = List.prototype.min;
ImmutableHashMap.prototype.max = List.prototype.max;
ImmutableHashMap.prototype.reduce = List.prototype.reduce;
ImmutableHashMap.prototype.stitch = List.prototype.stitch;
ImmutableHashMap.prototype.toEnglish = List.prototype.toEnglish;
ImmutableHashMap.prototype.toString = List.prototype.toString;
ImmutableHashMap.prototype.zip1 = List.prototype.zip1;


ImmutableHashMap1Long._js_default_baseNovaObject = NovaObject._js_default;
ImmutableHashMap1Long.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableHashMap1Long.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

ImmutableHashMap1Long.prototype.containsAny = List.prototype.containsAny;
ImmutableHashMap1Long.prototype.filterNot = List.prototype.filterNot;
ImmutableHashMap1Long.prototype.filterNull = List.prototype.filterNull;
ImmutableHashMap1Long.prototype.filterEmpty = List.prototype.filterEmpty;
ImmutableHashMap1Long.prototype.takeLast = List.prototype.takeLast;
ImmutableHashMap1Long.prototype.skipLast = List.prototype.skipLast;
ImmutableHashMap1Long.prototype.firstOr = List.prototype.firstOr;
ImmutableHashMap1Long.prototype.firstOrThrow = List.prototype.firstOrThrow;
ImmutableHashMap1Long.prototype.firstNonNull = List.prototype.firstNonNull;
ImmutableHashMap1Long.prototype.zip0 = List.prototype.zip0;
ImmutableHashMap1Long.prototype.sum0 = List.prototype.sum0;
ImmutableHashMap1Long.prototype.sum1 = List.prototype.sum1;
ImmutableHashMap1Long.prototype.min = List.prototype.min;
ImmutableHashMap1Long.prototype.max = List.prototype.max;
ImmutableHashMap1Long.prototype.reduce = List.prototype.reduce;
ImmutableHashMap1Long.prototype.stitch = List.prototype.stitch;
ImmutableHashMap1Long.prototype.toEnglish = List.prototype.toEnglish;
ImmutableHashMap1Long.prototype.toString = List.prototype.toString;
ImmutableHashMap1Long.prototype.zip1 = List.prototype.zip1;


ImmutableHashMap1Int._js_default_baseNovaObject = NovaObject._js_default;
ImmutableHashMap1Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableHashMap1Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

ImmutableHashMap1Int.prototype.containsAny = List.prototype.containsAny;
ImmutableHashMap1Int.prototype.filterNot = List.prototype.filterNot;
ImmutableHashMap1Int.prototype.filterNull = List.prototype.filterNull;
ImmutableHashMap1Int.prototype.filterEmpty = List.prototype.filterEmpty;
ImmutableHashMap1Int.prototype.takeLast = List.prototype.takeLast;
ImmutableHashMap1Int.prototype.skipLast = List.prototype.skipLast;
ImmutableHashMap1Int.prototype.firstOr = List.prototype.firstOr;
ImmutableHashMap1Int.prototype.firstOrThrow = List.prototype.firstOrThrow;
ImmutableHashMap1Int.prototype.firstNonNull = List.prototype.firstNonNull;
ImmutableHashMap1Int.prototype.zip0 = List.prototype.zip0;
ImmutableHashMap1Int.prototype.sum0 = List.prototype.sum0;
ImmutableHashMap1Int.prototype.sum1 = List.prototype.sum1;
ImmutableHashMap1Int.prototype.min = List.prototype.min;
ImmutableHashMap1Int.prototype.max = List.prototype.max;
ImmutableHashMap1Int.prototype.reduce = List.prototype.reduce;
ImmutableHashMap1Int.prototype.stitch = List.prototype.stitch;
ImmutableHashMap1Int.prototype.toEnglish = List.prototype.toEnglish;
ImmutableHashMap1Int.prototype.toString = List.prototype.toString;
ImmutableHashMap1Int.prototype.zip1 = List.prototype.zip1;


ImmutableHashMap1Int2Int._js_default_baseNovaObject = NovaObject._js_default;
ImmutableHashMap1Int2Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableHashMap1Int2Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

ImmutableHashMap1Int2Int.prototype.containsAny = List.prototype.containsAny;
ImmutableHashMap1Int2Int.prototype.filterNot = List.prototype.filterNot;
ImmutableHashMap1Int2Int.prototype.filterNull = List.prototype.filterNull;
ImmutableHashMap1Int2Int.prototype.filterEmpty = List.prototype.filterEmpty;
ImmutableHashMap1Int2Int.prototype.takeLast = List.prototype.takeLast;
ImmutableHashMap1Int2Int.prototype.skipLast = List.prototype.skipLast;
ImmutableHashMap1Int2Int.prototype.firstOr = List.prototype.firstOr;
ImmutableHashMap1Int2Int.prototype.firstOrThrow = List.prototype.firstOrThrow;
ImmutableHashMap1Int2Int.prototype.firstNonNull = List.prototype.firstNonNull;
ImmutableHashMap1Int2Int.prototype.zip0 = List.prototype.zip0;
ImmutableHashMap1Int2Int.prototype.sum0 = List.prototype.sum0;
ImmutableHashMap1Int2Int.prototype.sum1 = List.prototype.sum1;
ImmutableHashMap1Int2Int.prototype.min = List.prototype.min;
ImmutableHashMap1Int2Int.prototype.max = List.prototype.max;
ImmutableHashMap1Int2Int.prototype.reduce = List.prototype.reduce;
ImmutableHashMap1Int2Int.prototype.stitch = List.prototype.stitch;
ImmutableHashMap1Int2Int.prototype.toEnglish = List.prototype.toEnglish;
ImmutableHashMap1Int2Int.prototype.toString = List.prototype.toString;
ImmutableHashMap1Int2Int.prototype.zip1 = List.prototype.zip1;


ImmutableHashMap1Long2Int._js_default_baseNovaObject = NovaObject._js_default;
ImmutableHashMap1Long2Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableHashMap1Long2Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

ImmutableHashMap1Long2Int.prototype.containsAny = List.prototype.containsAny;
ImmutableHashMap1Long2Int.prototype.filterNot = List.prototype.filterNot;
ImmutableHashMap1Long2Int.prototype.filterNull = List.prototype.filterNull;
ImmutableHashMap1Long2Int.prototype.filterEmpty = List.prototype.filterEmpty;
ImmutableHashMap1Long2Int.prototype.takeLast = List.prototype.takeLast;
ImmutableHashMap1Long2Int.prototype.skipLast = List.prototype.skipLast;
ImmutableHashMap1Long2Int.prototype.firstOr = List.prototype.firstOr;
ImmutableHashMap1Long2Int.prototype.firstOrThrow = List.prototype.firstOrThrow;
ImmutableHashMap1Long2Int.prototype.firstNonNull = List.prototype.firstNonNull;
ImmutableHashMap1Long2Int.prototype.zip0 = List.prototype.zip0;
ImmutableHashMap1Long2Int.prototype.sum0 = List.prototype.sum0;
ImmutableHashMap1Long2Int.prototype.sum1 = List.prototype.sum1;
ImmutableHashMap1Long2Int.prototype.min = List.prototype.min;
ImmutableHashMap1Long2Int.prototype.max = List.prototype.max;
ImmutableHashMap1Long2Int.prototype.reduce = List.prototype.reduce;
ImmutableHashMap1Long2Int.prototype.stitch = List.prototype.stitch;
ImmutableHashMap1Long2Int.prototype.toEnglish = List.prototype.toEnglish;
ImmutableHashMap1Long2Int.prototype.toString = List.prototype.toString;
ImmutableHashMap1Long2Int.prototype.zip1 = List.prototype.zip1;


Pair._js_default_baseNovaObject = NovaObject._js_default;
Pair.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Pair.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Pair1Int2Int._js_default_baseNovaObject = NovaObject._js_default;
Pair1Int2Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Pair1Int2Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Pair1Long._js_default_baseNovaObject = NovaObject._js_default;
Pair1Long.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Pair1Long.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Pair1Int._js_default_baseNovaObject = NovaObject._js_default;
Pair1Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Pair1Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Pair1Long2Int._js_default_baseNovaObject = NovaObject._js_default;
Pair1Long2Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Pair1Long2Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ReversibleHashMap.prototype.add_baseHashMap = HashMap.prototype.add;
ReversibleHashMap.prototype.toArray_baseHashMap = HashMap.prototype.toArray;
ReversibleHashMap.prototype.contains0_baseHashMap = HashMap.prototype.contains0;
ReversibleHashMap.prototype.any0_baseHashMap = HashMap.prototype.any0;
ReversibleHashMap.prototype.all0_baseHashMap = HashMap.prototype.all0;
ReversibleHashMap.prototype.map0_baseHashMap = HashMap.prototype.map0;
ReversibleHashMap.prototype.filter0_baseHashMap = HashMap.prototype.filter0;
ReversibleHashMap.prototype.join_baseHashMap = HashMap.prototype.join;
ReversibleHashMap.prototype.skip_baseHashMap = HashMap.prototype.skip;
ReversibleHashMap.prototype.take_baseHashMap = HashMap.prototype.take;
ReversibleHashMap.prototype.reverse_baseHashMap = HashMap.prototype.reverse;
ReversibleHashMap.prototype.firstWhere0_baseHashMap = HashMap.prototype.firstWhere0;
ReversibleHashMap.prototype.forEach0_baseHashMap = HashMap.prototype.forEach0;
ReversibleHashMap.prototype.getBucket_baseHashMap = HashMap.prototype.getBucket;
ReversibleHashMap.prototype.getPair_baseHashMap = HashMap.prototype.getPair;
ReversibleHashMap.prototype.remove_baseHashMap = HashMap.prototype.remove;
ReversibleHashMap.prototype.containsKey_baseHashMap = HashMap.prototype.containsKey;
ReversibleHashMap.prototype.clone_baseHashMap = HashMap.prototype.clone;
ReversibleHashMap.prototype.toImmutable_baseHashMap = HashMap.prototype.toImmutable;
ReversibleHashMap.prototype.toString_baseHashMap = HashMap.prototype.toString;
ReversibleHashMap.prototype.get_baseHashMap = HashMap.prototype.get;
ReversibleHashMap.prototype.set_baseHashMap = HashMap.prototype.set;



Tuple._js_default_baseNovaObject = NovaObject._js_default;
Tuple.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Tuple.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

Tuple.prototype.containsAny = List.prototype.containsAny;
Tuple.prototype.filterNot = List.prototype.filterNot;
Tuple.prototype.filterNull = List.prototype.filterNull;
Tuple.prototype.filterEmpty = List.prototype.filterEmpty;
Tuple.prototype.takeLast = List.prototype.takeLast;
Tuple.prototype.skipLast = List.prototype.skipLast;
Tuple.prototype.firstOr = List.prototype.firstOr;
Tuple.prototype.firstOrThrow = List.prototype.firstOrThrow;
Tuple.prototype.firstNonNull = List.prototype.firstNonNull;
Tuple.prototype.zip0 = List.prototype.zip0;
Tuple.prototype.sum0 = List.prototype.sum0;
Tuple.prototype.sum1 = List.prototype.sum1;
Tuple.prototype.min = List.prototype.min;
Tuple.prototype.max = List.prototype.max;
Tuple.prototype.reduce = List.prototype.reduce;
Tuple.prototype.join = List.prototype.join;
Tuple.prototype.stitch = List.prototype.stitch;
Tuple.prototype.toEnglish = List.prototype.toEnglish;
Tuple.prototype.toString = List.prototype.toString;
Tuple.prototype.zip1 = List.prototype.zip1;


Tuple2.prototype.contains0_baseTuple = Tuple.prototype.contains0;
Tuple2.prototype.toArray_baseTuple = Tuple.prototype.toArray;
Tuple2.prototype.forEach0_baseTuple = Tuple.prototype.forEach0;
Tuple2.prototype.any0_baseTuple = Tuple.prototype.any0;
Tuple2.prototype.all0_baseTuple = Tuple.prototype.all0;
Tuple2.prototype.filter0_baseTuple = Tuple.prototype.filter0;
Tuple2.prototype.take_baseTuple = Tuple.prototype.take;
Tuple2.prototype.skip_baseTuple = Tuple.prototype.skip;
Tuple2.prototype.firstWhere0_baseTuple = Tuple.prototype.firstWhere0;
Tuple2.prototype.reverse_baseTuple = Tuple.prototype.reverse;
Tuple2.prototype.map0_baseTuple = Tuple.prototype.map0;



Tuple22Int.prototype.contains0_baseTuple = Tuple.prototype.contains0;
Tuple22Int.prototype.toArray_baseTuple = Tuple.prototype.toArray;
Tuple22Int.prototype.forEach0_baseTuple = Tuple.prototype.forEach0;
Tuple22Int.prototype.any0_baseTuple = Tuple.prototype.any0;
Tuple22Int.prototype.all0_baseTuple = Tuple.prototype.all0;
Tuple22Int.prototype.filter0_baseTuple = Tuple.prototype.filter0;
Tuple22Int.prototype.take_baseTuple = Tuple.prototype.take;
Tuple22Int.prototype.skip_baseTuple = Tuple.prototype.skip;
Tuple22Int.prototype.firstWhere0_baseTuple = Tuple.prototype.firstWhere0;
Tuple22Int.prototype.reverse_baseTuple = Tuple.prototype.reverse;
Tuple22Int.prototype.map0_baseTuple = Tuple.prototype.map0;



NovaArray._js_default_baseNovaObject = NovaObject._js_default;
NovaArray.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NovaArray.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

NovaArray.prototype.contains0 = List.prototype.contains0;
NovaArray.prototype.containsAny = List.prototype.containsAny;
NovaArray.prototype.any0 = List.prototype.any0;
NovaArray.prototype.all0 = List.prototype.all0;
NovaArray.prototype.filterNot = List.prototype.filterNot;
NovaArray.prototype.filterNull = List.prototype.filterNull;
NovaArray.prototype.filterEmpty = List.prototype.filterEmpty;
NovaArray.prototype.takeLast = List.prototype.takeLast;
NovaArray.prototype.skipLast = List.prototype.skipLast;
NovaArray.prototype.firstOr = List.prototype.firstOr;
NovaArray.prototype.firstOrThrow = List.prototype.firstOrThrow;
NovaArray.prototype.firstWhere0 = List.prototype.firstWhere0;
NovaArray.prototype.firstNonNull = List.prototype.firstNonNull;
NovaArray.prototype.zip0 = List.prototype.zip0;
NovaArray.prototype.sum0 = List.prototype.sum0;
NovaArray.prototype.sum1 = List.prototype.sum1;
NovaArray.prototype.min = List.prototype.min;
NovaArray.prototype.max = List.prototype.max;
NovaArray.prototype.reduce = List.prototype.reduce;
NovaArray.prototype.join = List.prototype.join;
NovaArray.prototype.stitch = List.prototype.stitch;
NovaArray.prototype.toEnglish = List.prototype.toEnglish;
NovaArray.prototype.toString = List.prototype.toString;
NovaArray.prototype.zip1 = List.prototype.zip1;
NovaArray.prototype.findIndex = OrderedList.prototype.findIndex;
NovaArray.prototype.indexOf = OrderedList.prototype.indexOf;
NovaArray.prototype.contains0 = List.prototype.contains0;
NovaArray.prototype.containsAny = List.prototype.containsAny;
NovaArray.prototype.any0 = List.prototype.any0;
NovaArray.prototype.all0 = List.prototype.all0;
NovaArray.prototype.filterNot = List.prototype.filterNot;
NovaArray.prototype.filterNull = List.prototype.filterNull;
NovaArray.prototype.filterEmpty = List.prototype.filterEmpty;
NovaArray.prototype.takeLast = List.prototype.takeLast;
NovaArray.prototype.skipLast = List.prototype.skipLast;
NovaArray.prototype.firstOr = List.prototype.firstOr;
NovaArray.prototype.firstOrThrow = List.prototype.firstOrThrow;
NovaArray.prototype.firstWhere0 = List.prototype.firstWhere0;
NovaArray.prototype.firstNonNull = List.prototype.firstNonNull;
NovaArray.prototype.zip0 = List.prototype.zip0;
NovaArray.prototype.sum0 = List.prototype.sum0;
NovaArray.prototype.sum1 = List.prototype.sum1;
NovaArray.prototype.min = List.prototype.min;
NovaArray.prototype.max = List.prototype.max;
NovaArray.prototype.reduce = List.prototype.reduce;
NovaArray.prototype.join = List.prototype.join;
NovaArray.prototype.stitch = List.prototype.stitch;
NovaArray.prototype.toEnglish = List.prototype.toEnglish;
NovaArray.prototype.toString = List.prototype.toString;
NovaArray.prototype.zip1 = List.prototype.zip1;


Array1Double._js_default_baseNovaObject = NovaObject._js_default;
Array1Double.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Array1Double.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

Array1Double.prototype.contains = List1Double.prototype.contains;
Array1Double.prototype.containsAny = List1Double.prototype.containsAny;
Array1Double.prototype.any = List1Double.prototype.any;
Array1Double.prototype.all = List1Double.prototype.all;
Array1Double.prototype.filterNot = List1Double.prototype.filterNot;
Array1Double.prototype.filterNull = List1Double.prototype.filterNull;
Array1Double.prototype.takeLast = List1Double.prototype.takeLast;
Array1Double.prototype.skipLast = List1Double.prototype.skipLast;
Array1Double.prototype.firstOr = List1Double.prototype.firstOr;
Array1Double.prototype.firstOrThrow = List1Double.prototype.firstOrThrow;
Array1Double.prototype.firstWhere = List1Double.prototype.firstWhere;
Array1Double.prototype.firstNonNull = List1Double.prototype.firstNonNull;
Array1Double.prototype.zip = List1Double.prototype.zip;
Array1Double.prototype.min = List1Double.prototype.min;
Array1Double.prototype.max = List1Double.prototype.max;
Array1Double.prototype.reduce = List1Double.prototype.reduce;
Array1Double.prototype.join = List1Double.prototype.join;
Array1Double.prototype.stitch = List1Double.prototype.stitch;
Array1Double.prototype.toEnglish = List1Double.prototype.toEnglish;
Array1Double.prototype.toString = List1Double.prototype.toString;
Array1Double.prototype.findIndex = OrderedList1Double.prototype.findIndex;
Array1Double.prototype.indexOf = OrderedList1Double.prototype.indexOf;
Array1Double.prototype.contains = List1Double.prototype.contains;
Array1Double.prototype.containsAny = List1Double.prototype.containsAny;
Array1Double.prototype.any = List1Double.prototype.any;
Array1Double.prototype.all = List1Double.prototype.all;
Array1Double.prototype.filterNot = List1Double.prototype.filterNot;
Array1Double.prototype.filterNull = List1Double.prototype.filterNull;
Array1Double.prototype.takeLast = List1Double.prototype.takeLast;
Array1Double.prototype.skipLast = List1Double.prototype.skipLast;
Array1Double.prototype.firstOr = List1Double.prototype.firstOr;
Array1Double.prototype.firstOrThrow = List1Double.prototype.firstOrThrow;
Array1Double.prototype.firstWhere = List1Double.prototype.firstWhere;
Array1Double.prototype.firstNonNull = List1Double.prototype.firstNonNull;
Array1Double.prototype.zip = List1Double.prototype.zip;
Array1Double.prototype.min = List1Double.prototype.min;
Array1Double.prototype.max = List1Double.prototype.max;
Array1Double.prototype.reduce = List1Double.prototype.reduce;
Array1Double.prototype.join = List1Double.prototype.join;
Array1Double.prototype.stitch = List1Double.prototype.stitch;
Array1Double.prototype.toEnglish = List1Double.prototype.toEnglish;
Array1Double.prototype.toString = List1Double.prototype.toString;


Array1Char._js_default_baseNovaObject = NovaObject._js_default;
Array1Char.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Array1Char.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

Array1Char.prototype.contains = List1Char.prototype.contains;
Array1Char.prototype.containsAny = List1Char.prototype.containsAny;
Array1Char.prototype.any = List1Char.prototype.any;
Array1Char.prototype.all = List1Char.prototype.all;
Array1Char.prototype.filterNot = List1Char.prototype.filterNot;
Array1Char.prototype.filterNull = List1Char.prototype.filterNull;
Array1Char.prototype.takeLast = List1Char.prototype.takeLast;
Array1Char.prototype.skipLast = List1Char.prototype.skipLast;
Array1Char.prototype.firstOr = List1Char.prototype.firstOr;
Array1Char.prototype.firstOrThrow = List1Char.prototype.firstOrThrow;
Array1Char.prototype.firstWhere = List1Char.prototype.firstWhere;
Array1Char.prototype.firstNonNull = List1Char.prototype.firstNonNull;
Array1Char.prototype.zip = List1Char.prototype.zip;
Array1Char.prototype.sum0 = List1Char.prototype.sum0;
Array1Char.prototype.sum1 = List1Char.prototype.sum1;
Array1Char.prototype.min = List1Char.prototype.min;
Array1Char.prototype.max = List1Char.prototype.max;
Array1Char.prototype.reduce = List1Char.prototype.reduce;
Array1Char.prototype.join = List1Char.prototype.join;
Array1Char.prototype.stitch = List1Char.prototype.stitch;
Array1Char.prototype.toEnglish = List1Char.prototype.toEnglish;
Array1Char.prototype.toString = List1Char.prototype.toString;
Array1Char.prototype.findIndex = OrderedList1Char.prototype.findIndex;
Array1Char.prototype.indexOf = OrderedList1Char.prototype.indexOf;
Array1Char.prototype.contains = List1Char.prototype.contains;
Array1Char.prototype.containsAny = List1Char.prototype.containsAny;
Array1Char.prototype.any = List1Char.prototype.any;
Array1Char.prototype.all = List1Char.prototype.all;
Array1Char.prototype.filterNot = List1Char.prototype.filterNot;
Array1Char.prototype.filterNull = List1Char.prototype.filterNull;
Array1Char.prototype.takeLast = List1Char.prototype.takeLast;
Array1Char.prototype.skipLast = List1Char.prototype.skipLast;
Array1Char.prototype.firstOr = List1Char.prototype.firstOr;
Array1Char.prototype.firstOrThrow = List1Char.prototype.firstOrThrow;
Array1Char.prototype.firstWhere = List1Char.prototype.firstWhere;
Array1Char.prototype.firstNonNull = List1Char.prototype.firstNonNull;
Array1Char.prototype.zip = List1Char.prototype.zip;
Array1Char.prototype.sum0 = List1Char.prototype.sum0;
Array1Char.prototype.sum1 = List1Char.prototype.sum1;
Array1Char.prototype.min = List1Char.prototype.min;
Array1Char.prototype.max = List1Char.prototype.max;
Array1Char.prototype.reduce = List1Char.prototype.reduce;
Array1Char.prototype.join = List1Char.prototype.join;
Array1Char.prototype.stitch = List1Char.prototype.stitch;
Array1Char.prototype.toEnglish = List1Char.prototype.toEnglish;
Array1Char.prototype.toString = List1Char.prototype.toString;


Array1Int._js_default_baseNovaObject = NovaObject._js_default;
Array1Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Array1Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

Array1Int.prototype.contains = List1Int.prototype.contains;
Array1Int.prototype.containsAny = List1Int.prototype.containsAny;
Array1Int.prototype.any = List1Int.prototype.any;
Array1Int.prototype.all = List1Int.prototype.all;
Array1Int.prototype.filterNot = List1Int.prototype.filterNot;
Array1Int.prototype.filterNull = List1Int.prototype.filterNull;
Array1Int.prototype.takeLast = List1Int.prototype.takeLast;
Array1Int.prototype.skipLast = List1Int.prototype.skipLast;
Array1Int.prototype.firstOr = List1Int.prototype.firstOr;
Array1Int.prototype.firstOrThrow = List1Int.prototype.firstOrThrow;
Array1Int.prototype.firstWhere = List1Int.prototype.firstWhere;
Array1Int.prototype.firstNonNull = List1Int.prototype.firstNonNull;
Array1Int.prototype.zip = List1Int.prototype.zip;
Array1Int.prototype.sum0 = List1Int.prototype.sum0;
Array1Int.prototype.sum1 = List1Int.prototype.sum1;
Array1Int.prototype.min = List1Int.prototype.min;
Array1Int.prototype.max = List1Int.prototype.max;
Array1Int.prototype.reduce = List1Int.prototype.reduce;
Array1Int.prototype.join = List1Int.prototype.join;
Array1Int.prototype.stitch = List1Int.prototype.stitch;
Array1Int.prototype.toEnglish = List1Int.prototype.toEnglish;
Array1Int.prototype.toString = List1Int.prototype.toString;
Array1Int.prototype.findIndex = OrderedList1Int.prototype.findIndex;
Array1Int.prototype.indexOf = OrderedList1Int.prototype.indexOf;
Array1Int.prototype.contains = List1Int.prototype.contains;
Array1Int.prototype.containsAny = List1Int.prototype.containsAny;
Array1Int.prototype.any = List1Int.prototype.any;
Array1Int.prototype.all = List1Int.prototype.all;
Array1Int.prototype.filterNot = List1Int.prototype.filterNot;
Array1Int.prototype.filterNull = List1Int.prototype.filterNull;
Array1Int.prototype.takeLast = List1Int.prototype.takeLast;
Array1Int.prototype.skipLast = List1Int.prototype.skipLast;
Array1Int.prototype.firstOr = List1Int.prototype.firstOr;
Array1Int.prototype.firstOrThrow = List1Int.prototype.firstOrThrow;
Array1Int.prototype.firstWhere = List1Int.prototype.firstWhere;
Array1Int.prototype.firstNonNull = List1Int.prototype.firstNonNull;
Array1Int.prototype.zip = List1Int.prototype.zip;
Array1Int.prototype.sum0 = List1Int.prototype.sum0;
Array1Int.prototype.sum1 = List1Int.prototype.sum1;
Array1Int.prototype.min = List1Int.prototype.min;
Array1Int.prototype.max = List1Int.prototype.max;
Array1Int.prototype.reduce = List1Int.prototype.reduce;
Array1Int.prototype.join = List1Int.prototype.join;
Array1Int.prototype.stitch = List1Int.prototype.stitch;
Array1Int.prototype.toEnglish = List1Int.prototype.toEnglish;
Array1Int.prototype.toString = List1Int.prototype.toString;


Array1Byte._js_default_baseNovaObject = NovaObject._js_default;
Array1Byte.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Array1Byte.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

Array1Byte.prototype.contains = List1Byte.prototype.contains;
Array1Byte.prototype.containsAny = List1Byte.prototype.containsAny;
Array1Byte.prototype.any = List1Byte.prototype.any;
Array1Byte.prototype.all = List1Byte.prototype.all;
Array1Byte.prototype.filterNot = List1Byte.prototype.filterNot;
Array1Byte.prototype.filterNull = List1Byte.prototype.filterNull;
Array1Byte.prototype.takeLast = List1Byte.prototype.takeLast;
Array1Byte.prototype.skipLast = List1Byte.prototype.skipLast;
Array1Byte.prototype.firstOr = List1Byte.prototype.firstOr;
Array1Byte.prototype.firstOrThrow = List1Byte.prototype.firstOrThrow;
Array1Byte.prototype.firstWhere = List1Byte.prototype.firstWhere;
Array1Byte.prototype.firstNonNull = List1Byte.prototype.firstNonNull;
Array1Byte.prototype.zip = List1Byte.prototype.zip;
Array1Byte.prototype.sum0 = List1Byte.prototype.sum0;
Array1Byte.prototype.sum1 = List1Byte.prototype.sum1;
Array1Byte.prototype.min = List1Byte.prototype.min;
Array1Byte.prototype.max = List1Byte.prototype.max;
Array1Byte.prototype.reduce = List1Byte.prototype.reduce;
Array1Byte.prototype.join = List1Byte.prototype.join;
Array1Byte.prototype.stitch = List1Byte.prototype.stitch;
Array1Byte.prototype.toEnglish = List1Byte.prototype.toEnglish;
Array1Byte.prototype.toString = List1Byte.prototype.toString;
Array1Byte.prototype.findIndex = OrderedList1Byte.prototype.findIndex;
Array1Byte.prototype.indexOf = OrderedList1Byte.prototype.indexOf;
Array1Byte.prototype.contains = List1Byte.prototype.contains;
Array1Byte.prototype.containsAny = List1Byte.prototype.containsAny;
Array1Byte.prototype.any = List1Byte.prototype.any;
Array1Byte.prototype.all = List1Byte.prototype.all;
Array1Byte.prototype.filterNot = List1Byte.prototype.filterNot;
Array1Byte.prototype.filterNull = List1Byte.prototype.filterNull;
Array1Byte.prototype.takeLast = List1Byte.prototype.takeLast;
Array1Byte.prototype.skipLast = List1Byte.prototype.skipLast;
Array1Byte.prototype.firstOr = List1Byte.prototype.firstOr;
Array1Byte.prototype.firstOrThrow = List1Byte.prototype.firstOrThrow;
Array1Byte.prototype.firstWhere = List1Byte.prototype.firstWhere;
Array1Byte.prototype.firstNonNull = List1Byte.prototype.firstNonNull;
Array1Byte.prototype.zip = List1Byte.prototype.zip;
Array1Byte.prototype.sum0 = List1Byte.prototype.sum0;
Array1Byte.prototype.sum1 = List1Byte.prototype.sum1;
Array1Byte.prototype.min = List1Byte.prototype.min;
Array1Byte.prototype.max = List1Byte.prototype.max;
Array1Byte.prototype.reduce = List1Byte.prototype.reduce;
Array1Byte.prototype.join = List1Byte.prototype.join;
Array1Byte.prototype.stitch = List1Byte.prototype.stitch;
Array1Byte.prototype.toEnglish = List1Byte.prototype.toEnglish;
Array1Byte.prototype.toString = List1Byte.prototype.toString;


Array1Long._js_default_baseNovaObject = NovaObject._js_default;
Array1Long.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Array1Long.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

Array1Long.prototype.contains = List1Long.prototype.contains;
Array1Long.prototype.containsAny = List1Long.prototype.containsAny;
Array1Long.prototype.any = List1Long.prototype.any;
Array1Long.prototype.all = List1Long.prototype.all;
Array1Long.prototype.filterNot = List1Long.prototype.filterNot;
Array1Long.prototype.filterNull = List1Long.prototype.filterNull;
Array1Long.prototype.takeLast = List1Long.prototype.takeLast;
Array1Long.prototype.skipLast = List1Long.prototype.skipLast;
Array1Long.prototype.firstOr = List1Long.prototype.firstOr;
Array1Long.prototype.firstOrThrow = List1Long.prototype.firstOrThrow;
Array1Long.prototype.firstWhere = List1Long.prototype.firstWhere;
Array1Long.prototype.firstNonNull = List1Long.prototype.firstNonNull;
Array1Long.prototype.zip = List1Long.prototype.zip;
Array1Long.prototype.sum0 = List1Long.prototype.sum0;
Array1Long.prototype.sum1 = List1Long.prototype.sum1;
Array1Long.prototype.min = List1Long.prototype.min;
Array1Long.prototype.max = List1Long.prototype.max;
Array1Long.prototype.reduce = List1Long.prototype.reduce;
Array1Long.prototype.join = List1Long.prototype.join;
Array1Long.prototype.stitch = List1Long.prototype.stitch;
Array1Long.prototype.toEnglish = List1Long.prototype.toEnglish;
Array1Long.prototype.toString = List1Long.prototype.toString;
Array1Long.prototype.findIndex = OrderedList1Long.prototype.findIndex;
Array1Long.prototype.indexOf = OrderedList1Long.prototype.indexOf;
Array1Long.prototype.contains = List1Long.prototype.contains;
Array1Long.prototype.containsAny = List1Long.prototype.containsAny;
Array1Long.prototype.any = List1Long.prototype.any;
Array1Long.prototype.all = List1Long.prototype.all;
Array1Long.prototype.filterNot = List1Long.prototype.filterNot;
Array1Long.prototype.filterNull = List1Long.prototype.filterNull;
Array1Long.prototype.takeLast = List1Long.prototype.takeLast;
Array1Long.prototype.skipLast = List1Long.prototype.skipLast;
Array1Long.prototype.firstOr = List1Long.prototype.firstOr;
Array1Long.prototype.firstOrThrow = List1Long.prototype.firstOrThrow;
Array1Long.prototype.firstWhere = List1Long.prototype.firstWhere;
Array1Long.prototype.firstNonNull = List1Long.prototype.firstNonNull;
Array1Long.prototype.zip = List1Long.prototype.zip;
Array1Long.prototype.sum0 = List1Long.prototype.sum0;
Array1Long.prototype.sum1 = List1Long.prototype.sum1;
Array1Long.prototype.min = List1Long.prototype.min;
Array1Long.prototype.max = List1Long.prototype.max;
Array1Long.prototype.reduce = List1Long.prototype.reduce;
Array1Long.prototype.join = List1Long.prototype.join;
Array1Long.prototype.stitch = List1Long.prototype.stitch;
Array1Long.prototype.toEnglish = List1Long.prototype.toEnglish;
Array1Long.prototype.toString = List1Long.prototype.toString;


ArrayIterator._js_default_baseNovaObject = NovaObject._js_default;
ArrayIterator.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ArrayIterator.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ArrayIterator1Double._js_default_baseNovaObject = NovaObject._js_default;
ArrayIterator1Double.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ArrayIterator1Double.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ArrayIterator1Char._js_default_baseNovaObject = NovaObject._js_default;
ArrayIterator1Char.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ArrayIterator1Char.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ArrayIterator1Int._js_default_baseNovaObject = NovaObject._js_default;
ArrayIterator1Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ArrayIterator1Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ArrayIterator1Byte._js_default_baseNovaObject = NovaObject._js_default;
ArrayIterator1Byte.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ArrayIterator1Byte.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ArrayIterator1Long._js_default_baseNovaObject = NovaObject._js_default;
ArrayIterator1Long.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ArrayIterator1Long.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



CharArray.prototype.fillRemaining_baseNovaArray = NovaArray.prototype.fillRemaining;
CharArray.prototype.plus0_baseNovaArray = NovaArray.prototype.plus0;
CharArray.prototype.plusEquals0_baseNovaArray = NovaArray.prototype.plusEquals0;
CharArray.prototype.addAll_baseNovaArray = NovaArray.prototype.addAll;
CharArray.prototype.addUnique_baseNovaArray = NovaArray.prototype.addUnique;
CharArray.prototype.add0_baseNovaArray = NovaArray.prototype.add0;
CharArray.prototype.add1_baseNovaArray = NovaArray.prototype.add1;
CharArray.prototype.remove0_baseNovaArray = NovaArray.prototype.remove0;
CharArray.prototype.remove1_baseNovaArray = NovaArray.prototype.remove1;
CharArray.prototype.replace_baseNovaArray = NovaArray.prototype.replace;
CharArray.prototype.shiftRight_baseNovaArray = NovaArray.prototype.shiftRight;
CharArray.prototype.shiftLeft_baseNovaArray = NovaArray.prototype.shiftLeft;
CharArray.prototype.swap_baseNovaArray = NovaArray.prototype.swap;
CharArray.prototype.increaseSize0_baseNovaArray = NovaArray.prototype.increaseSize0;
CharArray.prototype.increaseSize1_baseNovaArray = NovaArray.prototype.increaseSize1;
CharArray.prototype.cloneData_baseNovaArray = NovaArray.prototype.cloneData;
CharArray.prototype.clone_baseNovaArray = NovaArray.prototype.clone;
CharArray.prototype.toArray_baseNovaArray = NovaArray.prototype.toArray;
CharArray.prototype.map0_baseNovaArray = NovaArray.prototype.map0;
CharArray.prototype.forEach0_baseNovaArray = NovaArray.prototype.forEach0;
CharArray.prototype.filter0_baseNovaArray = NovaArray.prototype.filter0;
CharArray.prototype.take_baseNovaArray = NovaArray.prototype.take;
CharArray.prototype.skip_baseNovaArray = NovaArray.prototype.skip;
CharArray.prototype.sumSize_baseNovaArray = NovaArray.prototype.sumSize;
CharArray.prototype.reverse_baseNovaArray = NovaArray.prototype.reverse;
CharArray.prototype.mergeSort0_baseNovaArray = NovaArray.prototype.mergeSort0;
CharArray.prototype.quickSort0_baseNovaArray = NovaArray.prototype.quickSort0;
CharArray.quickSortHelper_baseNovaArray = NovaArray.quickSortHelper;
CharArray.partition_baseNovaArray = NovaArray.partition;
CharArray.prototype.mergeSort1_baseNovaArray = NovaArray.prototype.mergeSort1;
CharArray.prototype.quickSort1_baseNovaArray = NovaArray.prototype.quickSort1;
CharArray.prototype.sort0_baseNovaArray = NovaArray.prototype.sort0;
CharArray.prototype.sort1_baseNovaArray = NovaArray.prototype.sort1;
CharArray.prototype.toImmutable_baseNovaArray = NovaArray.prototype.toImmutable;
CharArray.prototype.toString_baseNovaArray = NovaArray.prototype.toString;
CharArray.prototype.get_baseNovaArray = NovaArray.prototype.get;
CharArray.prototype.set0_baseNovaArray = NovaArray.prototype.set0;
CharArray.prototype.set1_baseNovaArray = NovaArray.prototype.set1;



CharArrayIterator._js_default_baseNovaObject = NovaObject._js_default;
CharArrayIterator.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
CharArrayIterator.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



CompiledList._js_default_baseNovaObject = NovaObject._js_default;
CompiledList.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
CompiledList.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



DoubleArray.prototype.fillRemaining_baseNovaArray = NovaArray.prototype.fillRemaining;
DoubleArray.prototype.plus0_baseNovaArray = NovaArray.prototype.plus0;
DoubleArray.prototype.plusEquals0_baseNovaArray = NovaArray.prototype.plusEquals0;
DoubleArray.prototype.addAll_baseNovaArray = NovaArray.prototype.addAll;
DoubleArray.prototype.addUnique_baseNovaArray = NovaArray.prototype.addUnique;
DoubleArray.prototype.add0_baseNovaArray = NovaArray.prototype.add0;
DoubleArray.prototype.add1_baseNovaArray = NovaArray.prototype.add1;
DoubleArray.prototype.remove0_baseNovaArray = NovaArray.prototype.remove0;
DoubleArray.prototype.remove1_baseNovaArray = NovaArray.prototype.remove1;
DoubleArray.prototype.replace_baseNovaArray = NovaArray.prototype.replace;
DoubleArray.prototype.shiftRight_baseNovaArray = NovaArray.prototype.shiftRight;
DoubleArray.prototype.shiftLeft_baseNovaArray = NovaArray.prototype.shiftLeft;
DoubleArray.prototype.swap_baseNovaArray = NovaArray.prototype.swap;
DoubleArray.prototype.increaseSize0_baseNovaArray = NovaArray.prototype.increaseSize0;
DoubleArray.prototype.increaseSize1_baseNovaArray = NovaArray.prototype.increaseSize1;
DoubleArray.prototype.cloneData_baseNovaArray = NovaArray.prototype.cloneData;
DoubleArray.prototype.clone_baseNovaArray = NovaArray.prototype.clone;
DoubleArray.prototype.toArray_baseNovaArray = NovaArray.prototype.toArray;
DoubleArray.prototype.map0_baseNovaArray = NovaArray.prototype.map0;
DoubleArray.prototype.forEach0_baseNovaArray = NovaArray.prototype.forEach0;
DoubleArray.prototype.filter0_baseNovaArray = NovaArray.prototype.filter0;
DoubleArray.prototype.take_baseNovaArray = NovaArray.prototype.take;
DoubleArray.prototype.skip_baseNovaArray = NovaArray.prototype.skip;
DoubleArray.prototype.sumSize_baseNovaArray = NovaArray.prototype.sumSize;
DoubleArray.prototype.reverse_baseNovaArray = NovaArray.prototype.reverse;
DoubleArray.prototype.mergeSort0_baseNovaArray = NovaArray.prototype.mergeSort0;
DoubleArray.prototype.quickSort0_baseNovaArray = NovaArray.prototype.quickSort0;
DoubleArray.quickSortHelper_baseNovaArray = NovaArray.quickSortHelper;
DoubleArray.partition_baseNovaArray = NovaArray.partition;
DoubleArray.prototype.mergeSort1_baseNovaArray = NovaArray.prototype.mergeSort1;
DoubleArray.prototype.quickSort1_baseNovaArray = NovaArray.prototype.quickSort1;
DoubleArray.prototype.sort0_baseNovaArray = NovaArray.prototype.sort0;
DoubleArray.prototype.sort1_baseNovaArray = NovaArray.prototype.sort1;
DoubleArray.prototype.toImmutable_baseNovaArray = NovaArray.prototype.toImmutable;
DoubleArray.prototype.toString_baseNovaArray = NovaArray.prototype.toString;
DoubleArray.prototype.get_baseNovaArray = NovaArray.prototype.get;
DoubleArray.prototype.set0_baseNovaArray = NovaArray.prototype.set0;
DoubleArray.prototype.set1_baseNovaArray = NovaArray.prototype.set1;



DoubleArrayIterator._js_default_baseNovaObject = NovaObject._js_default;
DoubleArrayIterator.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
DoubleArrayIterator.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



NoSuchElementException.prototype.toString_baseException = Exception.prototype.toString;
NoSuchElementException.prototype.onThrown_baseException = Exception.prototype.onThrown;
NoSuchElementException.catchType_baseException = Exception.catchType;






ImmutableArray._js_default_baseNovaObject = NovaObject._js_default;
ImmutableArray.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableArray.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

ImmutableArray.prototype.contains0 = List.prototype.contains0;
ImmutableArray.prototype.containsAny = List.prototype.containsAny;
ImmutableArray.prototype.any0 = List.prototype.any0;
ImmutableArray.prototype.all0 = List.prototype.all0;
ImmutableArray.prototype.filterNot = List.prototype.filterNot;
ImmutableArray.prototype.filterNull = List.prototype.filterNull;
ImmutableArray.prototype.filterEmpty = List.prototype.filterEmpty;
ImmutableArray.prototype.takeLast = List.prototype.takeLast;
ImmutableArray.prototype.skipLast = List.prototype.skipLast;
ImmutableArray.prototype.firstOr = List.prototype.firstOr;
ImmutableArray.prototype.firstOrThrow = List.prototype.firstOrThrow;
ImmutableArray.prototype.firstWhere0 = List.prototype.firstWhere0;
ImmutableArray.prototype.firstNonNull = List.prototype.firstNonNull;
ImmutableArray.prototype.zip0 = List.prototype.zip0;
ImmutableArray.prototype.sum0 = List.prototype.sum0;
ImmutableArray.prototype.sum1 = List.prototype.sum1;
ImmutableArray.prototype.min = List.prototype.min;
ImmutableArray.prototype.max = List.prototype.max;
ImmutableArray.prototype.reduce = List.prototype.reduce;
ImmutableArray.prototype.join = List.prototype.join;
ImmutableArray.prototype.stitch = List.prototype.stitch;
ImmutableArray.prototype.toEnglish = List.prototype.toEnglish;
ImmutableArray.prototype.toString = List.prototype.toString;
ImmutableArray.prototype.zip1 = List.prototype.zip1;


ImmutableArray1Double._js_default_baseNovaObject = NovaObject._js_default;
ImmutableArray1Double.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableArray1Double.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

ImmutableArray1Double.prototype.contains = List1Double.prototype.contains;
ImmutableArray1Double.prototype.containsAny = List1Double.prototype.containsAny;
ImmutableArray1Double.prototype.any = List1Double.prototype.any;
ImmutableArray1Double.prototype.all = List1Double.prototype.all;
ImmutableArray1Double.prototype.filter1 = List1Double.prototype.filter1;
ImmutableArray1Double.prototype.filterNot = List1Double.prototype.filterNot;
ImmutableArray1Double.prototype.filterNull = List1Double.prototype.filterNull;
ImmutableArray1Double.prototype.take = List1Double.prototype.take;
ImmutableArray1Double.prototype.takeLast = List1Double.prototype.takeLast;
ImmutableArray1Double.prototype.skipLast = List1Double.prototype.skipLast;
ImmutableArray1Double.prototype.skip = List1Double.prototype.skip;
ImmutableArray1Double.prototype.firstOr = List1Double.prototype.firstOr;
ImmutableArray1Double.prototype.firstOrThrow = List1Double.prototype.firstOrThrow;
ImmutableArray1Double.prototype.firstWhere = List1Double.prototype.firstWhere;
ImmutableArray1Double.prototype.firstNonNull = List1Double.prototype.firstNonNull;
ImmutableArray1Double.prototype.zip = List1Double.prototype.zip;
ImmutableArray1Double.prototype.sum = List1Double.prototype.sum;
ImmutableArray1Double.prototype.sum2 = List1Double.prototype.sum2;
ImmutableArray1Double.prototype.min = List1Double.prototype.min;
ImmutableArray1Double.prototype.max = List1Double.prototype.max;
ImmutableArray1Double.prototype.reverse = List1Double.prototype.reverse;
ImmutableArray1Double.prototype.reduce = List1Double.prototype.reduce;
ImmutableArray1Double.prototype.join = List1Double.prototype.join;
ImmutableArray1Double.prototype.stitch = List1Double.prototype.stitch;
ImmutableArray1Double.prototype.toEnglish = List1Double.prototype.toEnglish;
ImmutableArray1Double.prototype.toString = List1Double.prototype.toString;


ImmutableArray1Char._js_default_baseNovaObject = NovaObject._js_default;
ImmutableArray1Char.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableArray1Char.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

ImmutableArray1Char.prototype.contains = List1Char.prototype.contains;
ImmutableArray1Char.prototype.containsAny = List1Char.prototype.containsAny;
ImmutableArray1Char.prototype.any = List1Char.prototype.any;
ImmutableArray1Char.prototype.all = List1Char.prototype.all;
ImmutableArray1Char.prototype.filter1 = List1Char.prototype.filter1;
ImmutableArray1Char.prototype.filterNot = List1Char.prototype.filterNot;
ImmutableArray1Char.prototype.filterNull = List1Char.prototype.filterNull;
ImmutableArray1Char.prototype.take = List1Char.prototype.take;
ImmutableArray1Char.prototype.takeLast = List1Char.prototype.takeLast;
ImmutableArray1Char.prototype.skipLast = List1Char.prototype.skipLast;
ImmutableArray1Char.prototype.skip = List1Char.prototype.skip;
ImmutableArray1Char.prototype.firstOr = List1Char.prototype.firstOr;
ImmutableArray1Char.prototype.firstOrThrow = List1Char.prototype.firstOrThrow;
ImmutableArray1Char.prototype.firstWhere = List1Char.prototype.firstWhere;
ImmutableArray1Char.prototype.firstNonNull = List1Char.prototype.firstNonNull;
ImmutableArray1Char.prototype.zip = List1Char.prototype.zip;
ImmutableArray1Char.prototype.sum0 = List1Char.prototype.sum0;
ImmutableArray1Char.prototype.sum1 = List1Char.prototype.sum1;
ImmutableArray1Char.prototype.min = List1Char.prototype.min;
ImmutableArray1Char.prototype.max = List1Char.prototype.max;
ImmutableArray1Char.prototype.reverse = List1Char.prototype.reverse;
ImmutableArray1Char.prototype.reduce = List1Char.prototype.reduce;
ImmutableArray1Char.prototype.join = List1Char.prototype.join;
ImmutableArray1Char.prototype.stitch = List1Char.prototype.stitch;
ImmutableArray1Char.prototype.toEnglish = List1Char.prototype.toEnglish;
ImmutableArray1Char.prototype.toString = List1Char.prototype.toString;


ImmutableArray1Int._js_default_baseNovaObject = NovaObject._js_default;
ImmutableArray1Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableArray1Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

ImmutableArray1Int.prototype.contains = List1Int.prototype.contains;
ImmutableArray1Int.prototype.containsAny = List1Int.prototype.containsAny;
ImmutableArray1Int.prototype.any = List1Int.prototype.any;
ImmutableArray1Int.prototype.all = List1Int.prototype.all;
ImmutableArray1Int.prototype.filter1 = List1Int.prototype.filter1;
ImmutableArray1Int.prototype.filterNot = List1Int.prototype.filterNot;
ImmutableArray1Int.prototype.filterNull = List1Int.prototype.filterNull;
ImmutableArray1Int.prototype.take = List1Int.prototype.take;
ImmutableArray1Int.prototype.takeLast = List1Int.prototype.takeLast;
ImmutableArray1Int.prototype.skipLast = List1Int.prototype.skipLast;
ImmutableArray1Int.prototype.skip = List1Int.prototype.skip;
ImmutableArray1Int.prototype.firstOr = List1Int.prototype.firstOr;
ImmutableArray1Int.prototype.firstOrThrow = List1Int.prototype.firstOrThrow;
ImmutableArray1Int.prototype.firstWhere = List1Int.prototype.firstWhere;
ImmutableArray1Int.prototype.firstNonNull = List1Int.prototype.firstNonNull;
ImmutableArray1Int.prototype.zip = List1Int.prototype.zip;
ImmutableArray1Int.prototype.sum0 = List1Int.prototype.sum0;
ImmutableArray1Int.prototype.sum1 = List1Int.prototype.sum1;
ImmutableArray1Int.prototype.min = List1Int.prototype.min;
ImmutableArray1Int.prototype.max = List1Int.prototype.max;
ImmutableArray1Int.prototype.reverse = List1Int.prototype.reverse;
ImmutableArray1Int.prototype.reduce = List1Int.prototype.reduce;
ImmutableArray1Int.prototype.join = List1Int.prototype.join;
ImmutableArray1Int.prototype.stitch = List1Int.prototype.stitch;
ImmutableArray1Int.prototype.toEnglish = List1Int.prototype.toEnglish;
ImmutableArray1Int.prototype.toString = List1Int.prototype.toString;


ImmutableArray1Byte._js_default_baseNovaObject = NovaObject._js_default;
ImmutableArray1Byte.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableArray1Byte.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

ImmutableArray1Byte.prototype.contains = List1Byte.prototype.contains;
ImmutableArray1Byte.prototype.containsAny = List1Byte.prototype.containsAny;
ImmutableArray1Byte.prototype.any = List1Byte.prototype.any;
ImmutableArray1Byte.prototype.all = List1Byte.prototype.all;
ImmutableArray1Byte.prototype.filter1 = List1Byte.prototype.filter1;
ImmutableArray1Byte.prototype.filterNot = List1Byte.prototype.filterNot;
ImmutableArray1Byte.prototype.filterNull = List1Byte.prototype.filterNull;
ImmutableArray1Byte.prototype.take = List1Byte.prototype.take;
ImmutableArray1Byte.prototype.takeLast = List1Byte.prototype.takeLast;
ImmutableArray1Byte.prototype.skipLast = List1Byte.prototype.skipLast;
ImmutableArray1Byte.prototype.skip = List1Byte.prototype.skip;
ImmutableArray1Byte.prototype.firstOr = List1Byte.prototype.firstOr;
ImmutableArray1Byte.prototype.firstOrThrow = List1Byte.prototype.firstOrThrow;
ImmutableArray1Byte.prototype.firstWhere = List1Byte.prototype.firstWhere;
ImmutableArray1Byte.prototype.firstNonNull = List1Byte.prototype.firstNonNull;
ImmutableArray1Byte.prototype.zip = List1Byte.prototype.zip;
ImmutableArray1Byte.prototype.sum0 = List1Byte.prototype.sum0;
ImmutableArray1Byte.prototype.sum1 = List1Byte.prototype.sum1;
ImmutableArray1Byte.prototype.min = List1Byte.prototype.min;
ImmutableArray1Byte.prototype.max = List1Byte.prototype.max;
ImmutableArray1Byte.prototype.reverse = List1Byte.prototype.reverse;
ImmutableArray1Byte.prototype.reduce = List1Byte.prototype.reduce;
ImmutableArray1Byte.prototype.join = List1Byte.prototype.join;
ImmutableArray1Byte.prototype.stitch = List1Byte.prototype.stitch;
ImmutableArray1Byte.prototype.toEnglish = List1Byte.prototype.toEnglish;
ImmutableArray1Byte.prototype.toString = List1Byte.prototype.toString;


ImmutableArray1Long._js_default_baseNovaObject = NovaObject._js_default;
ImmutableArray1Long.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableArray1Long.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

ImmutableArray1Long.prototype.contains = List1Long.prototype.contains;
ImmutableArray1Long.prototype.containsAny = List1Long.prototype.containsAny;
ImmutableArray1Long.prototype.any = List1Long.prototype.any;
ImmutableArray1Long.prototype.all = List1Long.prototype.all;
ImmutableArray1Long.prototype.filter1 = List1Long.prototype.filter1;
ImmutableArray1Long.prototype.filterNot = List1Long.prototype.filterNot;
ImmutableArray1Long.prototype.filterNull = List1Long.prototype.filterNull;
ImmutableArray1Long.prototype.take = List1Long.prototype.take;
ImmutableArray1Long.prototype.takeLast = List1Long.prototype.takeLast;
ImmutableArray1Long.prototype.skipLast = List1Long.prototype.skipLast;
ImmutableArray1Long.prototype.skip = List1Long.prototype.skip;
ImmutableArray1Long.prototype.firstOr = List1Long.prototype.firstOr;
ImmutableArray1Long.prototype.firstOrThrow = List1Long.prototype.firstOrThrow;
ImmutableArray1Long.prototype.firstWhere = List1Long.prototype.firstWhere;
ImmutableArray1Long.prototype.firstNonNull = List1Long.prototype.firstNonNull;
ImmutableArray1Long.prototype.zip = List1Long.prototype.zip;
ImmutableArray1Long.prototype.sum0 = List1Long.prototype.sum0;
ImmutableArray1Long.prototype.sum1 = List1Long.prototype.sum1;
ImmutableArray1Long.prototype.min = List1Long.prototype.min;
ImmutableArray1Long.prototype.max = List1Long.prototype.max;
ImmutableArray1Long.prototype.reverse = List1Long.prototype.reverse;
ImmutableArray1Long.prototype.reduce = List1Long.prototype.reduce;
ImmutableArray1Long.prototype.join = List1Long.prototype.join;
ImmutableArray1Long.prototype.stitch = List1Long.prototype.stitch;
ImmutableArray1Long.prototype.toEnglish = List1Long.prototype.toEnglish;
ImmutableArray1Long.prototype.toString = List1Long.prototype.toString;


ImmutableArrayIterator._js_default_baseNovaObject = NovaObject._js_default;
ImmutableArrayIterator.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableArrayIterator.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ImmutableArrayIterator1Double._js_default_baseNovaObject = NovaObject._js_default;
ImmutableArrayIterator1Double.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableArrayIterator1Double.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ImmutableArrayIterator1Char._js_default_baseNovaObject = NovaObject._js_default;
ImmutableArrayIterator1Char.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableArrayIterator1Char.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ImmutableArrayIterator1Int._js_default_baseNovaObject = NovaObject._js_default;
ImmutableArrayIterator1Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableArrayIterator1Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ImmutableArrayIterator1Byte._js_default_baseNovaObject = NovaObject._js_default;
ImmutableArrayIterator1Byte.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableArrayIterator1Byte.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ImmutableArrayIterator1Long._js_default_baseNovaObject = NovaObject._js_default;
ImmutableArrayIterator1Long.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableArrayIterator1Long.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ImmutableCharArray._js_default_baseNovaObject = NovaObject._js_default;
ImmutableCharArray.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableCharArray.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ImmutableCharArrayIterator._js_default_baseNovaObject = NovaObject._js_default;
ImmutableCharArrayIterator.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableCharArrayIterator.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



IntArray.prototype.fillRemaining_baseNovaArray = NovaArray.prototype.fillRemaining;
IntArray.prototype.plus0_baseNovaArray = NovaArray.prototype.plus0;
IntArray.prototype.plusEquals0_baseNovaArray = NovaArray.prototype.plusEquals0;
IntArray.prototype.addAll_baseNovaArray = NovaArray.prototype.addAll;
IntArray.prototype.addUnique_baseNovaArray = NovaArray.prototype.addUnique;
IntArray.prototype.add0_baseNovaArray = NovaArray.prototype.add0;
IntArray.prototype.add1_baseNovaArray = NovaArray.prototype.add1;
IntArray.prototype.remove0_baseNovaArray = NovaArray.prototype.remove0;
IntArray.prototype.remove1_baseNovaArray = NovaArray.prototype.remove1;
IntArray.prototype.replace_baseNovaArray = NovaArray.prototype.replace;
IntArray.prototype.shiftRight_baseNovaArray = NovaArray.prototype.shiftRight;
IntArray.prototype.shiftLeft_baseNovaArray = NovaArray.prototype.shiftLeft;
IntArray.prototype.swap_baseNovaArray = NovaArray.prototype.swap;
IntArray.prototype.increaseSize0_baseNovaArray = NovaArray.prototype.increaseSize0;
IntArray.prototype.increaseSize1_baseNovaArray = NovaArray.prototype.increaseSize1;
IntArray.prototype.cloneData_baseNovaArray = NovaArray.prototype.cloneData;
IntArray.prototype.clone_baseNovaArray = NovaArray.prototype.clone;
IntArray.prototype.toArray_baseNovaArray = NovaArray.prototype.toArray;
IntArray.prototype.map0_baseNovaArray = NovaArray.prototype.map0;
IntArray.prototype.forEach0_baseNovaArray = NovaArray.prototype.forEach0;
IntArray.prototype.filter0_baseNovaArray = NovaArray.prototype.filter0;
IntArray.prototype.take_baseNovaArray = NovaArray.prototype.take;
IntArray.prototype.skip_baseNovaArray = NovaArray.prototype.skip;
IntArray.prototype.sumSize_baseNovaArray = NovaArray.prototype.sumSize;
IntArray.prototype.reverse_baseNovaArray = NovaArray.prototype.reverse;
IntArray.prototype.mergeSort0_baseNovaArray = NovaArray.prototype.mergeSort0;
IntArray.prototype.quickSort0_baseNovaArray = NovaArray.prototype.quickSort0;
IntArray.quickSortHelper_baseNovaArray = NovaArray.quickSortHelper;
IntArray.partition_baseNovaArray = NovaArray.partition;
IntArray.prototype.mergeSort1_baseNovaArray = NovaArray.prototype.mergeSort1;
IntArray.prototype.quickSort1_baseNovaArray = NovaArray.prototype.quickSort1;
IntArray.prototype.sort0_baseNovaArray = NovaArray.prototype.sort0;
IntArray.prototype.sort1_baseNovaArray = NovaArray.prototype.sort1;
IntArray.prototype.toImmutable_baseNovaArray = NovaArray.prototype.toImmutable;
IntArray.prototype.toString_baseNovaArray = NovaArray.prototype.toString;
IntArray.prototype.get_baseNovaArray = NovaArray.prototype.get;
IntArray.prototype.set0_baseNovaArray = NovaArray.prototype.set0;
IntArray.prototype.set1_baseNovaArray = NovaArray.prototype.set1;



IntArrayIterator._js_default_baseNovaObject = NovaObject._js_default;
IntArrayIterator.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
IntArrayIterator.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



IntRange._js_default_baseNovaObject = NovaObject._js_default;
IntRange.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
IntRange.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

IntRange.prototype.containsAny = List.prototype.containsAny;
IntRange.prototype.forEach0 = List.prototype.forEach0;
IntRange.prototype.map0 = List.prototype.map0;
IntRange.prototype.any0 = List.prototype.any0;
IntRange.prototype.all0 = List.prototype.all0;
IntRange.prototype.filter0 = List.prototype.filter0;
IntRange.prototype.filterNot = List.prototype.filterNot;
IntRange.prototype.filterNull = List.prototype.filterNull;
IntRange.prototype.filterEmpty = List.prototype.filterEmpty;
IntRange.prototype.take = List.prototype.take;
IntRange.prototype.takeLast = List.prototype.takeLast;
IntRange.prototype.skipLast = List.prototype.skipLast;
IntRange.prototype.skip = List.prototype.skip;
IntRange.prototype.firstOr = List.prototype.firstOr;
IntRange.prototype.firstOrThrow = List.prototype.firstOrThrow;
IntRange.prototype.firstWhere0 = List.prototype.firstWhere0;
IntRange.prototype.firstNonNull = List.prototype.firstNonNull;
IntRange.prototype.zip0 = List.prototype.zip0;
IntRange.prototype.sum0 = List.prototype.sum0;
IntRange.prototype.sum1 = List.prototype.sum1;
IntRange.prototype.min = List.prototype.min;
IntRange.prototype.max = List.prototype.max;
IntRange.prototype.reduce = List.prototype.reduce;
IntRange.prototype.join = List.prototype.join;
IntRange.prototype.stitch = List.prototype.stitch;
IntRange.prototype.toEnglish = List.prototype.toEnglish;
IntRange.prototype.toString = List.prototype.toString;
IntRange.prototype.zip1 = List.prototype.zip1;


IntRangeIterator._js_default_baseNovaObject = NovaObject._js_default;
IntRangeIterator.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
IntRangeIterator.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



























LinkedList._js_default_baseNovaObject = NovaObject._js_default;
LinkedList.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
LinkedList.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

LinkedList.prototype.containsAny = List.prototype.containsAny;
LinkedList.prototype.filterNot = List.prototype.filterNot;
LinkedList.prototype.filterNull = List.prototype.filterNull;
LinkedList.prototype.filterEmpty = List.prototype.filterEmpty;
LinkedList.prototype.takeLast = List.prototype.takeLast;
LinkedList.prototype.skipLast = List.prototype.skipLast;
LinkedList.prototype.firstOr = List.prototype.firstOr;
LinkedList.prototype.firstOrThrow = List.prototype.firstOrThrow;
LinkedList.prototype.firstNonNull = List.prototype.firstNonNull;
LinkedList.prototype.zip0 = List.prototype.zip0;
LinkedList.prototype.sum0 = List.prototype.sum0;
LinkedList.prototype.sum1 = List.prototype.sum1;
LinkedList.prototype.min = List.prototype.min;
LinkedList.prototype.max = List.prototype.max;
LinkedList.prototype.reduce = List.prototype.reduce;
LinkedList.prototype.join = List.prototype.join;
LinkedList.prototype.stitch = List.prototype.stitch;
LinkedList.prototype.toEnglish = List.prototype.toEnglish;
LinkedList.prototype.toString = List.prototype.toString;
LinkedList.prototype.zip1 = List.prototype.zip1;


LinkedListIterator._js_default_baseNovaObject = NovaObject._js_default;
LinkedListIterator.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
LinkedListIterator.prototype.toString_baseNovaObject = NovaObject.prototype.toString;















ListNode._js_default_baseNovaObject = NovaObject._js_default;
ListNode.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ListNode.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



OrderedList.prototype.toArray = List.prototype.toArray;
OrderedList.prototype.contains0 = List.prototype.contains0;
OrderedList.prototype.containsAny = List.prototype.containsAny;
OrderedList.prototype.forEach0 = List.prototype.forEach0;
OrderedList.prototype.map0 = List.prototype.map0;
OrderedList.prototype.any0 = List.prototype.any0;
OrderedList.prototype.all0 = List.prototype.all0;
OrderedList.prototype.filter0 = List.prototype.filter0;
OrderedList.prototype.filterNot = List.prototype.filterNot;
OrderedList.prototype.filterNull = List.prototype.filterNull;
OrderedList.prototype.filterEmpty = List.prototype.filterEmpty;
OrderedList.prototype.take = List.prototype.take;
OrderedList.prototype.takeLast = List.prototype.takeLast;
OrderedList.prototype.skipLast = List.prototype.skipLast;
OrderedList.prototype.skip = List.prototype.skip;
OrderedList.prototype.firstOr = List.prototype.firstOr;
OrderedList.prototype.firstOrThrow = List.prototype.firstOrThrow;
OrderedList.prototype.firstWhere0 = List.prototype.firstWhere0;
OrderedList.prototype.firstNonNull = List.prototype.firstNonNull;
OrderedList.prototype.zip0 = List.prototype.zip0;
OrderedList.prototype.sum0 = List.prototype.sum0;
OrderedList.prototype.sum1 = List.prototype.sum1;
OrderedList.prototype.min = List.prototype.min;
OrderedList.prototype.max = List.prototype.max;
OrderedList.prototype.reverse = List.prototype.reverse;
OrderedList.prototype.reduce = List.prototype.reduce;
OrderedList.prototype.join = List.prototype.join;
OrderedList.prototype.stitch = List.prototype.stitch;
OrderedList.prototype.toEnglish = List.prototype.toEnglish;
OrderedList.prototype.toString = List.prototype.toString;
OrderedList.prototype.zip1 = List.prototype.zip1;


OrderedList1Double.prototype.toArray = List1Double.prototype.toArray;
OrderedList1Double.prototype.contains = List1Double.prototype.contains;
OrderedList1Double.prototype.containsAny = List1Double.prototype.containsAny;
OrderedList1Double.prototype.forEach1 = List1Double.prototype.forEach1;
OrderedList1Double.prototype.map4 = List1Double.prototype.map4;
OrderedList1Double.prototype.any = List1Double.prototype.any;
OrderedList1Double.prototype.all = List1Double.prototype.all;
OrderedList1Double.prototype.filter1 = List1Double.prototype.filter1;
OrderedList1Double.prototype.filterNot = List1Double.prototype.filterNot;
OrderedList1Double.prototype.filterNull = List1Double.prototype.filterNull;
OrderedList1Double.prototype.take = List1Double.prototype.take;
OrderedList1Double.prototype.takeLast = List1Double.prototype.takeLast;
OrderedList1Double.prototype.skipLast = List1Double.prototype.skipLast;
OrderedList1Double.prototype.skip = List1Double.prototype.skip;
OrderedList1Double.prototype.firstOr = List1Double.prototype.firstOr;
OrderedList1Double.prototype.firstOrThrow = List1Double.prototype.firstOrThrow;
OrderedList1Double.prototype.firstWhere = List1Double.prototype.firstWhere;
OrderedList1Double.prototype.firstNonNull = List1Double.prototype.firstNonNull;
OrderedList1Double.prototype.zip = List1Double.prototype.zip;
OrderedList1Double.prototype.sum = List1Double.prototype.sum;
OrderedList1Double.prototype.sum2 = List1Double.prototype.sum2;
OrderedList1Double.prototype.min = List1Double.prototype.min;
OrderedList1Double.prototype.max = List1Double.prototype.max;
OrderedList1Double.prototype.reverse = List1Double.prototype.reverse;
OrderedList1Double.prototype.reduce = List1Double.prototype.reduce;
OrderedList1Double.prototype.join = List1Double.prototype.join;
OrderedList1Double.prototype.stitch = List1Double.prototype.stitch;
OrderedList1Double.prototype.toEnglish = List1Double.prototype.toEnglish;
OrderedList1Double.prototype.toString = List1Double.prototype.toString;


OrderedList1Char.prototype.toArray = List1Char.prototype.toArray;
OrderedList1Char.prototype.contains = List1Char.prototype.contains;
OrderedList1Char.prototype.containsAny = List1Char.prototype.containsAny;
OrderedList1Char.prototype.forEach1 = List1Char.prototype.forEach1;
OrderedList1Char.prototype.map1 = List1Char.prototype.map1;
OrderedList1Char.prototype.any = List1Char.prototype.any;
OrderedList1Char.prototype.all = List1Char.prototype.all;
OrderedList1Char.prototype.filter1 = List1Char.prototype.filter1;
OrderedList1Char.prototype.filterNot = List1Char.prototype.filterNot;
OrderedList1Char.prototype.filterNull = List1Char.prototype.filterNull;
OrderedList1Char.prototype.take = List1Char.prototype.take;
OrderedList1Char.prototype.takeLast = List1Char.prototype.takeLast;
OrderedList1Char.prototype.skipLast = List1Char.prototype.skipLast;
OrderedList1Char.prototype.skip = List1Char.prototype.skip;
OrderedList1Char.prototype.firstOr = List1Char.prototype.firstOr;
OrderedList1Char.prototype.firstOrThrow = List1Char.prototype.firstOrThrow;
OrderedList1Char.prototype.firstWhere = List1Char.prototype.firstWhere;
OrderedList1Char.prototype.firstNonNull = List1Char.prototype.firstNonNull;
OrderedList1Char.prototype.zip = List1Char.prototype.zip;
OrderedList1Char.prototype.sum0 = List1Char.prototype.sum0;
OrderedList1Char.prototype.sum1 = List1Char.prototype.sum1;
OrderedList1Char.prototype.min = List1Char.prototype.min;
OrderedList1Char.prototype.max = List1Char.prototype.max;
OrderedList1Char.prototype.reverse = List1Char.prototype.reverse;
OrderedList1Char.prototype.reduce = List1Char.prototype.reduce;
OrderedList1Char.prototype.join = List1Char.prototype.join;
OrderedList1Char.prototype.stitch = List1Char.prototype.stitch;
OrderedList1Char.prototype.toEnglish = List1Char.prototype.toEnglish;
OrderedList1Char.prototype.toString = List1Char.prototype.toString;


OrderedList1Int.prototype.toArray = List1Int.prototype.toArray;
OrderedList1Int.prototype.contains = List1Int.prototype.contains;
OrderedList1Int.prototype.containsAny = List1Int.prototype.containsAny;
OrderedList1Int.prototype.forEach1 = List1Int.prototype.forEach1;
OrderedList1Int.prototype.map1 = List1Int.prototype.map1;
OrderedList1Int.prototype.any = List1Int.prototype.any;
OrderedList1Int.prototype.all = List1Int.prototype.all;
OrderedList1Int.prototype.filter1 = List1Int.prototype.filter1;
OrderedList1Int.prototype.filterNot = List1Int.prototype.filterNot;
OrderedList1Int.prototype.filterNull = List1Int.prototype.filterNull;
OrderedList1Int.prototype.take = List1Int.prototype.take;
OrderedList1Int.prototype.takeLast = List1Int.prototype.takeLast;
OrderedList1Int.prototype.skipLast = List1Int.prototype.skipLast;
OrderedList1Int.prototype.skip = List1Int.prototype.skip;
OrderedList1Int.prototype.firstOr = List1Int.prototype.firstOr;
OrderedList1Int.prototype.firstOrThrow = List1Int.prototype.firstOrThrow;
OrderedList1Int.prototype.firstWhere = List1Int.prototype.firstWhere;
OrderedList1Int.prototype.firstNonNull = List1Int.prototype.firstNonNull;
OrderedList1Int.prototype.zip = List1Int.prototype.zip;
OrderedList1Int.prototype.sum0 = List1Int.prototype.sum0;
OrderedList1Int.prototype.sum1 = List1Int.prototype.sum1;
OrderedList1Int.prototype.min = List1Int.prototype.min;
OrderedList1Int.prototype.max = List1Int.prototype.max;
OrderedList1Int.prototype.reverse = List1Int.prototype.reverse;
OrderedList1Int.prototype.reduce = List1Int.prototype.reduce;
OrderedList1Int.prototype.join = List1Int.prototype.join;
OrderedList1Int.prototype.stitch = List1Int.prototype.stitch;
OrderedList1Int.prototype.toEnglish = List1Int.prototype.toEnglish;
OrderedList1Int.prototype.toString = List1Int.prototype.toString;


OrderedList1Byte.prototype.toArray = List1Byte.prototype.toArray;
OrderedList1Byte.prototype.contains = List1Byte.prototype.contains;
OrderedList1Byte.prototype.containsAny = List1Byte.prototype.containsAny;
OrderedList1Byte.prototype.forEach1 = List1Byte.prototype.forEach1;
OrderedList1Byte.prototype.map1 = List1Byte.prototype.map1;
OrderedList1Byte.prototype.any = List1Byte.prototype.any;
OrderedList1Byte.prototype.all = List1Byte.prototype.all;
OrderedList1Byte.prototype.filter1 = List1Byte.prototype.filter1;
OrderedList1Byte.prototype.filterNot = List1Byte.prototype.filterNot;
OrderedList1Byte.prototype.filterNull = List1Byte.prototype.filterNull;
OrderedList1Byte.prototype.take = List1Byte.prototype.take;
OrderedList1Byte.prototype.takeLast = List1Byte.prototype.takeLast;
OrderedList1Byte.prototype.skipLast = List1Byte.prototype.skipLast;
OrderedList1Byte.prototype.skip = List1Byte.prototype.skip;
OrderedList1Byte.prototype.firstOr = List1Byte.prototype.firstOr;
OrderedList1Byte.prototype.firstOrThrow = List1Byte.prototype.firstOrThrow;
OrderedList1Byte.prototype.firstWhere = List1Byte.prototype.firstWhere;
OrderedList1Byte.prototype.firstNonNull = List1Byte.prototype.firstNonNull;
OrderedList1Byte.prototype.zip = List1Byte.prototype.zip;
OrderedList1Byte.prototype.sum0 = List1Byte.prototype.sum0;
OrderedList1Byte.prototype.sum1 = List1Byte.prototype.sum1;
OrderedList1Byte.prototype.min = List1Byte.prototype.min;
OrderedList1Byte.prototype.max = List1Byte.prototype.max;
OrderedList1Byte.prototype.reverse = List1Byte.prototype.reverse;
OrderedList1Byte.prototype.reduce = List1Byte.prototype.reduce;
OrderedList1Byte.prototype.join = List1Byte.prototype.join;
OrderedList1Byte.prototype.stitch = List1Byte.prototype.stitch;
OrderedList1Byte.prototype.toEnglish = List1Byte.prototype.toEnglish;
OrderedList1Byte.prototype.toString = List1Byte.prototype.toString;


OrderedList1Long.prototype.toArray = List1Long.prototype.toArray;
OrderedList1Long.prototype.contains = List1Long.prototype.contains;
OrderedList1Long.prototype.containsAny = List1Long.prototype.containsAny;
OrderedList1Long.prototype.forEach1 = List1Long.prototype.forEach1;
OrderedList1Long.prototype.map1 = List1Long.prototype.map1;
OrderedList1Long.prototype.any = List1Long.prototype.any;
OrderedList1Long.prototype.all = List1Long.prototype.all;
OrderedList1Long.prototype.filter1 = List1Long.prototype.filter1;
OrderedList1Long.prototype.filterNot = List1Long.prototype.filterNot;
OrderedList1Long.prototype.filterNull = List1Long.prototype.filterNull;
OrderedList1Long.prototype.take = List1Long.prototype.take;
OrderedList1Long.prototype.takeLast = List1Long.prototype.takeLast;
OrderedList1Long.prototype.skipLast = List1Long.prototype.skipLast;
OrderedList1Long.prototype.skip = List1Long.prototype.skip;
OrderedList1Long.prototype.firstOr = List1Long.prototype.firstOr;
OrderedList1Long.prototype.firstOrThrow = List1Long.prototype.firstOrThrow;
OrderedList1Long.prototype.firstWhere = List1Long.prototype.firstWhere;
OrderedList1Long.prototype.firstNonNull = List1Long.prototype.firstNonNull;
OrderedList1Long.prototype.zip = List1Long.prototype.zip;
OrderedList1Long.prototype.sum0 = List1Long.prototype.sum0;
OrderedList1Long.prototype.sum1 = List1Long.prototype.sum1;
OrderedList1Long.prototype.min = List1Long.prototype.min;
OrderedList1Long.prototype.max = List1Long.prototype.max;
OrderedList1Long.prototype.reverse = List1Long.prototype.reverse;
OrderedList1Long.prototype.reduce = List1Long.prototype.reduce;
OrderedList1Long.prototype.join = List1Long.prototype.join;
OrderedList1Long.prototype.stitch = List1Long.prototype.stitch;
OrderedList1Long.prototype.toEnglish = List1Long.prototype.toEnglish;
OrderedList1Long.prototype.toString = List1Long.prototype.toString;


Queue._js_default_baseNovaObject = NovaObject._js_default;
Queue.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Queue.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

Queue.prototype.toArray = List.prototype.toArray;
Queue.prototype.contains0 = List.prototype.contains0;
Queue.prototype.containsAny = List.prototype.containsAny;
Queue.prototype.forEach0 = List.prototype.forEach0;
Queue.prototype.map0 = List.prototype.map0;
Queue.prototype.any0 = List.prototype.any0;
Queue.prototype.all0 = List.prototype.all0;
Queue.prototype.filter0 = List.prototype.filter0;
Queue.prototype.filterNot = List.prototype.filterNot;
Queue.prototype.filterNull = List.prototype.filterNull;
Queue.prototype.filterEmpty = List.prototype.filterEmpty;
Queue.prototype.take = List.prototype.take;
Queue.prototype.takeLast = List.prototype.takeLast;
Queue.prototype.skipLast = List.prototype.skipLast;
Queue.prototype.skip = List.prototype.skip;
Queue.prototype.firstOr = List.prototype.firstOr;
Queue.prototype.firstOrThrow = List.prototype.firstOrThrow;
Queue.prototype.firstWhere0 = List.prototype.firstWhere0;
Queue.prototype.firstNonNull = List.prototype.firstNonNull;
Queue.prototype.zip0 = List.prototype.zip0;
Queue.prototype.sum0 = List.prototype.sum0;
Queue.prototype.sum1 = List.prototype.sum1;
Queue.prototype.min = List.prototype.min;
Queue.prototype.max = List.prototype.max;
Queue.prototype.reduce = List.prototype.reduce;
Queue.prototype.join = List.prototype.join;
Queue.prototype.stitch = List.prototype.stitch;
Queue.prototype.toEnglish = List.prototype.toEnglish;
Queue.prototype.toString = List.prototype.toString;
Queue.prototype.zip1 = List.prototype.zip1;


Stack._js_default_baseNovaObject = NovaObject._js_default;
Stack.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Stack.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



StringCharArray._js_default_baseNovaObject = NovaObject._js_default;
StringCharArray.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
StringCharArray.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



SubstringCharArray._js_default_baseNovaObject = NovaObject._js_default;
SubstringCharArray.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
SubstringCharArray.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Backtraces._js_default_baseNovaObject = NovaObject._js_default;
Backtraces.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Backtraces.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



CaughtException._js_default_baseNovaObject = NovaObject._js_default;
CaughtException.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
CaughtException.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



DivideByZeroException.prototype.toString_baseException = Exception.prototype.toString;
DivideByZeroException.prototype.onThrown_baseException = Exception.prototype.onThrown;
DivideByZeroException.catchType_baseException = Exception.catchType;



ExceptionData._js_default_baseNovaObject = NovaObject._js_default;
ExceptionData.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ExceptionData.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



InvalidArgumentException.prototype.toString_baseException = Exception.prototype.toString;
InvalidArgumentException.prototype.onThrown_baseException = Exception.prototype.onThrown;
InvalidArgumentException.catchType_baseException = Exception.catchType;



InvalidOperationException.prototype.toString_baseException = Exception.prototype.toString;
InvalidOperationException.prototype.onThrown_baseException = Exception.prototype.onThrown;
InvalidOperationException.catchType_baseException = Exception.catchType;



NullAccessException.prototype.toString_baseException = Exception.prototype.toString;
NullAccessException.prototype.onThrown_baseException = Exception.prototype.onThrown;
NullAccessException.catchType_baseException = Exception.catchType;



StackTrace._js_default_baseNovaObject = NovaObject._js_default;
StackTrace.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
StackTrace.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



UnimplementedOperationException.prototype.toString_baseException = Exception.prototype.toString;
UnimplementedOperationException.prototype.onThrown_baseException = Exception.prototype.onThrown;
UnimplementedOperationException.catchType_baseException = Exception.catchType;






GC._js_default_baseNovaObject = NovaObject._js_default;
GC.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
GC.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ClosedStreamException.prototype.toString_baseException = Exception.prototype.toString;
ClosedStreamException.prototype.onThrown_baseException = Exception.prototype.onThrown;
ClosedStreamException.catchType_baseException = Exception.catchType;



NovaConsole._js_default_baseNovaObject = NovaObject._js_default;
NovaConsole.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NovaConsole.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Curl._js_default_baseNovaObject = NovaObject._js_default;
Curl.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Curl.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



EmptyOutputStream._js_default_baseNovaObject = NovaObject._js_default;
EmptyOutputStream.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
EmptyOutputStream.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

EmptyOutputStream.prototype.write = OutputStream.prototype.write;
EmptyOutputStream.prototype.writeLine = OutputStream.prototype.writeLine;


FancyOutputStream._js_default_baseNovaObject = NovaObject._js_default;
FancyOutputStream.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
FancyOutputStream.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



File._js_default_baseNovaObject = NovaObject._js_default;
File.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
File.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



FileNotFoundException.prototype.toString_baseException = Exception.prototype.toString;
FileNotFoundException.prototype.onThrown_baseException = Exception.prototype.onThrown;
FileNotFoundException.catchType_baseException = Exception.catchType;



FileReader._js_default_baseNovaObject = NovaObject._js_default;
FileReader.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
FileReader.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



FileWriter._js_default_baseNovaObject = NovaObject._js_default;
FileWriter.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
FileWriter.prototype.toString_baseNovaObject = NovaObject.prototype.toString;







StreamReader._js_default_baseNovaObject = NovaObject._js_default;
StreamReader.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
StreamReader.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



StringBuilder._js_default_baseNovaObject = NovaObject._js_default;
StringBuilder.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
StringBuilder.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

StringBuilder.prototype.writeLine = OutputStream.prototype.writeLine;


Sequence._js_default_baseNovaObject = NovaObject._js_default;
Sequence.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Sequence.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ArithmeticSequence.sum_baseSequence = Sequence.sum;



Diekstra._js_default_baseNovaObject = NovaObject._js_default;
Diekstra.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Diekstra.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



GeometricSequence._js_default_baseNovaObject = NovaObject._js_default;
GeometricSequence.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
GeometricSequence.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Graph._js_default_baseNovaObject = NovaObject._js_default;
Graph.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Graph.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



InvalidNumericStatementException.prototype.toString_baseException = Exception.prototype.toString;
InvalidNumericStatementException.prototype.onThrown_baseException = Exception.prototype.onThrown;
InvalidNumericStatementException.catchType_baseException = Exception.catchType;



NovaMath._js_default_baseNovaObject = NovaObject._js_default;
NovaMath.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NovaMath.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Matrix._js_default_baseNovaObject = NovaObject._js_default;
Matrix.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Matrix.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



NumericOperand._js_default_baseNovaObject = NovaObject._js_default;
NumericOperand.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NumericOperand.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



NumericOperation.prototype.toString_baseNumericOperand = NumericOperand.prototype.toString;



Statement._js_default_baseNovaObject = NovaObject._js_default;
Statement.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Statement.prototype.toString_baseNovaObject = NovaObject.prototype.toString;






NumericTree._js_default_baseNovaObject = NovaObject._js_default;
NumericTree.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NumericTree.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Polynomial._js_default_baseNovaObject = NovaObject._js_default;
Polynomial.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Polynomial.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



StatementComponent._js_default_baseNovaObject = NovaObject._js_default;
StatementComponent.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
StatementComponent.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



VariableOperand._js_default_baseNovaObject = NovaObject._js_default;
VariableOperand.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
VariableOperand.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Vector._js_default_baseNovaObject = NovaObject._js_default;
Vector.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Vector.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Vector2D.prototype.dotProduct_baseVector = Vector.prototype.dotProduct;
Vector2D.prototype.innerProduct_baseVector = Vector.prototype.innerProduct;
Vector2D.prototype.scale_baseVector = Vector.prototype.scale;
Vector2D.prototype.normalize_baseVector = Vector.prototype.normalize;
Vector2D.prototype.toString_baseVector = Vector.prototype.toString;



Vector3D.prototype.dotProduct_baseVector = Vector.prototype.dotProduct;
Vector3D.prototype.innerProduct_baseVector = Vector.prototype.innerProduct;
Vector3D.prototype.scale_baseVector = Vector.prototype.scale;
Vector3D.prototype.normalize_baseVector = Vector.prototype.normalize;
Vector3D.prototype.toString_baseVector = Vector.prototype.toString;



Vector4D.prototype.dotProduct_baseVector = Vector.prototype.dotProduct;
Vector4D.prototype.innerProduct_baseVector = Vector.prototype.innerProduct;
Vector4D.prototype.scale_baseVector = Vector.prototype.scale;
Vector4D.prototype.normalize_baseVector = Vector.prototype.normalize;
Vector4D.prototype.toString_baseVector = Vector.prototype.toString;



Calculus._js_default_baseNovaObject = NovaObject._js_default;
Calculus.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Calculus.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



HuffmanTree.prototype.preorder_baseTree = Tree.prototype.preorder;
HuffmanTree.prototype.inorder_baseTree = Tree.prototype.inorder;
HuffmanTree.prototype.postorder_baseTree = Tree.prototype.postorder;
HuffmanTree.prototype.levelorder_baseTree = Tree.prototype.levelorder;






Conclusion.prototype.toString_baseLogicalStatement = LogicalStatement.prototype.toString;



Hypothesis.prototype.toString_baseLogicalStatement = LogicalStatement.prototype.toString;



InvalidFormulaException.prototype.toString_baseException = Exception.prototype.toString;
InvalidFormulaException.prototype.onThrown_baseException = Exception.prototype.onThrown;
InvalidFormulaException.catchType_baseException = Exception.catchType;



StatementComponent._js_default_baseNovaObject = NovaObject._js_default;
StatementComponent.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
StatementComponent.prototype.toString_baseNovaObject = NovaObject.prototype.toString;






StatementGroup._js_default_baseNovaObject = NovaObject._js_default;
StatementGroup.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
StatementGroup.prototype.toString_baseNovaObject = NovaObject.prototype.toString;






WFF._js_default_baseNovaObject = NovaObject._js_default;
WFF.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
WFF.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Class._js_default_baseNovaObject = NovaObject._js_default;
Class.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Class.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Field._js_default_baseNovaObject = NovaObject._js_default;
Field.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Field.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



FunctionMap._js_default_baseNovaObject = NovaObject._js_default;
FunctionMap.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
FunctionMap.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



GenericArgument._js_default_baseNovaObject = NovaObject._js_default;
GenericArgument.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
GenericArgument.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



GenericParameter._js_default_baseNovaObject = NovaObject._js_default;
GenericParameter.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
GenericParameter.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



InvalidLibraryException.prototype.toString_baseException = Exception.prototype.toString;
InvalidLibraryException.prototype.onThrown_baseException = Exception.prototype.onThrown;
InvalidLibraryException.catchType_baseException = Exception.catchType;



Library._js_default_baseNovaObject = NovaObject._js_default;
Library.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Library.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



PropertyMap._js_default_baseNovaObject = NovaObject._js_default;
PropertyMap.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
PropertyMap.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Type._js_default_baseNovaObject = NovaObject._js_default;
Type.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Type.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Socket._js_default_baseNovaObject = NovaObject._js_default;
Socket.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Socket.prototype.toString_baseNovaObject = NovaObject.prototype.toString;









NetworkInputStream._js_default_baseNovaObject = NovaObject._js_default;
NetworkInputStream.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NetworkInputStream.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



NetworkOutputStream._js_default_baseNovaObject = NovaObject._js_default;
NetworkOutputStream.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NetworkOutputStream.prototype.toString_baseNovaObject = NovaObject.prototype.toString;

NetworkOutputStream.prototype.writeLine = OutputStream.prototype.writeLine;





























Package._js_default_baseNovaObject = NovaObject._js_default;
Package.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Package.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Primitive._js_default_baseNovaObject = NovaObject._js_default;
Primitive.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Primitive.prototype.toString_baseNovaObject = NovaObject.prototype.toString;






Null.prototype.calculateSize_baseNovaString = NovaString.prototype.calculateSize;
Null.prototype.concat_baseNovaString = NovaString.prototype.concat;
Null.prototype.plus0_baseNovaString = NovaString.prototype.plus0;
Null.prototype.multiply0_baseNovaString = NovaString.prototype.multiply0;
Null.prototype.repeat_baseNovaString = NovaString.prototype.repeat;
Null.prototype.equals0_baseNovaString = NovaString.prototype.equals0;
Null.prototype.replace0_baseNovaString = NovaString.prototype.replace0;
Null.prototype.replace1_baseNovaString = NovaString.prototype.replace1;
Null.prototype.startsWith0_baseNovaString = NovaString.prototype.startsWith0;
Null.prototype.startsWith1_baseNovaString = NovaString.prototype.startsWith1;
Null.prototype.startsWith2_baseNovaString = NovaString.prototype.startsWith2;
Null.prototype.contains0_baseNovaString = NovaString.prototype.contains0;
Null.prototype.contains1_baseNovaString = NovaString.prototype.contains1;
Null.prototype.contains2_baseNovaString = NovaString.prototype.contains2;
Null.prototype.endsWith0_baseNovaString = NovaString.prototype.endsWith0;
Null.prototype.endsWith1_baseNovaString = NovaString.prototype.endsWith1;
Null.prototype.endsWith2_baseNovaString = NovaString.prototype.endsWith2;
Null.prototype.matches_baseNovaString = NovaString.prototype.matches;
Null.prototype.indexOf0_baseNovaString = NovaString.prototype.indexOf0;
Null.prototype.indexOf1_baseNovaString = NovaString.prototype.indexOf1;
Null.prototype.indexOf2_baseNovaString = NovaString.prototype.indexOf2;
Null.prototype.lastIndexOf0_baseNovaString = NovaString.prototype.lastIndexOf0;
Null.prototype.lastIndexOf1_baseNovaString = NovaString.prototype.lastIndexOf1;
Null.prototype.validateSubstringBounds_baseNovaString = NovaString.prototype.validateSubstringBounds;
Null.prototype.substring_baseNovaString = NovaString.prototype.substring;
Null.prototype.trimStart_baseNovaString = NovaString.prototype.trimStart;
Null.prototype.trimEnd_baseNovaString = NovaString.prototype.trimEnd;
Null.prototype.trimEnds_baseNovaString = NovaString.prototype.trimEnds;
Null.prototype.trim_baseNovaString = NovaString.prototype.trim;
Null.prototype.toLowerCase_baseNovaString = NovaString.prototype.toLowerCase;
Null.prototype.toUpperCase_baseNovaString = NovaString.prototype.toUpperCase;
Null.prototype.capitalize_baseNovaString = NovaString.prototype.capitalize;
Null.prototype.transform_baseNovaString = NovaString.prototype.transform;
Null.prototype.getStringBetween_baseNovaString = NovaString.prototype.getStringBetween;
Null.prototype.reverse_baseNovaString = NovaString.prototype.reverse;
Null.prototype.surroundWith_baseNovaString = NovaString.prototype.surroundWith;
Null.prototype.compareTo0_baseNovaString = NovaString.prototype.compareTo0;
Null.prototype.split_baseNovaString = NovaString.prototype.split;
Null.prototype.getGroupedChars_baseNovaString = NovaString.prototype.getGroupedChars;
Null.prototype.toString_baseNovaString = NovaString.prototype.toString;
Null.prototype.get_baseNovaString = NovaString.prototype.get;
Null.prototype.set_baseNovaString = NovaString.prototype.set;
Null.generated22_baseNovaString = NovaString.generated22;




Number.prototype.plus0 = PlusOperator.prototype.plus0;
Number.prototype.plusEquals0 = PlusEqualsOperator.prototype.plusEquals0;
Number.prototype.minus = MinusOperator.prototype.minus;
Number.prototype.minusEquals = MinusEqualsOperator.prototype.minusEquals;
Number.prototype.multiply0 = MultiplyOperator.prototype.multiply0;
Number.prototype.multiplyEquals = MultiplyEqualsOperator.prototype.multiplyEquals;
Number.prototype.equals0 = EqualsOperator.prototype.equals0;
Number.prototype.compareTo0 = Comparable.prototype.compareTo0;


NovaByte.prototype.plusInteger_baseNumber = Number.prototype.plusInteger;
NovaByte.prototype.plusReal_baseNumber = Number.prototype.plusReal;
NovaByte.prototype.plusEqualsInteger_baseNumber = Number.prototype.plusEqualsInteger;
NovaByte.prototype.plusEqualsReal_baseNumber = Number.prototype.plusEqualsReal;
NovaByte.prototype.minusInteger_baseNumber = Number.prototype.minusInteger;
NovaByte.prototype.minusReal_baseNumber = Number.prototype.minusReal;
NovaByte.prototype.minusEqualsInteger_baseNumber = Number.prototype.minusEqualsInteger;
NovaByte.prototype.minusEqualsReal_baseNumber = Number.prototype.minusEqualsReal;
NovaByte.prototype.multiplyInteger_baseNumber = Number.prototype.multiplyInteger;
NovaByte.prototype.multiplyReal_baseNumber = Number.prototype.multiplyReal;
NovaByte.prototype.multiplyEqualsInteger_baseNumber = Number.prototype.multiplyEqualsInteger;
NovaByte.prototype.multiplyEqualsReal_baseNumber = Number.prototype.multiplyEqualsReal;
NovaByte.prototype.compareToInteger_baseNumber = Number.prototype.compareToInteger;
NovaByte.prototype.compareToReal_baseNumber = Number.prototype.compareToReal;
NovaByte.prototype.equalsInteger_baseNumber = Number.prototype.equalsInteger;
NovaByte.prototype.equalsReal_baseNumber = Number.prototype.equalsReal;



Char.prototype.plusInteger_baseNumber = Number.prototype.plusInteger;
Char.prototype.plusReal_baseNumber = Number.prototype.plusReal;
Char.prototype.plusEqualsInteger_baseNumber = Number.prototype.plusEqualsInteger;
Char.prototype.plusEqualsReal_baseNumber = Number.prototype.plusEqualsReal;
Char.prototype.minusInteger_baseNumber = Number.prototype.minusInteger;
Char.prototype.minusReal_baseNumber = Number.prototype.minusReal;
Char.prototype.minusEqualsInteger_baseNumber = Number.prototype.minusEqualsInteger;
Char.prototype.minusEqualsReal_baseNumber = Number.prototype.minusEqualsReal;
Char.prototype.multiplyInteger_baseNumber = Number.prototype.multiplyInteger;
Char.prototype.multiplyReal_baseNumber = Number.prototype.multiplyReal;
Char.prototype.multiplyEqualsInteger_baseNumber = Number.prototype.multiplyEqualsInteger;
Char.prototype.multiplyEqualsReal_baseNumber = Number.prototype.multiplyEqualsReal;
Char.prototype.compareToInteger_baseNumber = Number.prototype.compareToInteger;
Char.prototype.compareToReal_baseNumber = Number.prototype.compareToReal;
Char.prototype.equalsInteger_baseNumber = Number.prototype.equalsInteger;
Char.prototype.equalsReal_baseNumber = Number.prototype.equalsReal;



NovaDouble.prototype.plusInteger_baseNumber = Number.prototype.plusInteger;
NovaDouble.prototype.plusReal_baseNumber = Number.prototype.plusReal;
NovaDouble.prototype.plusEqualsInteger_baseNumber = Number.prototype.plusEqualsInteger;
NovaDouble.prototype.plusEqualsReal_baseNumber = Number.prototype.plusEqualsReal;
NovaDouble.prototype.minusInteger_baseNumber = Number.prototype.minusInteger;
NovaDouble.prototype.minusReal_baseNumber = Number.prototype.minusReal;
NovaDouble.prototype.minusEqualsInteger_baseNumber = Number.prototype.minusEqualsInteger;
NovaDouble.prototype.minusEqualsReal_baseNumber = Number.prototype.minusEqualsReal;
NovaDouble.prototype.multiplyInteger_baseNumber = Number.prototype.multiplyInteger;
NovaDouble.prototype.multiplyReal_baseNumber = Number.prototype.multiplyReal;
NovaDouble.prototype.multiplyEqualsInteger_baseNumber = Number.prototype.multiplyEqualsInteger;
NovaDouble.prototype.multiplyEqualsReal_baseNumber = Number.prototype.multiplyEqualsReal;
NovaDouble.prototype.compareToInteger_baseNumber = Number.prototype.compareToInteger;
NovaDouble.prototype.compareToReal_baseNumber = Number.prototype.compareToReal;
NovaDouble.prototype.equalsInteger_baseNumber = Number.prototype.equalsInteger;
NovaDouble.prototype.equalsReal_baseNumber = Number.prototype.equalsReal;



NovaFloat.prototype.plusInteger_baseNumber = Number.prototype.plusInteger;
NovaFloat.prototype.plusReal_baseNumber = Number.prototype.plusReal;
NovaFloat.prototype.plusEqualsInteger_baseNumber = Number.prototype.plusEqualsInteger;
NovaFloat.prototype.plusEqualsReal_baseNumber = Number.prototype.plusEqualsReal;
NovaFloat.prototype.minusInteger_baseNumber = Number.prototype.minusInteger;
NovaFloat.prototype.minusReal_baseNumber = Number.prototype.minusReal;
NovaFloat.prototype.minusEqualsInteger_baseNumber = Number.prototype.minusEqualsInteger;
NovaFloat.prototype.minusEqualsReal_baseNumber = Number.prototype.minusEqualsReal;
NovaFloat.prototype.multiplyInteger_baseNumber = Number.prototype.multiplyInteger;
NovaFloat.prototype.multiplyReal_baseNumber = Number.prototype.multiplyReal;
NovaFloat.prototype.multiplyEqualsInteger_baseNumber = Number.prototype.multiplyEqualsInteger;
NovaFloat.prototype.multiplyEqualsReal_baseNumber = Number.prototype.multiplyEqualsReal;
NovaFloat.prototype.compareToInteger_baseNumber = Number.prototype.compareToInteger;
NovaFloat.prototype.compareToReal_baseNumber = Number.prototype.compareToReal;
NovaFloat.prototype.equalsInteger_baseNumber = Number.prototype.equalsInteger;
NovaFloat.prototype.equalsReal_baseNumber = Number.prototype.equalsReal;



NovaInt.prototype.plusInteger_baseNumber = Number.prototype.plusInteger;
NovaInt.prototype.plusReal_baseNumber = Number.prototype.plusReal;
NovaInt.prototype.plusEqualsInteger_baseNumber = Number.prototype.plusEqualsInteger;
NovaInt.prototype.plusEqualsReal_baseNumber = Number.prototype.plusEqualsReal;
NovaInt.prototype.minusInteger_baseNumber = Number.prototype.minusInteger;
NovaInt.prototype.minusReal_baseNumber = Number.prototype.minusReal;
NovaInt.prototype.minusEqualsInteger_baseNumber = Number.prototype.minusEqualsInteger;
NovaInt.prototype.minusEqualsReal_baseNumber = Number.prototype.minusEqualsReal;
NovaInt.prototype.multiplyInteger_baseNumber = Number.prototype.multiplyInteger;
NovaInt.prototype.multiplyReal_baseNumber = Number.prototype.multiplyReal;
NovaInt.prototype.multiplyEqualsInteger_baseNumber = Number.prototype.multiplyEqualsInteger;
NovaInt.prototype.multiplyEqualsReal_baseNumber = Number.prototype.multiplyEqualsReal;
NovaInt.prototype.compareToInteger_baseNumber = Number.prototype.compareToInteger;
NovaInt.prototype.compareToReal_baseNumber = Number.prototype.compareToReal;
NovaInt.prototype.equalsInteger_baseNumber = Number.prototype.equalsInteger;
NovaInt.prototype.equalsReal_baseNumber = Number.prototype.equalsReal;





NovaLong.prototype.plusInteger_baseNumber = Number.prototype.plusInteger;
NovaLong.prototype.plusReal_baseNumber = Number.prototype.plusReal;
NovaLong.prototype.plusEqualsInteger_baseNumber = Number.prototype.plusEqualsInteger;
NovaLong.prototype.plusEqualsReal_baseNumber = Number.prototype.plusEqualsReal;
NovaLong.prototype.minusInteger_baseNumber = Number.prototype.minusInteger;
NovaLong.prototype.minusReal_baseNumber = Number.prototype.minusReal;
NovaLong.prototype.minusEqualsInteger_baseNumber = Number.prototype.minusEqualsInteger;
NovaLong.prototype.minusEqualsReal_baseNumber = Number.prototype.minusEqualsReal;
NovaLong.prototype.multiplyInteger_baseNumber = Number.prototype.multiplyInteger;
NovaLong.prototype.multiplyReal_baseNumber = Number.prototype.multiplyReal;
NovaLong.prototype.multiplyEqualsInteger_baseNumber = Number.prototype.multiplyEqualsInteger;
NovaLong.prototype.multiplyEqualsReal_baseNumber = Number.prototype.multiplyEqualsReal;
NovaLong.prototype.compareToInteger_baseNumber = Number.prototype.compareToInteger;
NovaLong.prototype.compareToReal_baseNumber = Number.prototype.compareToReal;
NovaLong.prototype.equalsInteger_baseNumber = Number.prototype.equalsInteger;
NovaLong.prototype.equalsReal_baseNumber = Number.prototype.equalsReal;





NovaShort.prototype.plusInteger_baseNumber = Number.prototype.plusInteger;
NovaShort.prototype.plusReal_baseNumber = Number.prototype.plusReal;
NovaShort.prototype.plusEqualsInteger_baseNumber = Number.prototype.plusEqualsInteger;
NovaShort.prototype.plusEqualsReal_baseNumber = Number.prototype.plusEqualsReal;
NovaShort.prototype.minusInteger_baseNumber = Number.prototype.minusInteger;
NovaShort.prototype.minusReal_baseNumber = Number.prototype.minusReal;
NovaShort.prototype.minusEqualsInteger_baseNumber = Number.prototype.minusEqualsInteger;
NovaShort.prototype.minusEqualsReal_baseNumber = Number.prototype.minusEqualsReal;
NovaShort.prototype.multiplyInteger_baseNumber = Number.prototype.multiplyInteger;
NovaShort.prototype.multiplyReal_baseNumber = Number.prototype.multiplyReal;
NovaShort.prototype.multiplyEqualsInteger_baseNumber = Number.prototype.multiplyEqualsInteger;
NovaShort.prototype.multiplyEqualsReal_baseNumber = Number.prototype.multiplyEqualsReal;
NovaShort.prototype.compareToInteger_baseNumber = Number.prototype.compareToInteger;
NovaShort.prototype.compareToReal_baseNumber = Number.prototype.compareToReal;
NovaShort.prototype.equalsInteger_baseNumber = Number.prototype.equalsInteger;
NovaShort.prototype.equalsReal_baseNumber = Number.prototype.equalsReal;



Process._js_default_baseNovaObject = NovaObject._js_default;
Process.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Process.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Match._js_default_baseNovaObject = NovaObject._js_default;
Match.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Match.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Pattern._js_default_baseNovaObject = NovaObject._js_default;
Pattern.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Pattern.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Regex._js_default_baseNovaObject = NovaObject._js_default;
Regex.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Regex.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



MD5._js_default_baseNovaObject = NovaObject._js_default;
MD5.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
MD5.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Sha256._js_default_baseNovaObject = NovaObject._js_default;
Sha256.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Sha256.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



JsonSerializer._js_default_baseNovaObject = NovaObject._js_default;
JsonSerializer.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
JsonSerializer.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



InvalidParseException.prototype.toString_baseException = Exception.prototype.toString;
InvalidParseException.prototype.onThrown_baseException = Exception.prototype.onThrown;
InvalidParseException.catchType_baseException = Exception.catchType;








Button.prototype.onAdded_basePanel = Panel.prototype.onAdded;
Button.prototype.draw_basePanel = Panel.prototype.draw;

Button.prototype.onAction = UIAction.prototype.onAction;
Button.prototype.addActionListener = UIAction.prototype.addActionListener;
Button.prototype.onAdded = UIComponent.prototype.onAdded;
Button.prototype.onRemoved = UIComponent.prototype.onRemoved;
Button.prototype.draw = UIComponent.prototype.draw;
Button.prototype.paint = UIComponent.prototype.paint;
Button.prototype.repaint = UIComponent.prototype.repaint;
Button._js_default = NovaObject._js_default;
Button.prototype.equals = NovaObject.prototype.equals;
Button.prototype.toString = NovaObject.prototype.toString;


Color._js_default_baseNovaObject = NovaObject._js_default;
Color.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Color.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Frame.prototype.onAdded_basePanel = Panel.prototype.onAdded;
Frame.prototype.draw_basePanel = Panel.prototype.draw;



ImmutableColor._js_default_baseNovaObject = NovaObject._js_default;
ImmutableColor.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ImmutableColor.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Label.prototype.onAdded_baseUIComponent = UIComponent.prototype.onAdded;
Label.prototype.onRemoved_baseUIComponent = UIComponent.prototype.onRemoved;
Label.prototype.draw_baseUIComponent = UIComponent.prototype.draw;
Label.prototype.paint_baseUIComponent = UIComponent.prototype.paint;
Label.prototype.repaint_baseUIComponent = UIComponent.prototype.repaint;



Screen._js_default_baseNovaObject = NovaObject._js_default;
Screen.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Screen.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ScrollBar.prototype.onAdded_baseUIComponent = UIComponent.prototype.onAdded;
ScrollBar.prototype.onRemoved_baseUIComponent = UIComponent.prototype.onRemoved;
ScrollBar.prototype.draw_baseUIComponent = UIComponent.prototype.draw;
ScrollBar.prototype.paint_baseUIComponent = UIComponent.prototype.paint;
ScrollBar.prototype.repaint_baseUIComponent = UIComponent.prototype.repaint;



UIAction.prototype.onAdded_baseUIComponent = UIComponent.prototype.onAdded;
UIAction.prototype.onRemoved_baseUIComponent = UIComponent.prototype.onRemoved;
UIAction.prototype.draw_baseUIComponent = UIComponent.prototype.draw;
UIAction.prototype.paint_baseUIComponent = UIComponent.prototype.paint;
UIAction.prototype.repaint_baseUIComponent = UIComponent.prototype.repaint;



UIParent.prototype.onAdded_baseUIComponent = UIComponent.prototype.onAdded;
UIParent.prototype.onRemoved_baseUIComponent = UIComponent.prototype.onRemoved;
UIParent.prototype.draw_baseUIComponent = UIComponent.prototype.draw;
UIParent.prototype.paint_baseUIComponent = UIComponent.prototype.paint;
UIParent.prototype.repaint_baseUIComponent = UIComponent.prototype.repaint;



WindowThread.prototype.start_baseThread = Thread.prototype.start;
WindowThread.prototype.join_baseThread = Thread.prototype.join;
WindowThread.prototype.kill_baseThread = Thread.prototype.kill;
WindowThread.sleep_baseThread = Thread.sleep;
WindowThread.lock_baseThread = Thread.lock;
WindowThread.unlock_baseThread = Thread.unlock;
WindowThread.sync_baseThread = Thread.sync;
WindowThread.prototype.run_baseThread = Thread.prototype.run;
WindowThread.prototype.startRun_baseThread = Thread.prototype.startRun;



ThreadLocal._js_default_baseNovaObject = NovaObject._js_default;
ThreadLocal.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ThreadLocal.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



ThreadLocal1Int._js_default_baseNovaObject = NovaObject._js_default;
ThreadLocal1Int.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
ThreadLocal1Int.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Async._js_default_baseNovaObject = NovaObject._js_default;
Async.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Async.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Task._js_default_baseNovaObject = NovaObject._js_default;
Task.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Task.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Interval._js_default_baseNovaObject = NovaObject._js_default;
Interval.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Interval.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



BoundedInterval.prototype.getGap_baseInterval = Interval.prototype.getGap;
BoundedInterval.prototype.toString_baseInterval = Interval.prototype.toString;



BoundlessInterval.prototype.getGap_baseInterval = Interval.prototype.getGap;
BoundlessInterval.prototype.toString_baseInterval = Interval.prototype.toString;



IntervalException.prototype.toString_baseException = Exception.prototype.toString;
IntervalException.prototype.onThrown_baseException = Exception.prototype.onThrown;
IntervalException.catchType_baseException = Exception.catchType;






Timer._js_default_baseNovaObject = NovaObject._js_default;
Timer.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Timer.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



CumulativeTimer.prototype.start_baseTimer = Timer.prototype.start;
CumulativeTimer.prototype.stop_baseTimer = Timer.prototype.stop;
CumulativeTimer.prototype.reset_baseTimer = Timer.prototype.reset;
CumulativeTimer.prototype.toString_baseTimer = Timer.prototype.toString;
CumulativeTimer.time_baseTimer = Timer.time;



NovaDate._js_default_baseNovaObject = NovaObject._js_default;
NovaDate.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NovaDate.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



NovaDateTime._js_default_baseNovaObject = NovaObject._js_default;
NovaDateTime.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
NovaDateTime.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



InvalidDateException.prototype.toString_baseException = Exception.prototype.toString;
InvalidDateException.prototype.onThrown_baseException = Exception.prototype.onThrown;
InvalidDateException.catchType_baseException = Exception.catchType;






Calculator._js_default_baseNovaObject = NovaObject._js_default;
Calculator.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Calculator.prototype.toString_baseNovaObject = NovaObject.prototype.toString;









Time._js_default_baseNovaObject = NovaObject._js_default;
Time.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Time.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



Json.prototype.add_baseHashMap = HashMap.prototype.add;
Json.prototype.toArray_baseHashMap = HashMap.prototype.toArray;
Json.prototype.contains0_baseHashMap = HashMap.prototype.contains0;
Json.prototype.any0_baseHashMap = HashMap.prototype.any0;
Json.prototype.all0_baseHashMap = HashMap.prototype.all0;
Json.prototype.map0_baseHashMap = HashMap.prototype.map0;
Json.prototype.filter0_baseHashMap = HashMap.prototype.filter0;
Json.prototype.join_baseHashMap = HashMap.prototype.join;
Json.prototype.skip_baseHashMap = HashMap.prototype.skip;
Json.prototype.take_baseHashMap = HashMap.prototype.take;
Json.prototype.reverse_baseHashMap = HashMap.prototype.reverse;
Json.prototype.firstWhere0_baseHashMap = HashMap.prototype.firstWhere0;
Json.prototype.forEach0_baseHashMap = HashMap.prototype.forEach0;
Json.prototype.getBucket_baseHashMap = HashMap.prototype.getBucket;
Json.prototype.getPair_baseHashMap = HashMap.prototype.getPair;
Json.prototype.remove_baseHashMap = HashMap.prototype.remove;
Json.prototype.containsKey_baseHashMap = HashMap.prototype.containsKey;
Json.prototype.clone_baseHashMap = HashMap.prototype.clone;
Json.prototype.toImmutable_baseHashMap = HashMap.prototype.toImmutable;
Json.prototype.toString_baseHashMap = HashMap.prototype.toString;
Json.prototype.get_baseHashMap = HashMap.prototype.get;
Json.prototype.set_baseHashMap = HashMap.prototype.set;



Svg._js_default_baseNovaObject = NovaObject._js_default;
Svg.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
Svg.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



SvgComponent._js_default_baseNovaObject = NovaObject._js_default;
SvgComponent.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
SvgComponent.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



SvgCircle.prototype.generateOutput_baseSvgComponent = SvgComponent.prototype.generateOutput;



SvgComponentList._js_default_baseNovaObject = NovaObject._js_default;
SvgComponentList.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
SvgComponentList.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



SvgComponentNode._js_default_baseNovaObject = NovaObject._js_default;
SvgComponentNode.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
SvgComponentNode.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



SvgMainComponent.prototype.generateOutput_baseSvgComponent = SvgComponent.prototype.generateOutput;



No3._js_default_baseNovaObject = NovaObject._js_default;
No3.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
No3.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



No3Node._js_default_baseNovaObject = NovaObject._js_default;
No3Node.prototype.equals_baseNovaObject = NovaObject.prototype.equals;
No3Node.prototype.toString_baseNovaObject = NovaObject.prototype.toString;



No3Select.prototype.toJs_baseNo3Node = No3Node.prototype.toJs;



No3SelectAll.prototype.toJs_baseNo3Node = No3Node.prototype.toJs;





var Lab0_Nova_init_static_initialized = false;
function Lab0_Nova_init_static() {
	if (!Lab0_Nova_init_static_initialized) {
		Lab0_Nova_init_static_initialized = true;
		Thread0_Nova_init_static();
		NovaLong0_Nova_init_static();
		NovaMath0_Nova_init_static();
		Lab.local = novaConstructors.newThreadLocal1Int(122);
		Lab.bench1 = novaConstructors.newThreadLocal1Int(0);
		
	}
}

var Thread0_Nova_init_static_initialized = false;
function Thread0_Nova_init_static() {
	if (!Thread0_Nova_init_static_initialized) {
		Thread0_Nova_init_static_initialized = true;
		Thread.ACTIVE_THREADS = novaConstructors.newArray().toImmutable();
		
	}
}

var AssignmentStability0_Nova_init_static_initialized = false;
function AssignmentStability0_Nova_init_static() {
	if (!AssignmentStability0_Nova_init_static_initialized) {
		AssignmentStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		AssignmentStability._testEmbeddedPropertyAssignmentsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testEmbeddedPropertyAssignments"), novaConstructors.newString2("Testing embedded property assignments"));
		AssignmentStability._testEmbeddedPrimitiveAssignmentsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testEmbeddedPrimitiveAssignments"), novaConstructors.newString2("Testing embedded primitive assignments"));
		AssignmentStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(AssignmentStability.generated3(AssignmentStability._testEmbeddedPropertyAssignmentsTestCase, AssignmentStability._testEmbeddedPrimitiveAssignmentsTestCase));
		
	}
}

var BoundedIntervalStability0_Nova_init_static_initialized = false;
function BoundedIntervalStability0_Nova_init_static() {
	if (!BoundedIntervalStability0_Nova_init_static_initialized) {
		BoundedIntervalStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		BoundedIntervalStability._invalidUnboundedIntervalBoundsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("invalidUnboundedIntervalBounds"));
		BoundedIntervalStability._invalidIntervalBoundsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("invalidIntervalBounds"));
		BoundedIntervalStability._validIntervalBoundsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("validIntervalBounds"));
		BoundedIntervalStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(BoundedIntervalStability.generated4(BoundedIntervalStability._invalidUnboundedIntervalBoundsTestCase, BoundedIntervalStability._invalidIntervalBoundsTestCase, BoundedIntervalStability._validIntervalBoundsTestCase));
		
	}
}

var BoundlessIntervalStability0_Nova_init_static_initialized = false;
function BoundlessIntervalStability0_Nova_init_static() {
	if (!BoundlessIntervalStability0_Nova_init_static_initialized) {
		BoundlessIntervalStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		BoundlessIntervalStability._invalidBoundlessIntervalBoundsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("invalidBoundlessIntervalBounds"));
		BoundlessIntervalStability._validIntervalBoundsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("validIntervalBounds"));
		BoundlessIntervalStability._infiniteIntervalValuesTestCase = novaConstructors.newTestCase(novaConstructors.newString2("infiniteIntervalValues"));
		BoundlessIntervalStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(BoundlessIntervalStability.generated5(BoundlessIntervalStability._invalidBoundlessIntervalBoundsTestCase, BoundlessIntervalStability._validIntervalBoundsTestCase, BoundlessIntervalStability._infiniteIntervalValuesTestCase));
		
	}
}

var CastStability0_Nova_init_static_initialized = false;
function CastStability0_Nova_init_static() {
	if (!CastStability0_Nova_init_static_initialized) {
		CastStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		CastStability._validPrimitveNumericCastsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("validPrimitveNumericCasts"));
		CastStability._validArrayTypeCastTestCase = novaConstructors.newTestCase(novaConstructors.newString2("validArrayTypeCast"));
		CastStability._incompatibleCastTestCase = novaConstructors.newTestCase(novaConstructors.newString2("incompatibleCast"));
		CastStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(CastStability.generated6(CastStability._validPrimitveNumericCastsTestCase, CastStability._validArrayTypeCastTestCase, CastStability._incompatibleCastTestCase));
		
	}
}

var ClosureStability0_Nova_init_static_initialized = false;
function ClosureStability0_Nova_init_static() {
	if (!ClosureStability0_Nova_init_static_initialized) {
		ClosureStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		ClosureStability.TOLERANCE = 0.0000000001;
		ClosureStability._testMathClosuresTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testMathClosures"), novaConstructors.newString2("Testing static math closures"));
		ClosureStability._testInstanceClosureTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testInstanceClosure"), novaConstructors.newString2("Testing instance closures"));
		ClosureStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(ClosureStability.generated7(ClosureStability._testMathClosuresTestCase, ClosureStability._testInstanceClosureTestCase));
		
	}
}

var ExceptionStability0_Nova_init_static_initialized = false;
function ExceptionStability0_Nova_init_static() {
	if (!ExceptionStability0_Nova_init_static_initialized) {
		ExceptionStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		ExceptionStability._testTestCase = novaConstructors.newTestCase(novaConstructors.newString2("test"));
		ExceptionStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(ExceptionStability.generated8(ExceptionStability._testTestCase));
		
	}
}

var ExternalInnerClassStability0_Nova_init_static_initialized = false;
function ExternalInnerClassStability0_Nova_init_static() {
	if (!ExternalInnerClassStability0_Nova_init_static_initialized) {
		ExternalInnerClassStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		ExternalInnerClassStability._testTestCase = novaConstructors.newTestCase(novaConstructors.newString2("test"), novaConstructors.newString2("Testing external inner class access"));
		ExternalInnerClassStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(ExternalInnerClassStability.generated9(ExternalInnerClassStability._testTestCase));
		
	}
}

var FancyOutputStreamTests0_Nova_init_static_initialized = false;
function FancyOutputStreamTests0_Nova_init_static() {
	if (!FancyOutputStreamTests0_Nova_init_static_initialized) {
		FancyOutputStreamTests0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		FancyOutputStreamTests._oddHeaderTestCase = novaConstructors.newTestCase(novaConstructors.newString2("oddHeader"));
		FancyOutputStreamTests._evenHeaderTestCase = novaConstructors.newTestCase(novaConstructors.newString2("evenHeader"));
		FancyOutputStreamTests._headerPatternTestCase = novaConstructors.newTestCase(novaConstructors.newString2("headerPattern"));
		FancyOutputStreamTests._runTestsTestRunner = novaConstructors.newTestRunnerModel(FancyOutputStreamTests.generated10(FancyOutputStreamTests._oddHeaderTestCase, FancyOutputStreamTests._evenHeaderTestCase, FancyOutputStreamTests._headerPatternTestCase));
		
	}
}

var FileStability0_Nova_init_static_initialized = false;
function FileStability0_Nova_init_static() {
	if (!FileStability0_Nova_init_static_initialized) {
		FileStability0_Nova_init_static_initialized = true;
		FileStability.inputString = novaConstructors.newString2("This is test input...");
		FileStability.lines = 100;
		
	}
}

var FirstClassFunctionStability0_Nova_init_static_initialized = false;
function FirstClassFunctionStability0_Nova_init_static() {
	if (!FirstClassFunctionStability0_Nova_init_static_initialized) {
		FirstClassFunctionStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		FirstClassFunctionStability._testFunctionReturnedByFunctionTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testFunctionReturnedByFunction"), novaConstructors.newString2("Testing calling a function returned by a function"));
		FirstClassFunctionStability._testFunctionReturnedByInlineFunctionTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testFunctionReturnedByInlineFunction"), novaConstructors.newString2("Testing calling a function returned by an inline function"));
		FirstClassFunctionStability._testFunctionReturnedByInlineFunctionWithTypeSpecifiedTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testFunctionReturnedByInlineFunctionWithTypeSpecified"), novaConstructors.newString2("Testing calling a function returned by an inline function with type specified"));
		FirstClassFunctionStability._testCallingChainedFunctionReturnedByFunctionTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testCallingChainedFunctionReturnedByFunction"), novaConstructors.newString2("Testing calling a chained function returned by a function"));
		FirstClassFunctionStability._testCallingAssignedChainFunctionTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testCallingAssignedChainFunction"), novaConstructors.newString2("Testing calling an assigned chained function returned by a function"));
		FirstClassFunctionStability._testCallingChainedFunctionX3TestCase = novaConstructors.newTestCase(novaConstructors.newString2("testCallingChainedFunctionX3"), novaConstructors.newString2("Testing calling a chained function x3 returned by a function"));
		FirstClassFunctionStability._testCallingChainedFunctionX4TestCase = novaConstructors.newTestCase(novaConstructors.newString2("testCallingChainedFunctionX4"), novaConstructors.newString2("Testing calling a chained function x4 returned by a function"));
		FirstClassFunctionStability._testCallingChainedFunctionX5TestCase = novaConstructors.newTestCase(novaConstructors.newString2("testCallingChainedFunctionX5"), novaConstructors.newString2("Testing calling a chained function x5 returned by a function"));
		FirstClassFunctionStability._testCallingChainedFunctionX6TestCase = novaConstructors.newTestCase(novaConstructors.newString2("testCallingChainedFunctionX6"), novaConstructors.newString2("Testing calling a chained function x6 returned by a function"));
		FirstClassFunctionStability._testSingleFunctionInArrayTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testSingleFunctionInArray"), novaConstructors.newString2("Testing single function in Array"));
		FirstClassFunctionStability._testCallingFunctionFromCollectionTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testCallingFunctionFromCollection"), novaConstructors.newString2("Testing calling a single function from Array"));
		FirstClassFunctionStability._testParameterlessLambdaVariableFunctionalityTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testParameterlessLambdaVariableFunctionality"), novaConstructors.newString2("Testing parameterless lambda variable functionality"));
		FirstClassFunctionStability._testParameterlessLocalFunctionTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testParameterlessLocalFunction"), novaConstructors.newString2("Testing parameterless local function"));
		FirstClassFunctionStability._testLambdaVariableWithParametersTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testLambdaVariableWithParameters"), novaConstructors.newString2("Testing lambda variable with parameters functionality"));
		FirstClassFunctionStability._testLocalFunctionWithParametersTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testLocalFunctionWithParameters"), novaConstructors.newString2("Testing local function with parameters"));
		FirstClassFunctionStability._testReturningLambdaTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testReturningLambda"), novaConstructors.newString2("Testing returning a lambda"));
		FirstClassFunctionStability._testReturningLambdaWithParametersTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testReturningLambdaWithParameters"), novaConstructors.newString2("Testing returning a lambda with parameters"));
		FirstClassFunctionStability._testInlineReturningLambdaTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testInlineReturningLambda"), novaConstructors.newString2("Testing inline returning a lambda"));
		FirstClassFunctionStability._testInlineReturningLambdaWithParametersTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testInlineReturningLambdaWithParameters"), novaConstructors.newString2("Testing inline returning a lambda with parameters"));
		FirstClassFunctionStability._testInlineReturningLambdaWithParametersAndTypeTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testInlineReturningLambdaWithParametersAndType"), novaConstructors.newString2("Testing inline returning a lambda with parameters and type predefined"));
		FirstClassFunctionStability._testInlineReturningLambdaWithParametersAndTypeWithBodyTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testInlineReturningLambdaWithParametersAndTypeWithBody"), novaConstructors.newString2("Testing inline returning a lambda with parameters and type predefined with body"));
		FirstClassFunctionStability._testImplicitNullFunctionReferenceTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testImplicitNullFunctionReference"), novaConstructors.newString2("Testing implicit null function reference"));
		FirstClassFunctionStability._testExplicitNullFunctionReferenceTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testExplicitNullFunctionReference"), novaConstructors.newString2("Testing explicit null function reference"));
		FirstClassFunctionStability._testNonNullFunctionReferenceTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testNonNullFunctionReference"), novaConstructors.newString2("Testing non-null function reference"));
		FirstClassFunctionStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(FirstClassFunctionStability.generated11(FirstClassFunctionStability._testFunctionReturnedByFunctionTestCase, FirstClassFunctionStability._testFunctionReturnedByInlineFunctionTestCase, FirstClassFunctionStability._testFunctionReturnedByInlineFunctionWithTypeSpecifiedTestCase, FirstClassFunctionStability._testCallingChainedFunctionReturnedByFunctionTestCase, FirstClassFunctionStability._testCallingAssignedChainFunctionTestCase, FirstClassFunctionStability._testCallingChainedFunctionX3TestCase, FirstClassFunctionStability._testCallingChainedFunctionX4TestCase, FirstClassFunctionStability._testCallingChainedFunctionX5TestCase, FirstClassFunctionStability._testCallingChainedFunctionX6TestCase, FirstClassFunctionStability._testSingleFunctionInArrayTestCase, FirstClassFunctionStability._testCallingFunctionFromCollectionTestCase, FirstClassFunctionStability._testParameterlessLambdaVariableFunctionalityTestCase, FirstClassFunctionStability._testParameterlessLocalFunctionTestCase, FirstClassFunctionStability._testLambdaVariableWithParametersTestCase, FirstClassFunctionStability._testLocalFunctionWithParametersTestCase, FirstClassFunctionStability._testReturningLambdaTestCase, FirstClassFunctionStability._testReturningLambdaWithParametersTestCase, FirstClassFunctionStability._testInlineReturningLambdaTestCase, FirstClassFunctionStability._testInlineReturningLambdaWithParametersTestCase, FirstClassFunctionStability._testInlineReturningLambdaWithParametersAndTypeTestCase, FirstClassFunctionStability._testInlineReturningLambdaWithParametersAndTypeWithBodyTestCase, FirstClassFunctionStability._testImplicitNullFunctionReferenceTestCase, FirstClassFunctionStability._testExplicitNullFunctionReferenceTestCase, FirstClassFunctionStability._testNonNullFunctionReferenceTestCase));
		
	}
}

var InnerClassStability0_Nova_init_static_initialized = false;
function InnerClassStability0_Nova_init_static() {
	if (!InnerClassStability0_Nova_init_static_initialized) {
		InnerClassStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		InnerClassStability._testTestCase = novaConstructors.newTestCase(novaConstructors.newString2("test"), novaConstructors.newString2("Checking inner classes"));
		InnerClassStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(InnerClassStability.generated12(InnerClassStability._testTestCase));
		
	}
}

var IntervalStability0_Nova_init_static_initialized = false;
function IntervalStability0_Nova_init_static() {
	if (!IntervalStability0_Nova_init_static_initialized) {
		IntervalStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		IntervalStability._threeHourIntervalTestCase = novaConstructors.newTestCase(novaConstructors.newString2("threeHourInterval"));
		IntervalStability._threeHourTwentyMinuteIntervalTestCase = novaConstructors.newTestCase(novaConstructors.newString2("threeHourTwentyMinuteInterval"));
		IntervalStability._threeHourTwentyMinuteFifteenSecondIntervalTestCase = novaConstructors.newTestCase(novaConstructors.newString2("threeHourTwentyMinuteFifteenSecondInterval"));
		IntervalStability._threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondIntervalTestCase = novaConstructors.newTestCase(novaConstructors.newString2("threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondInterval"));
		IntervalStability._oneDayIntervalTestCase = novaConstructors.newTestCase(novaConstructors.newString2("oneDayInterval"));
		IntervalStability._twoDayIntervalTestCase = novaConstructors.newTestCase(novaConstructors.newString2("twoDayInterval"));
		IntervalStability._twoAndAHalfDayIntervalTestCase = novaConstructors.newTestCase(novaConstructors.newString2("twoAndAHalfDayInterval"));
		IntervalStability._twoMonthIntervalTestCase = novaConstructors.newTestCase(novaConstructors.newString2("twoMonthInterval"));
		IntervalStability._oneYearIntervalTestCase = novaConstructors.newTestCase(novaConstructors.newString2("oneYearInterval"));
		IntervalStability._twoAndAHalfYearIntervalTestCase = novaConstructors.newTestCase(novaConstructors.newString2("twoAndAHalfYearInterval"));
		IntervalStability._invalidIntervalGapTestCase = novaConstructors.newTestCase(novaConstructors.newString2("invalidIntervalGap"));
		IntervalStability._validIntervalGapTestCase = novaConstructors.newTestCase(novaConstructors.newString2("validIntervalGap"));
		IntervalStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(IntervalStability.generated13(IntervalStability._threeHourIntervalTestCase, IntervalStability._threeHourTwentyMinuteIntervalTestCase, IntervalStability._threeHourTwentyMinuteFifteenSecondIntervalTestCase, IntervalStability._threeHourTwentyMinuteFifteenSecondOneHundredTwentyOneMillisecondIntervalTestCase, IntervalStability._oneDayIntervalTestCase, IntervalStability._twoDayIntervalTestCase, IntervalStability._twoAndAHalfDayIntervalTestCase, IntervalStability._twoMonthIntervalTestCase, IntervalStability._oneYearIntervalTestCase, IntervalStability._twoAndAHalfYearIntervalTestCase, IntervalStability._invalidIntervalGapTestCase, IntervalStability._validIntervalGapTestCase));
		
	}
}

var LambdaStability0_Nova_init_static_initialized = false;
function LambdaStability0_Nova_init_static() {
	if (!LambdaStability0_Nova_init_static_initialized) {
		LambdaStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		LambdaStability._testLambdasTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testLambdas"), novaConstructors.newString2("Testing lambdas"));
		LambdaStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(LambdaStability.generated14(LambdaStability._testLambdasTestCase));
		
	}
}

var LibraryLoadingStability0_Nova_init_static_initialized = false;
function LibraryLoadingStability0_Nova_init_static() {
	if (!LibraryLoadingStability0_Nova_init_static_initialized) {
		LibraryLoadingStability0_Nova_init_static_initialized = true;
		LibraryLoadingStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(novaConstructors.newArray0(0));
		
	}
}

var NetworkStability0_Nova_init_static_initialized = false;
function NetworkStability0_Nova_init_static() {
	if (!NetworkStability0_Nova_init_static_initialized) {
		NetworkStability0_Nova_init_static_initialized = true;
		NetworkStability.received = novaConstructors.newString2("THIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVED");
		NetworkStability.PORT = 24243;
		
	}
}

var PolymorphismStability0_Nova_init_static_initialized = false;
function PolymorphismStability0_Nova_init_static() {
	if (!PolymorphismStability0_Nova_init_static_initialized) {
		PolymorphismStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		PolymorphismStability._testCallsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testCalls"), novaConstructors.newString2("Testing polymorphic method calls"));
		PolymorphismStability._testClosureTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testClosure"), novaConstructors.newString2("Testing polymorphic closure method calls"));
		PolymorphismStability._testPropertyTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testProperty"), novaConstructors.newString2("Testing polymorphic properties"));
		PolymorphismStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(PolymorphismStability.generated15(PolymorphismStability._testCallsTestCase, PolymorphismStability._testClosureTestCase, PolymorphismStability._testPropertyTestCase));
		
	}
}

var PrimitiveOverloadStability0_Nova_init_static_initialized = false;
function PrimitiveOverloadStability0_Nova_init_static() {
	if (!PrimitiveOverloadStability0_Nova_init_static_initialized) {
		PrimitiveOverloadStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		PrimitiveOverloadStability._testTestCase = novaConstructors.newTestCase(novaConstructors.newString2("test"), novaConstructors.newString2("Testing primitive key for HashMap<Int, String>"));
		PrimitiveOverloadStability._testPrimitiveKeyAndValueTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testPrimitiveKeyAndValue"), novaConstructors.newString2("Testing primitive key and value for HashMap<Int, Int>"));
		PrimitiveOverloadStability._testFunctionalPrimitiveKeyTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testFunctionalPrimitiveKey"), novaConstructors.newString2("Testing functional primitive key for HashMap<Int, String>"));
		PrimitiveOverloadStability._testFunctionalPrimitiveKeyAndValueTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testFunctionalPrimitiveKeyAndValue"), novaConstructors.newString2("Testing functional primitive key and value for HashMap<Int, Int>"));
		PrimitiveOverloadStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(PrimitiveOverloadStability.generated16(PrimitiveOverloadStability._testTestCase, PrimitiveOverloadStability._testPrimitiveKeyAndValueTestCase, PrimitiveOverloadStability._testFunctionalPrimitiveKeyTestCase, PrimitiveOverloadStability._testFunctionalPrimitiveKeyAndValueTestCase));
		
	}
}

var RegexStability0_Nova_init_static_initialized = false;
function RegexStability0_Nova_init_static() {
	if (!RegexStability0_Nova_init_static_initialized) {
		RegexStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		RegexStability._testMatchTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testMatch"), novaConstructors.newString2("Testing Regex match"));
		RegexStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(RegexStability.generated17(RegexStability._testMatchTestCase));
		
	}
}

var StabilityTest0_Nova_init_static_initialized = false;
function StabilityTest0_Nova_init_static() {
	if (!StabilityTest0_Nova_init_static_initialized) {
		StabilityTest0_Nova_init_static_initialized = true;
		ExceptionStability0_Nova_init_static();
		SyntaxStability0_Nova_init_static();
		ClosureStability0_Nova_init_static();
		PolymorphismStability0_Nova_init_static();
		LambdaStability0_Nova_init_static();
		ToStringStability0_Nova_init_static();
		AssignmentStability0_Nova_init_static();
		RegexStability0_Nova_init_static();
		StaticImportStability0_Nova_init_static();
		InnerClassStability0_Nova_init_static();
		ExternalInnerClassStability0_Nova_init_static();
		PrimitiveOverloadStability0_Nova_init_static();
		FancyOutputStreamTests0_Nova_init_static();
		FirstClassFunctionStability0_Nova_init_static();
		LibraryLoadingStability0_Nova_init_static();
		IntervalStability0_Nova_init_static();
		BoundedIntervalStability0_Nova_init_static();
		BoundlessIntervalStability0_Nova_init_static();
		CastStability0_Nova_init_static();
		StabilityTest._runTestsTestSuite = novaConstructors.newTestSuiteRunnerModel(StabilityTest.generated19(novaConstructors.newTestSuite(StabilityTest.generated18(ExceptionStability._runTestsTestRunner, SyntaxStability._runTestsTestRunner, ClosureStability._runTestsTestRunner, PolymorphismStability._runTestsTestRunner, LambdaStability._runTestsTestRunner, ToStringStability._runTestsTestRunner, AssignmentStability._runTestsTestRunner, RegexStability._runTestsTestRunner, StaticImportStability._runTestsTestRunner, InnerClassStability._runTestsTestRunner, ExternalInnerClassStability._runTestsTestRunner, PrimitiveOverloadStability._runTestsTestRunner, FancyOutputStreamTests._runTestsTestRunner, FirstClassFunctionStability._runTestsTestRunner, LibraryLoadingStability._runTestsTestRunner, IntervalStability._runTestsTestRunner, BoundedIntervalStability._runTestsTestRunner, BoundlessIntervalStability._runTestsTestRunner, CastStability._runTestsTestRunner))));
		
	}
}

var StaticImportStability0_Nova_init_static_initialized = false;
function StaticImportStability0_Nova_init_static() {
	if (!StaticImportStability0_Nova_init_static_initialized) {
		StaticImportStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		StaticImportStability._testTestCase = novaConstructors.newTestCase(novaConstructors.newString2("test"), novaConstructors.newString2("Testing math static imports"));
		StaticImportStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(StaticImportStability.generated20(StaticImportStability._testTestCase));
		
	}
}

var SyntaxStability0_Nova_init_static_initialized = false;
function SyntaxStability0_Nova_init_static() {
	if (!SyntaxStability0_Nova_init_static_initialized) {
		SyntaxStability0_Nova_init_static_initialized = true;
		TestCase0_Nova_init_static();
		SyntaxStability._testSimpleMatchStatementTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testSimpleMatchStatement"), novaConstructors.newString2("Testing simple match statement"));
		SyntaxStability._testSimpleMatchStatementWithIndentationTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testSimpleMatchStatementWithIndentation"), novaConstructors.newString2("Testing simple match statement with indentation"));
		SyntaxStability._testSimpleMatchStatementWithScopesTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testSimpleMatchStatementWithScopes"), novaConstructors.newString2("Testing simple match statement with scopes"));
		SyntaxStability._testMatchStatementWithVariableCaseValuesTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testMatchStatementWithVariableCaseValues"), novaConstructors.newString2("Testing match statement with variable case values"));
		SyntaxStability._testMatchStatementWithVariableCaseValuesAndFallthroughTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testMatchStatementWithVariableCaseValuesAndFallthrough"), novaConstructors.newString2("Testing match statement with variable case values and fallthrough"));
		SyntaxStability._testWhileLoopsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testWhileLoops"), novaConstructors.newString2("Testing inline while loop"));
		SyntaxStability._testForLoopsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testForLoops"), novaConstructors.newString2("Testing inline for loop"));
		SyntaxStability._testUntilTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testUntil"), novaConstructors.newString2("Testing until statement"));
		SyntaxStability._testFilterFunctionalityTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testFilterFunctionality"), novaConstructors.newString2("Testing filter functionality"));
		SyntaxStability._testIteratorFunctionalityTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testIteratorFunctionality"), novaConstructors.newString2("Testing iterator functionality"));
		SyntaxStability._testForeachLoopFunctionalityTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testForeachLoopFunctionality"), novaConstructors.newString2("Testing foreach loop functionality"));
		SyntaxStability._testTernaryTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testTernary"), novaConstructors.newString2("Testing ternary functionality"));
		SyntaxStability._testElvisTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testElvis"), novaConstructors.newString2("Testing elvis functionality"));
		SyntaxStability._testNamedArgumentsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testNamedArguments"), novaConstructors.newString2("Testing named arguments"));
		SyntaxStability._checkDefaultClosureArgumentsTestCase = novaConstructors.newTestCase(novaConstructors.newString2("checkDefaultClosureArguments"), novaConstructors.newString2("Testing default closure arguments"));
		SyntaxStability._checkZipperTestCase = novaConstructors.newTestCase(novaConstructors.newString2("checkZipper"), novaConstructors.newString2("Testing zip function"));
		SyntaxStability._testSafeNavigationTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testSafeNavigation"), novaConstructors.newString2("Testing safe navigation operator"));
		SyntaxStability._testArraySafeNavigationTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testArraySafeNavigation"), novaConstructors.newString2("Testing array safe navigation"));
		SyntaxStability._testSnakeCaseNumbersTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testSnakeCaseNumbers"), novaConstructors.newString2("Testing snake case numbers"));
		SyntaxStability._testArrayInitializersTestCase = novaConstructors.newTestCase(novaConstructors.newString2("testArrayInitializers"), novaConstructors.newString2("Testing array initializers"));
		SyntaxStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(SyntaxStability.generated21(SyntaxStability._testSimpleMatchStatementTestCase, SyntaxStability._testSimpleMatchStatementWithIndentationTestCase, SyntaxStability._testSimpleMatchStatementWithScopesTestCase, SyntaxStability._testMatchStatementWithVariableCaseValuesTestCase, SyntaxStability._testMatchStatementWithVariableCaseValuesAndFallthroughTestCase, SyntaxStability._testWhileLoopsTestCase, SyntaxStability._testForLoopsTestCase, SyntaxStability._testUntilTestCase, SyntaxStability._testFilterFunctionalityTestCase, SyntaxStability._testIteratorFunctionalityTestCase, SyntaxStability._testForeachLoopFunctionalityTestCase, SyntaxStability._testTernaryTestCase, SyntaxStability._testElvisTestCase, SyntaxStability._testNamedArgumentsTestCase, SyntaxStability._checkDefaultClosureArgumentsTestCase, SyntaxStability._checkZipperTestCase, SyntaxStability._testSafeNavigationTestCase, SyntaxStability._testArraySafeNavigationTestCase, SyntaxStability._testSnakeCaseNumbersTestCase, SyntaxStability._testArrayInitializersTestCase));
		
	}
}

var ToStringStability0_Nova_init_static_initialized = false;
function ToStringStability0_Nova_init_static() {
	if (!ToStringStability0_Nova_init_static_initialized) {
		ToStringStability0_Nova_init_static_initialized = true;
		ToStringStability._runTestsTestRunner = novaConstructors.newTestRunnerModel(novaConstructors.newArray0(0));
		
	}
}

var Nest0_Nova_init_static_initialized = false;
function Nest0_Nova_init_static() {
	if (!Nest0_Nova_init_static_initialized) {
		Nest0_Nova_init_static_initialized = true;
		NovaConsole0_Nova_init_static();
		Nest.out = novaConstructors.newFancyOutputStream();
		
	}
}

var TestCase0_Nova_init_static_initialized = false;
function TestCase0_Nova_init_static() {
	if (!TestCase0_Nova_init_static_initialized) {
		TestCase0_Nova_init_static_initialized = true;
		TestCase.staticId = 0;
		
	}
}

var NovaString0_Nova_init_static_initialized = false;
function NovaString0_Nova_init_static() {
	if (!NovaString0_Nova_init_static_initialized) {
		NovaString0_Nova_init_static_initialized = true;
		NovaString.WHITESPACE = NovaString.generated22();
		
	}
}

var System0_Nova_init_static_initialized = false;
function System0_Nova_init_static() {
	if (!System0_Nova_init_static_initialized) {
		System0_Nova_init_static_initialized = true;
		Thread0_Nova_init_static();
		NovaLong0_Nova_init_static();
		NovaMath0_Nova_init_static();
		System.TARGET = novaConstructors.newString2("Javascript");
		System.WINDOWS = 1;
		System.LINUX = 2;
		System.MAC_OSX = 3;
		System.overheadTimer = novaConstructors.newCumulativeTimer();
		System.exceptionData = novaConstructors.newThreadLocal(null);
		
	}
}

var NovaConsole0_Nova_init_static_initialized = false;
function NovaConsole0_Nova_init_static() {
	if (!NovaConsole0_Nova_init_static_initialized) {
		NovaConsole0_Nova_init_static_initialized = true;
		NovaConsole.out = novaConstructors.newFileWriter1();
		
	}
}

var OutputStream0_Nova_init_static_initialized = false;
function OutputStream0_Nova_init_static() {
	if (!OutputStream0_Nova_init_static_initialized) {
		OutputStream0_Nova_init_static_initialized = true;
		OutputStream.EMPTY = novaConstructors.newEmptyOutputStream();
		
	}
}

var File1_Nova_init_static_initialized = false;
function File1_Nova_init_static() {
	if (!File1_Nova_init_static_initialized) {
		File1_Nova_init_static_initialized = true;
		NovaLong0_Nova_init_static();
		NovaString0_Nova_init_static();
		var exitLog;
		exitLog = novaConstructors.newFile1(novaConstructors.newString2("log").plus0(NovaLong.toString((Time.accessor_currentTimeMillis())).plus0(novaConstructors.newString2(""))));
		
	}
}

var Sequence0_Nova_init_static_initialized = false;
function Sequence0_Nova_init_static() {
	if (!Sequence0_Nova_init_static_initialized) {
		Sequence0_Nova_init_static_initialized = true;
		Sequence.INFINITE = -1;
		
	}
}

var NovaMath0_Nova_init_static_initialized = false;
function NovaMath0_Nova_init_static() {
	if (!NovaMath0_Nova_init_static_initialized) {
		NovaMath0_Nova_init_static_initialized = true;
		NovaMath.PI = 3.141592653;
		
	}
}

var Matrix0_Nova_init_static_initialized = false;
function Matrix0_Nova_init_static() {
	if (!Matrix0_Nova_init_static_initialized) {
		Matrix0_Nova_init_static_initialized = true;
		Matrix.TOLERANCE = 0.0001;
		Matrix.LOWER_TOLERANCE = 1 - Matrix.TOLERANCE;
		Matrix.UPPER_TOLERANCE = 1 + Matrix.TOLERANCE;
		
	}
}

var NumericOperation0_Nova_init_static_initialized = false;
function NumericOperation0_Nova_init_static() {
	if (!NumericOperation0_Nova_init_static_initialized) {
		NumericOperation0_Nova_init_static_initialized = true;
		NumericOperation.GROUPING = 1;
		NumericOperation.EXPONENT = 2;
		NumericOperation.MULTIPLICATION = 3;
		NumericOperation.DIVISION = 3;
		NumericOperation.ADDITION = 4;
		NumericOperation.SUBTRACTION = 4;
		NumericOperation.MAX = 5;
		NumericOperation.INVALID = -1;
		NumericOperation.OPERATOR = 1;
		NumericOperation.VALID_OPERATORS = NumericOperation.generated23();
		NumericOperation.INVALID_OPERATORS = NumericOperation.generated24();
		NumericOperation.WHITESPACE_CHARS = NumericOperation.generated25();
		NumericOperation.NUMBER = 3;
		NumericOperation.NUMERIC_CHARS = NumericOperation.generated26();
		NumericOperation.VARIABLE = 4;
		
	}
}

var Polynomial0_Nova_init_static_initialized = false;
function Polynomial0_Nova_init_static() {
	if (!Polynomial0_Nova_init_static_initialized) {
		Polynomial0_Nova_init_static_initialized = true;
		Polynomial.SYMBOLS_CHARS = Polynomial.generated27();
		Polynomial.WHITESPACE_CHARS = Polynomial.generated28();
		
	}
}

var WFF0_Nova_init_static_initialized = false;
function WFF0_Nova_init_static() {
	if (!WFF0_Nova_init_static_initialized) {
		WFF0_Nova_init_static_initialized = true;
		WFF.whitespace = WFF.generated29();
		
	}
}

var Library1_Nova_init_static_initialized = false;
function Library1_Nova_init_static() {
	if (!Library1_Nova_init_static_initialized) {
		Library1_Nova_init_static_initialized = true;
		System0_Nova_init_static();
		if ((System.TARGET || nova_null).equals0(novaConstructors.newString2("C"))) {
			if ((System.OS_INT) == System.WINDOWS) {
				Library.EXTENSION = novaConstructors.newString2(".dll");
				
			} else if ((System.OS_INT) == System.LINUX) {
				Library.EXTENSION = novaConstructors.newString2(".so");
				
			} else if ((System.OS_INT) == System.MAC_OSX) {
				Library.EXTENSION = novaConstructors.newString2(".dylib");
				
			}
			
		} else if ((System.TARGET || nova_null).equals0(novaConstructors.newString2("Java"))) {
		}
		else if ((System.TARGET || nova_null).equals0(novaConstructors.newString2("Javascript"))) {
		}
		
	}
}

var NovaInt0_Nova_init_static_initialized = false;
function NovaInt0_Nova_init_static() {
	if (!NovaInt0_Nova_init_static_initialized) {
		NovaInt0_Nova_init_static_initialized = true;
		NovaInt.MAX_VALUE = 2147483647;
		NovaInt.MIN_VALUE = -2147483648;
		
	}
}

var NovaLong0_Nova_init_static_initialized = false;
function NovaLong0_Nova_init_static() {
	if (!NovaLong0_Nova_init_static_initialized) {
		NovaLong0_Nova_init_static_initialized = true;
		NovaLong.MAX_VALUE = 9223372036854775807;
		NovaLong.MIN_VALUE = -9223372036854775808;
		
	}
}

var Sha2560_Nova_init_static_initialized = false;
function Sha2560_Nova_init_static() {
	if (!Sha2560_Nova_init_static_initialized) {
		Sha2560_Nova_init_static_initialized = true;
		Sha256.CONSTANTS = Sha256.generated30();
		
	}
}

var SyntaxStringFunctions0_Nova_init_static_initialized = false;
function SyntaxStringFunctions0_Nova_init_static() {
	if (!SyntaxStringFunctions0_Nova_init_static_initialized) {
		SyntaxStringFunctions0_Nova_init_static_initialized = true;
		SyntaxStringFunctions.WHITESPACE = (novaConstructors.newString2(" \t\n\r").chars || nova_null).toCharArray();
		SyntaxStringFunctions.EITHER_STATEMENT_END_CHARS = (novaConstructors.newString2("\n;{}").chars || nova_null).toCharArray();
		SyntaxStringFunctions.SYMBOLS_CHARS = (novaConstructors.newString2("-+~!=%^&|*/\\><,\"'[]{};:?()").chars || nova_null).toCharArray();
		SyntaxStringFunctions.STMT_PRE_CONT_CHARS = (novaConstructors.newString2("-+~!=%^&|*/\\><,.[").chars || nova_null).toCharArray();
		SyntaxStringFunctions.STMT_POST_CONT_CHARS = (novaConstructors.newString2("-+~!=%^&|*/\\><,.]").chars || nova_null).toCharArray();
		SyntaxStringFunctions.INVALID_DECLARATION_CHARS = (novaConstructors.newString2("-+~!=%^|/\"\\'{};()").chars || nova_null).toCharArray();
	SyntaxStringFunctions.WORD_BOUNDARIES = (novaConstructors.newString2(" \t\n\r-+~!=%^&|*/\\><,\"'[]{};:?()").chars || nova_null).toCharArray();
	
}}

var Color0_Nova_init_static_initialized = false;
function Color0_Nova_init_static() {
	if (!Color0_Nova_init_static_initialized) {
		Color0_Nova_init_static_initialized = true;
		Color.RED = novaConstructors.newColor1(255, 0, 0);
		Color.GREEN = novaConstructors.newColor1(0, 255, 0);
		Color.BLUE = novaConstructors.newColor1(0, 0, 255);
		
	}
}

var NovaDateTime0_Nova_init_static_initialized = false;
function NovaDateTime0_Nova_init_static() {
	if (!NovaDateTime0_Nova_init_static_initialized) {
		NovaDateTime0_Nova_init_static_initialized = true;
		NovaDateTime.SECS_DAY = 24 * 60 * 60 * 1000;
		NovaDateTime.SECS_HOUR = 60 * 60 * 1000;
		NovaDateTime.SECS_MINUTE = 60 * 1000;
		NovaDateTime.EPOCH_YEAR = 1970;
		NovaDateTime.MONTH_DAYS = NovaDateTime.generated31();
		NovaDateTime.LEAP_MONTH_DAYS = NovaDateTime.generated32();
		
	}
}
nova_null = novaConstructors.newNull();

Lab0_Nova_init_static();
Thread0_Nova_init_static();
AssignmentStability0_Nova_init_static();
BoundedIntervalStability0_Nova_init_static();
BoundlessIntervalStability0_Nova_init_static();
CastStability0_Nova_init_static();
ClosureStability0_Nova_init_static();
ExceptionStability0_Nova_init_static();
ExternalInnerClassStability0_Nova_init_static();
FancyOutputStreamTests0_Nova_init_static();
FileStability0_Nova_init_static();
FirstClassFunctionStability0_Nova_init_static();
InnerClassStability0_Nova_init_static();
IntervalStability0_Nova_init_static();
LambdaStability0_Nova_init_static();
LibraryLoadingStability0_Nova_init_static();
NetworkStability0_Nova_init_static();
PolymorphismStability0_Nova_init_static();
PrimitiveOverloadStability0_Nova_init_static();
RegexStability0_Nova_init_static();
StabilityTest0_Nova_init_static();
StaticImportStability0_Nova_init_static();
SyntaxStability0_Nova_init_static();
ToStringStability0_Nova_init_static();
Nest0_Nova_init_static();
TestCase0_Nova_init_static();
NovaString0_Nova_init_static();
System0_Nova_init_static();
NovaConsole0_Nova_init_static();
OutputStream0_Nova_init_static();
File1_Nova_init_static();
Sequence0_Nova_init_static();
NovaMath0_Nova_init_static();
Matrix0_Nova_init_static();
NumericOperation0_Nova_init_static();
Polynomial0_Nova_init_static();
WFF0_Nova_init_static();
Library1_Nova_init_static();
NovaInt0_Nova_init_static();
NovaLong0_Nova_init_static();
Sha2560_Nova_init_static();
SyntaxStringFunctions0_Nova_init_static();
Color0_Nova_init_static();
NovaDateTime0_Nova_init_static();

var nova_main_args = process && process.argv ?
System.jsStringArrayToNovaArray(process.argv) :
novaConstructors.newArray();

StabilityTest.main(nova_main_args);
